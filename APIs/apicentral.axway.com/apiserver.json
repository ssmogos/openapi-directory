{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "AMPLIFY Central API v0.241",
    "version" : "0.241.0",
    "contact" : {
      "name" : "Axway Support",
      "email" : "support@axway.com"
    },
    "license" : {
      "name" : "Copyright Axway 2023. All rights reserved."
    },
    "description" : "APIs to manage AMPLIFY Central configuration resources.",
    "x-api-id" : "a68e7c9b-98bc-519d-9831-ee19d57a2613",
    "x-audience" : "axway-customer"
  },
  "tags" : [ {
    "name" : "catalog",
    "description" : "Resources for group catalog"
  }, {
    "name" : "definitions",
    "description" : "Resources for group definitions"
  }, {
    "name" : "management",
    "description" : "Resources for group management"
  } ],
  "security" : [ {
    "BearerToken" : [ ]
  }, {
    "OAuth2" : [ ]
  } ],
  "servers" : [ {
    "url" : "https://apicentral.axway.com/apis"
  } ],
  "paths" : {
    "/management/v1alpha1/watchtopics" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves WatchTopic for version v1alpha1 from group management",
        "description" : "Retrieves WatchTopic for version v1alpha1 from group management",
        "operationId" : "list_management_v1alpha1_WatchTopic",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.WatchTopic resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type WatchTopic for version v1alpha1 from group management",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of watchtopics."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create WatchTopic for version v1alpha1 from group management",
        "description" : "Create WatchTopic for version v1alpha1 from group management",
        "operationId" : "create_management_v1alpha1_WatchTopic",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.WatchTopic resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new WatchTopic for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/watchtopics/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the WatchTopic",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves WatchTopic for version v1alpha1 from group management",
        "description" : "Retrieves WatchTopic for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_WatchTopic",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.WatchTopic resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read WatchTopic for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove WatchTopic for version v1alpha1 from group management",
        "description" : "Remove WatchTopic for version v1alpha1 from group management",
        "operationId" : "remove_management_v1alpha1_WatchTopic",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing WatchTopic for version v1alpha1 from group management. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed WatchTopic for version v1alpha1 from group management"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update WatchTopic for version v1alpha1 from group management",
        "description" : "Update WatchTopic for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_WatchTopic",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.WatchTopic resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update WatchTopic for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/watchtopics/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the WatchTopic",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of WatchTopic for version v1alpha1 from group management",
        "description" : "Retrieves Extension resource data of WatchTopic for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_WatchTopic_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.WatchTopic resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of WatchTopic for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of WatchTopic for version v1alpha1 from group management",
        "description" : "Update Extension resource data of WatchTopic for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_WatchTopic_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.WatchTopic resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of WatchTopic for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.WatchTopic"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/discoveryagents" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_DiscoveryAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of discoveryagents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Create DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_DiscoveryAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/discoveryagents/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the DiscoveryAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_DiscoveryAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Remove DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_DiscoveryAgent",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing DiscoveryAgent for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed DiscoveryAgent for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Update DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_DiscoveryAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/discoveryagents/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the DiscoveryAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_DiscoveryAgent_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_DiscoveryAgent_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/discoveryagents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the DiscoveryAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_DiscoveryAgent_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_DiscoveryAgent_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.DiscoveryAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of DiscoveryAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/traceabilityagents" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_TraceabilityAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of traceabilityagents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Create TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_TraceabilityAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/traceabilityagents/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the TraceabilityAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_TraceabilityAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Remove TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_TraceabilityAgent",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing TraceabilityAgent for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed TraceabilityAgent for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Update TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_TraceabilityAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/traceabilityagents/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the TraceabilityAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_TraceabilityAgent_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_TraceabilityAgent_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/traceabilityagents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the TraceabilityAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_TraceabilityAgent_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_TraceabilityAgent_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.TraceabilityAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of TraceabilityAgent for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/governanceagents" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_Environment_GovernanceAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, agentconfigstatus, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of governanceagents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Create GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_Environment_GovernanceAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, agentconfigstatus, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/governanceagents/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GovernanceAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_GovernanceAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, agentconfigstatus, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_Environment_GovernanceAgent",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_GovernanceAgent",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, agentconfigstatus, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/governanceagents/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GovernanceAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves status resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_GovernanceAgent_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update status resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_GovernanceAgent_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/governanceagents/{name}/agentconfigstatus" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GovernanceAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves agentconfigstatus resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves agentconfigstatus resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_GovernanceAgent_agentconfigstatus",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read agentconfigstatus resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update agentconfigstatus resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update agentconfigstatus resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_GovernanceAgent_agentconfigstatus",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated agentconfigstatus resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/governanceagents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GovernanceAgent",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_GovernanceAgent_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_GovernanceAgent_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GovernanceAgent resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of GovernanceAgent for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgent"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/stages" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Stage for version v1alpha1 from group catalog",
        "description" : "Retrieves Stage for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_Stage",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Stage for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of stages."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Stage for version v1alpha1 from group catalog",
        "description" : "Create Stage for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_Stage",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Stage for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/stages/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Stage",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Stage for version v1alpha1 from group catalog",
        "description" : "Retrieves Stage for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Stage",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Stage for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Stage for version v1alpha1 from group catalog",
        "description" : "Remove Stage for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_Stage",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Stage for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Stage for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Stage for version v1alpha1 from group catalog",
        "description" : "Update Stage for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Stage",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Stage for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/stages/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Stage",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Stage for version v1alpha1 from group catalog",
        "description" : "Retrieves icon resource data of Stage for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Stage_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Stage for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Stage for version v1alpha1 from group catalog",
        "description" : "Update icon resource data of Stage for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Stage_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Stage for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/stages/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Stage",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Stage for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of Stage for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Stage_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Stage for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Stage for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of Stage for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Stage_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Stage resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Stage for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Stage"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves Asset for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_Asset",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * spec.type * state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, access, icon, latestrelease, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Asset for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assets."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Asset for version v1alpha1 from group catalog",
        "description" : "Create Asset for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_Asset",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, access, icon, latestrelease, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, access, icon, latestrelease, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Asset for version v1alpha1 from group catalog",
        "description" : "Remove Asset for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_Asset",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Asset for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Asset for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Asset for version v1alpha1 from group catalog",
        "description" : "Update Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, access, icon, latestrelease, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}/access" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves access resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves access resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset_access",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read access resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update access resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Update access resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset_access",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated access resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves icon resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Update icon resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}/latestrelease" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves latestrelease resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves latestrelease resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset_latestrelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read latestrelease resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update latestrelease resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Update latestrelease resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset_latestrelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated latestrelease resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves status resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Update status resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}/state" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves state resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Update state resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}/references" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves references resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Update references resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Asset_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Asset for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of Asset for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Asset_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Asset resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Asset for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_AssetRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.version * status.level * spec.type * spec.state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, icon, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetRelease for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetreleases."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetRelease for version v1alpha1 from group catalog",
        "description" : "Create AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_AssetRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, icon, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AssetRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, icon, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetRelease for version v1alpha1 from group catalog",
        "description" : "Remove AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_AssetRelease",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetRelease for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetRelease for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetRelease for version v1alpha1 from group catalog",
        "description" : "Update AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AssetRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, icon, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves status resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Update status resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves icon resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Update icon resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{name}/references" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves references resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Update references resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetRelease for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of AssetRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/categories" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Category for version v1 from group catalog",
        "description" : "Retrieves Category for version v1 from group catalog",
        "operationId" : "list_catalog_v1_Category",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.restriction.marketplace.visible * spec.restriction.type * spec.restriction.marketplace.featured\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Category for version v1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of categories."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Category"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Category for version v1 from group catalog",
        "description" : "Create Category for version v1 from group catalog",
        "operationId" : "create_catalog_v1_Category",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Category"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Category for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/categories/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Category for version v1 from group catalog",
        "description" : "Retrieves Category for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Category",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Category for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Category for version v1 from group catalog",
        "description" : "Remove Category for version v1 from group catalog",
        "operationId" : "remove_catalog_v1_Category",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Category for version v1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Category for version v1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Category for version v1 from group catalog",
        "description" : "Update Category for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Category",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Category"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Category for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/categories/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Category for version v1 from group catalog",
        "description" : "Retrieves icon resource data of Category for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Category_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Category for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Category for version v1 from group catalog",
        "description" : "Update icon resource data of Category for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Category_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Category"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Category for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/categories/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Category for version v1 from group catalog",
        "description" : "Retrieves Extension resource data of Category for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Category_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Category for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Category for version v1 from group catalog",
        "description" : "Update Extension resource data of Category for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Category_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Category"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Category for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/categories" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Category for version v1alpha1 from group catalog",
        "description" : "Retrieves Category for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_Category",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.restriction.marketplace.visible * spec.restriction.type * spec.restriction.marketplace.featured\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Category for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of categories."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Category for version v1alpha1 from group catalog",
        "description" : "Create Category for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_Category",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Category for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/categories/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Category for version v1alpha1 from group catalog",
        "description" : "Retrieves Category for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Category",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Category for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Category for version v1alpha1 from group catalog",
        "description" : "Remove Category for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_Category",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Category for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Category for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Category for version v1alpha1 from group catalog",
        "description" : "Update Category for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Category",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Category for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/categories/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Category for version v1alpha1 from group catalog",
        "description" : "Retrieves icon resource data of Category for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Category_icon",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Category for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Category for version v1alpha1 from group catalog",
        "description" : "Update icon resource data of Category for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Category_icon",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Category for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/categories/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Category for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of Category for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Category_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Category for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Category for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of Category for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Category_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Category resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Category for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Category"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Retrieves AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_AuthorizationProfile",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AuthorizationProfile for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of authprofiles."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Create AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_AuthorizationProfile",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AuthorizationProfile for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Retrieves AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AuthorizationProfile for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Remove AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_AuthorizationProfile",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AuthorizationProfile for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AuthorizationProfile for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Update AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AuthorizationProfile for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{name}/references" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Retrieves references resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of AuthorizationProfile for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Update references resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of AuthorizationProfile for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AuthorizationProfile for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of AuthorizationProfile for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AuthorizationProfile resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AuthorizationProfile for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfile"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Application for version v1alpha1 from group catalog",
        "description" : "Retrieves Application for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_Application",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * marketplace.resource.owner.id * marketplace.resource.owner.organization.id\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Application for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of applications."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Application for version v1alpha1 from group catalog",
        "description" : "Create Application for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_Application",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Application for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Application for version v1alpha1 from group catalog",
        "description" : "Retrieves Application for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Application",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Application for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Application for version v1alpha1 from group catalog",
        "description" : "Remove Application for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_Application",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Application for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Application for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Application for version v1alpha1 from group catalog",
        "description" : "Update Application for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Application",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Application for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{name}/marketplace" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves marketplace resource data of Application for version v1alpha1 from group catalog",
        "description" : "Retrieves marketplace resource data of Application for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Application_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read marketplace resource data of Application for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update marketplace resource data of Application for version v1alpha1 from group catalog",
        "description" : "Update marketplace resource data of Application for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Application_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated marketplace resource data of Application for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Application for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of Application for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Application_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Application for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Application for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of Application for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Application_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Application resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Application for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Application"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "list_catalog_v1alpha1_Application_Credential",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * state.name * status.level * spec.state.name * policies.expiry.timestamp * marketplace.resource.owner.id * marketplace.resource.owner.organization.id\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, marketplace, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Credential for version v1alpha1 from group catalog in scope Application",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of credentials."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Create Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "create_catalog_v1alpha1_Application_Credential",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, marketplace, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, marketplace, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Remove Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "remove_catalog_v1alpha1_Application_Credential",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Credential for version v1alpha1 from group catalog in scope Application. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Credential for version v1alpha1 from group catalog in scope Application"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, marketplace, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}/references" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves references resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update references resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}/data" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves data resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves data resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential_data",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read data resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update data resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update data resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential_data",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated data resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}/state" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves state resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update state resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}/policies" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves policies resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves policies resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential_policies",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read policies resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update policies resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update policies resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential_policies",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated policies resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}/marketplace" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves marketplace resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves marketplace resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read marketplace resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update marketplace resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update marketplace resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated marketplace resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}/status" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves status resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update status resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/credentials/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves Extension resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_Credential_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "description" : "Update Extension resource data of Credential for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_Credential_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Credential for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Subscription for version v1alpha1 from group catalog",
        "description" : "Retrieves Subscription for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_Subscription",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * marketplace.resource.owner.id * approval.state * marketplace.resource.owner.organization.id\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Subscription for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of subscriptions."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Subscription for version v1alpha1 from group catalog",
        "description" : "Create Subscription for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_Subscription",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Subscription for version v1alpha1 from group catalog",
        "description" : "Retrieves Subscription for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Subscription",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Subscription for version v1alpha1 from group catalog",
        "description" : "Remove Subscription for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_Subscription",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Subscription for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Subscription for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Subscription for version v1alpha1 from group catalog",
        "description" : "Update Subscription for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Subscription",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{name}/marketplace" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves marketplace resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Retrieves marketplace resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Subscription_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read marketplace resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update marketplace resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Update marketplace resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Subscription_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated marketplace resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{name}/approval" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves approval resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Retrieves approval resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Subscription_approval",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read approval resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update approval resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Update approval resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Subscription_approval",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated approval resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Retrieves status resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Subscription_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Update status resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Subscription_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Subscription_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Subscription for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of Subscription for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Subscription_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Subscription resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Subscription for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Subscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Environment for version v1alpha1 from group management",
        "description" : "Retrieves Environment for version v1alpha1 from group management",
        "operationId" : "list_management_v1alpha1_Environment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.axwayManaged\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Environment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Environment for version v1alpha1 from group management",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of environments."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Environment"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Environment for version v1alpha1 from group management",
        "description" : "Create Environment for version v1alpha1 from group management",
        "operationId" : "create_management_v1alpha1_Environment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Environment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Environment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Environment for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Environment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Environment for version v1alpha1 from group management",
        "description" : "Retrieves Environment for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_Environment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Environment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Environment for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Environment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Environment for version v1alpha1 from group management",
        "description" : "Remove Environment for version v1alpha1 from group management",
        "operationId" : "remove_management_v1alpha1_Environment",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Environment for version v1alpha1 from group management. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Environment for version v1alpha1 from group management"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Environment for version v1alpha1 from group management",
        "description" : "Update Environment for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_Environment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Environment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Environment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Environment for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Environment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Environment for version v1alpha1 from group management",
        "description" : "Retrieves Extension resource data of Environment for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_Environment_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Environment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Environment for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Environment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Environment for version v1alpha1 from group management",
        "description" : "Update Extension resource data of Environment for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_Environment_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Environment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Environment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Environment for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Environment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservices" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_APIService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * details.specType\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, details, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type APIService for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of apiservices."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Create APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_APIService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, details, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservices/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, details, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Remove APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_APIService",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing APIService for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed APIService for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Update APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, details, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservices/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIService_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIService_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservices/{name}/details" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves details resource data of APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves details resource data of APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIService_details",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read details resource data of APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update details resource data of APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Update details resource data of APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIService_details",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated details resource data of APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservices/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of APIService for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of APIService for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of APIService for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservicerevisions" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_APIServiceRevision",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.definition.type\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceRevision resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type APIServiceRevision for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of apiservicerevisions."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "description" : "Create APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_APIServiceRevision",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceRevision resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new APIServiceRevision for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservicerevisions/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIServiceRevision",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIServiceRevision",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceRevision resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read APIServiceRevision for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "description" : "Remove APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_APIServiceRevision",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing APIServiceRevision for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed APIServiceRevision for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "description" : "Update APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIServiceRevision",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceRevision resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update APIServiceRevision for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiservicerevisions/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIServiceRevision",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIServiceRevision_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceRevision resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of APIServiceRevision for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of APIServiceRevision for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIServiceRevision_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceRevision resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of APIServiceRevision for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevision"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiserviceinstances" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_APIServiceInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of apiserviceinstances."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Create APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_APIServiceInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiserviceinstances/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIServiceInstance",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIServiceInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Remove APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_APIServiceInstance",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing APIServiceInstance for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed APIServiceInstance for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Update APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIServiceInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiserviceinstances/{name}/references" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIServiceInstance",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves references resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIServiceInstance_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Update references resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIServiceInstance_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/apiserviceinstances/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIServiceInstance",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_APIServiceInstance_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_APIServiceInstance_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIServiceInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of APIServiceInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumerinstances" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_ConsumerInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.phase.level * spec.owningTeam\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of consumerinstances."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Create ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_ConsumerInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumerinstances/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerInstance",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ConsumerInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Remove ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_ConsumerInstance",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ConsumerInstance for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ConsumerInstance for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Update ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ConsumerInstance",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumerinstances/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerInstance",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ConsumerInstance_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ConsumerInstance_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumerinstances/{name}/references" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerInstance",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves references resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ConsumerInstance_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Update references resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ConsumerInstance_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumerinstances/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerInstance",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ConsumerInstance_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ConsumerInstance_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerInstance resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ConsumerInstance for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumersubscriptiondefs" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_ConsumerSubscriptionDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerSubscriptionDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of consumersubscriptiondefs."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Create ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_ConsumerSubscriptionDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerSubscriptionDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumersubscriptiondefs/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerSubscriptionDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ConsumerSubscriptionDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerSubscriptionDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Remove ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_ConsumerSubscriptionDefinition",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ConsumerSubscriptionDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerSubscriptionDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/consumersubscriptiondefs/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerSubscriptionDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ConsumerSubscriptionDefinition_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerSubscriptionDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ConsumerSubscriptionDefinition_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ConsumerSubscriptionDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ConsumerSubscriptionDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Integration for version v1alpha1 from group management",
        "description" : "Retrieves Integration for version v1alpha1 from group management",
        "operationId" : "list_management_v1alpha1_Integration",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Integration resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Integration for version v1alpha1 from group management",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of integrations."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Integration"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Integration for version v1alpha1 from group management",
        "description" : "Create Integration for version v1alpha1 from group management",
        "operationId" : "create_management_v1alpha1_Integration",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Integration resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Integration"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Integration for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Integration"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Integration for version v1alpha1 from group management",
        "description" : "Retrieves Integration for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_Integration",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Integration resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Integration for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Integration"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Integration for version v1alpha1 from group management",
        "description" : "Remove Integration for version v1alpha1 from group management",
        "operationId" : "remove_management_v1alpha1_Integration",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Integration for version v1alpha1 from group management. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Integration for version v1alpha1 from group management"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Integration for version v1alpha1 from group management",
        "description" : "Update Integration for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_Integration",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Integration resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Integration"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Integration for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Integration"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Integration for version v1alpha1 from group management",
        "description" : "Retrieves Extension resource data of Integration for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_Integration_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Integration resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Integration for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Integration"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Integration for version v1alpha1 from group management",
        "description" : "Update Extension resource data of Integration for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_Integration_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Integration resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Integration"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Integration for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Integration"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/resourcehooks" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceHook for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves ResourceHook for version v1alpha1 from group management in scope Integration",
        "operationId" : "list_management_v1alpha1_Integration_ResourceHook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceHook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ResourceHook for version v1alpha1 from group management in scope Integration",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resourcehooks."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ResourceHook for version v1alpha1 from group management in scope Integration",
        "description" : "Create ResourceHook for version v1alpha1 from group management in scope Integration",
        "operationId" : "create_management_v1alpha1_Integration_ResourceHook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceHook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ResourceHook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/resourcehooks/{name}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceHook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceHook for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves ResourceHook for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_ResourceHook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceHook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ResourceHook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ResourceHook for version v1alpha1 from group management in scope Integration",
        "description" : "Remove ResourceHook for version v1alpha1 from group management in scope Integration",
        "operationId" : "remove_management_v1alpha1_Integration_ResourceHook",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ResourceHook for version v1alpha1 from group management in scope Integration. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ResourceHook for version v1alpha1 from group management in scope Integration"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ResourceHook for version v1alpha1 from group management in scope Integration",
        "description" : "Update ResourceHook for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_ResourceHook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceHook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ResourceHook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/resourcehooks/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceHook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ResourceHook for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Extension resource data of ResourceHook for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_ResourceHook_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceHook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ResourceHook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ResourceHook for version v1alpha1 from group management in scope Integration",
        "description" : "Update Extension resource data of ResourceHook for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_ResourceHook_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceHook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ResourceHook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceHook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves K8SCluster for version v1alpha1 from group management",
        "description" : "Retrieves K8SCluster for version v1alpha1 from group management",
        "operationId" : "list_management_v1alpha1_K8SCluster",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SCluster resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type K8SCluster for version v1alpha1 from group management",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of k8sclusters."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create K8SCluster for version v1alpha1 from group management",
        "description" : "Create K8SCluster for version v1alpha1 from group management",
        "operationId" : "create_management_v1alpha1_K8SCluster",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SCluster resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new K8SCluster for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves K8SCluster for version v1alpha1 from group management",
        "description" : "Retrieves K8SCluster for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_K8SCluster",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SCluster resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read K8SCluster for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove K8SCluster for version v1alpha1 from group management",
        "description" : "Remove K8SCluster for version v1alpha1 from group management",
        "operationId" : "remove_management_v1alpha1_K8SCluster",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing K8SCluster for version v1alpha1 from group management. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed K8SCluster for version v1alpha1 from group management"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update K8SCluster for version v1alpha1 from group management",
        "description" : "Update K8SCluster for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_K8SCluster",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SCluster resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update K8SCluster for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of K8SCluster for version v1alpha1 from group management",
        "description" : "Retrieves Extension resource data of K8SCluster for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_K8SCluster_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SCluster resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of K8SCluster for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of K8SCluster for version v1alpha1 from group management",
        "description" : "Update Extension resource data of K8SCluster for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_K8SCluster_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SCluster resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of K8SCluster for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SCluster"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/k8sresources" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "list_management_v1alpha1_K8SCluster_K8SResource",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type K8SResource for version v1alpha1 from group management in scope K8SCluster",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of k8sresources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Create K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "create_management_v1alpha1_K8SCluster_K8SResource",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new K8SResource for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/k8sresources/{name}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the K8SResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_K8SResource",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read K8SResource for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Remove K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "remove_management_v1alpha1_K8SCluster_K8SResource",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing K8SResource for version v1alpha1 from group management in scope K8SCluster. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed K8SResource for version v1alpha1 from group management in scope K8SCluster"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_K8SResource",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update K8SResource for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/k8sresources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the K8SResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves Extension resource data of K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_K8SResource_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of K8SResource for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update Extension resource data of K8SResource for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_K8SResource_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.K8SResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of K8SResource for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.K8SResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/resourcediscoveries" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "list_management_v1alpha1_K8SCluster_ResourceDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resourcediscoveries."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Create ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "create_management_v1alpha1_K8SCluster_ResourceDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/resourcediscoveries/{name}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceDiscovery",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_ResourceDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Remove ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "remove_management_v1alpha1_K8SCluster_ResourceDiscovery",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_ResourceDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/resourcediscoveries/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceDiscovery",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves Extension resource data of ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_ResourceDiscovery_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update Extension resource data of ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_ResourceDiscovery_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ResourceDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ResourceDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Mesh for version v1alpha1 from group management",
        "description" : "Retrieves Mesh for version v1alpha1 from group management",
        "operationId" : "list_management_v1alpha1_Mesh",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Mesh resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Mesh for version v1alpha1 from group management",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of meshes."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Mesh for version v1alpha1 from group management",
        "description" : "Create Mesh for version v1alpha1 from group management",
        "operationId" : "create_management_v1alpha1_Mesh",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Mesh resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Mesh for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Mesh for version v1alpha1 from group management",
        "description" : "Retrieves Mesh for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_Mesh",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Mesh resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Mesh for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Mesh for version v1alpha1 from group management",
        "description" : "Remove Mesh for version v1alpha1 from group management",
        "operationId" : "remove_management_v1alpha1_Mesh",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Mesh for version v1alpha1 from group management. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Mesh for version v1alpha1 from group management"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Mesh for version v1alpha1 from group management",
        "description" : "Update Mesh for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_Mesh",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Mesh resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Mesh for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Mesh for version v1alpha1 from group management",
        "description" : "Retrieves Extension resource data of Mesh for version v1alpha1 from group management",
        "operationId" : "read_management_v1alpha1_Mesh_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Mesh resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Mesh for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Mesh for version v1alpha1 from group management",
        "description" : "Update Extension resource data of Mesh for version v1alpha1 from group management",
        "operationId" : "update_management_v1alpha1_Mesh_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Mesh resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Mesh for version v1alpha1 from group management",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Mesh"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/specdiscoveries" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "list_management_v1alpha1_K8SCluster_SpecDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.SpecDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of specdiscoveries."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Create SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "create_management_v1alpha1_K8SCluster_SpecDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.SpecDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/specdiscoveries/{name}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the SpecDiscovery",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_SpecDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.SpecDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Remove SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "remove_management_v1alpha1_K8SCluster_SpecDiscovery",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing SpecDiscovery for version v1alpha1 from group management in scope K8SCluster. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed SpecDiscovery for version v1alpha1 from group management in scope K8SCluster"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_SpecDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.SpecDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/specdiscoveries/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the SpecDiscovery",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves Extension resource data of SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_SpecDiscovery_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.SpecDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update Extension resource data of SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_SpecDiscovery_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.SpecDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of SpecDiscovery for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/apispecs" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APISpec for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves APISpec for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "list_management_v1alpha1_K8SCluster_APISpec",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APISpec resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type APISpec for version v1alpha1 from group management in scope K8SCluster",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of apispecs."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create APISpec for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Create APISpec for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "create_management_v1alpha1_K8SCluster_APISpec",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APISpec resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new APISpec for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/apispecs/{name}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APISpec",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APISpec for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves APISpec for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_APISpec",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APISpec resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read APISpec for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove APISpec for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Remove APISpec for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "remove_management_v1alpha1_K8SCluster_APISpec",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing APISpec for version v1alpha1 from group management in scope K8SCluster. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed APISpec for version v1alpha1 from group management in scope K8SCluster"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update APISpec for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update APISpec for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_APISpec",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APISpec resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update APISpec for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/apispecs/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APISpec",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of APISpec for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves Extension resource data of APISpec for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_APISpec_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APISpec resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of APISpec for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of APISpec for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update Extension resource data of APISpec for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_APISpec_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APISpec resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of APISpec for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APISpec"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshworkloads" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "operationId" : "list_management_v1alpha1_Mesh_MeshWorkload",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshWorkload resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type MeshWorkload for version v1alpha1 from group management in scope Mesh",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of meshworkloads."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "description" : "Create MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "operationId" : "create_management_v1alpha1_Mesh_MeshWorkload",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshWorkload resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new MeshWorkload for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshworkloads/{name}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the MeshWorkload",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_MeshWorkload",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshWorkload resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read MeshWorkload for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "description" : "Remove MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "operationId" : "remove_management_v1alpha1_Mesh_MeshWorkload",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing MeshWorkload for version v1alpha1 from group management in scope Mesh. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed MeshWorkload for version v1alpha1 from group management in scope Mesh"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "description" : "Update MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_MeshWorkload",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshWorkload resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update MeshWorkload for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshworkloads/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the MeshWorkload",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves Extension resource data of MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_MeshWorkload_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshWorkload resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of MeshWorkload for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "description" : "Update Extension resource data of MeshWorkload for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_MeshWorkload_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshWorkload resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of MeshWorkload for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkload"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshservices" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves MeshService for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves MeshService for version v1alpha1 from group management in scope Mesh",
        "operationId" : "list_management_v1alpha1_Mesh_MeshService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type MeshService for version v1alpha1 from group management in scope Mesh",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of meshservices."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create MeshService for version v1alpha1 from group management in scope Mesh",
        "description" : "Create MeshService for version v1alpha1 from group management in scope Mesh",
        "operationId" : "create_management_v1alpha1_Mesh_MeshService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new MeshService for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshservices/{name}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the MeshService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves MeshService for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves MeshService for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_MeshService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read MeshService for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove MeshService for version v1alpha1 from group management in scope Mesh",
        "description" : "Remove MeshService for version v1alpha1 from group management in scope Mesh",
        "operationId" : "remove_management_v1alpha1_Mesh_MeshService",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing MeshService for version v1alpha1 from group management in scope Mesh. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed MeshService for version v1alpha1 from group management in scope Mesh"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update MeshService for version v1alpha1 from group management in scope Mesh",
        "description" : "Update MeshService for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_MeshService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update MeshService for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshservices/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the MeshService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of MeshService for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves Extension resource data of MeshService for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_MeshService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of MeshService for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of MeshService for version v1alpha1 from group management in scope Mesh",
        "description" : "Update Extension resource data of MeshService for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_MeshService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of MeshService for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshdiscoveries" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "operationId" : "list_management_v1alpha1_Mesh_MeshDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type MeshDiscovery for version v1alpha1 from group management in scope Mesh",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of meshdiscoveries."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "description" : "Create MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "operationId" : "create_management_v1alpha1_Mesh_MeshDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new MeshDiscovery for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshdiscoveries/{name}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the MeshDiscovery",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_MeshDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read MeshDiscovery for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "description" : "Remove MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "operationId" : "remove_management_v1alpha1_Mesh_MeshDiscovery",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing MeshDiscovery for version v1alpha1 from group management in scope Mesh. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed MeshDiscovery for version v1alpha1 from group management in scope Mesh"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "description" : "Update MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_MeshDiscovery",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update MeshDiscovery for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/meshdiscoveries/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the MeshDiscovery",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves Extension resource data of MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_MeshDiscovery_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of MeshDiscovery for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "description" : "Update Extension resource data of MeshDiscovery for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_MeshDiscovery_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.MeshDiscovery resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of MeshDiscovery for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscovery"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/assetmappingtemplates" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_AssetMappingTemplate",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMappingTemplate resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetmappingtemplates."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "description" : "Create AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_AssetMappingTemplate",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMappingTemplate resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/assetmappingtemplates/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMappingTemplate",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AssetMappingTemplate",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMappingTemplate resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "description" : "Remove AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_AssetMappingTemplate",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetMappingTemplate for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetMappingTemplate for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "description" : "Update AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AssetMappingTemplate",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMappingTemplate resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/assetmappingtemplates/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMappingTemplate",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AssetMappingTemplate_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMappingTemplate resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AssetMappingTemplate_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMappingTemplate resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetMappingTemplate for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplate"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequestdefinitions" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_AccessRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accessrequestdefinitions."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Create AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_AccessRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequestdefinitions/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Remove AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_AccessRequestDefinition",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessRequestDefinition for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessRequestDefinition for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequestdefinitions/{name}/webhooks" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves webhooks resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves webhooks resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequestDefinition_webhooks",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read webhooks resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update webhooks resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update webhooks resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequestDefinition_webhooks",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated webhooks resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequestdefinitions/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequestDefinition_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequestDefinition_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequests" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_AccessRequest",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, data, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessRequest for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accessrequests."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Create AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_AccessRequest",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, data, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequests/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequest",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, data, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Remove AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_AccessRequest",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessRequest for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessRequest for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Update AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequest",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, data, status, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequests/{name}/data" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves data resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves data resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequest_data",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read data resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update data resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Update data resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequest_data",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated data resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequests/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequest_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequest_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequests/{name}/references" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves references resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequest_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Update references resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequest_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accessrequests/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessRequest_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessRequest_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessRequest for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/deployments" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_Environment_Deployment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * references.virtualAPI * spec.virtualHost\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of deployments."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Create Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_Environment_Deployment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/deployments/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Deployment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_Deployment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_Environment_Deployment",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_Deployment",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/deployments/{name}/references" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Deployment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves references resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_Deployment_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update references resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_Deployment_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/deployments/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Deployment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves status resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_Deployment_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update status resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_Deployment_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/deployments/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Deployment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_Deployment_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_Deployment_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Deployment resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Deployment for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Deployment"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/ampconfigs" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_Environment_AmplifyConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of ampconfigs."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Create AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_Environment_AmplifyConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/ampconfigs/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyConfig",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_AmplifyConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_Environment_AmplifyConfig",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_AmplifyConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/ampconfigs/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyConfig",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_AmplifyConfig_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_AmplifyConfig_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AmplifyConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/ampruntimeconfigs" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_Environment_AmplifyRuntimeConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of ampruntimeconfigs."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Create AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_Environment_AmplifyRuntimeConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/ampruntimeconfigs/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyRuntimeConfig",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_AmplifyRuntimeConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_Environment_AmplifyRuntimeConfig",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_AmplifyRuntimeConfig",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/ampruntimeconfigs/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyRuntimeConfig",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves status resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_AmplifyRuntimeConfig_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update status resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_AmplifyRuntimeConfig_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/ampruntimeconfigs/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyRuntimeConfig",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_AmplifyRuntimeConfig_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_AmplifyRuntimeConfig_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyRuntimeConfig resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AmplifyRuntimeConfig for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/virtualhosts" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_Environment_VirtualHost",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualHost resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of virtualhosts."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Create VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_Environment_VirtualHost",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualHost resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/virtualhosts/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualHost",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_VirtualHost",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualHost resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_Environment_VirtualHost",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_VirtualHost",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualHost resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/virtualhosts/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualHost",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_VirtualHost_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualHost resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_VirtualHost_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualHost resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of VirtualHost for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualHost"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/managedapplications" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_ManagedApplication",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * marketplace.resource.owner.id * marketplace.resource.owner.organization.id\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ManagedApplication for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of managedapplications."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Create ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_ManagedApplication",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/managedapplications/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ManagedApplication",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ManagedApplication",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Remove ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_ManagedApplication",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ManagedApplication for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ManagedApplication for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Update ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ManagedApplication",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/managedapplications/{name}/marketplace" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ManagedApplication",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves marketplace resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves marketplace resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ManagedApplication_marketplace",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read marketplace resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update marketplace resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Update marketplace resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ManagedApplication_marketplace",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated marketplace resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/managedapplications/{name}/references" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ManagedApplication",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves references resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ManagedApplication_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Update references resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ManagedApplication_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/managedapplications/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ManagedApplication",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ManagedApplication_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ManagedApplication_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/managedapplications/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ManagedApplication",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_ManagedApplication_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_ManagedApplication_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ManagedApplication resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ManagedApplication for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplication"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_Credential",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * state.name * status.level * spec.state.name * policies.expiry.timestamp\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Credential for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of credentials."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Create Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_Credential",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Credential",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Remove Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_Credential",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Credential for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Credential for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Update Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Credential",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, data, state, policies, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials/{name}/references" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves references resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Credential_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Update references resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Credential_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials/{name}/data" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves data resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves data resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Credential_data",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read data resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update data resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Update data resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Credential_data",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated data resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials/{name}/state" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves state resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Credential_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Update state resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Credential_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials/{name}/policies" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves policies resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves policies resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Credential_policies",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read policies resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update policies resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Update policies resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Credential_policies",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated policies resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Credential_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Credential_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentials/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Credential",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Credential_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Credential for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of Credential for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Credential_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Credential resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Credential"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Credential for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Credential"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of virtualapis."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Create VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves icon resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_icon",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update icon resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_icon",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{name}/state" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves state resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update state resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves status resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update status resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPI resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of VirtualAPI for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPI"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of virtualapireleases."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Create VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, state, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves icon resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_icon",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update icon resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_icon",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{name}/state" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves state resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update state resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualAPIRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of VirtualAPIRelease for version v1alpha1 from group management. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/marketplaces" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Marketplace for version v1 from group catalog",
        "description" : "Retrieves Marketplace for version v1 from group catalog",
        "operationId" : "list_catalog_v1_Marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Marketplace for version v1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of marketplaces."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Marketplace"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Marketplace for version v1 from group catalog",
        "description" : "Create Marketplace for version v1 from group catalog",
        "operationId" : "create_catalog_v1_Marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Marketplace"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Marketplace for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/marketplaces/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Marketplace for version v1 from group catalog",
        "description" : "Retrieves Marketplace for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Marketplace for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Marketplace for version v1 from group catalog",
        "description" : "Remove Marketplace for version v1 from group catalog",
        "operationId" : "remove_catalog_v1_Marketplace",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Marketplace for version v1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Marketplace for version v1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Marketplace for version v1 from group catalog",
        "description" : "Update Marketplace for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Marketplace"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Marketplace for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/marketplaces/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Marketplace for version v1 from group catalog",
        "description" : "Retrieves Extension resource data of Marketplace for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Marketplace_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Marketplace for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Marketplace for version v1 from group catalog",
        "description" : "Update Extension resource data of Marketplace for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Marketplace_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Marketplace"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Marketplace for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Marketplace for version v1alpha1 from group catalog",
        "description" : "Retrieves Marketplace for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_Marketplace",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Marketplace for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of marketplaces."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Marketplace for version v1alpha1 from group catalog",
        "description" : "Create Marketplace for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_Marketplace",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Marketplace for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Marketplace for version v1alpha1 from group catalog",
        "description" : "Retrieves Marketplace for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Marketplace",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Marketplace for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Marketplace for version v1alpha1 from group catalog",
        "description" : "Remove Marketplace for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_Marketplace",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Marketplace for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Marketplace for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Marketplace for version v1alpha1 from group catalog",
        "description" : "Update Marketplace for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Marketplace",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Marketplace for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Marketplace for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of Marketplace for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Marketplace_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Marketplace for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Marketplace for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of Marketplace for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Marketplace_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Marketplace resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Marketplace for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Marketplace"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/publishedproducts" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "list_catalog_v1alpha1_Marketplace_PublishedProduct",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of publishedproducts."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Create PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "create_catalog_v1alpha1_Marketplace_PublishedProduct",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/publishedproducts/{name}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the PublishedProduct",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_PublishedProduct",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Remove PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "remove_catalog_v1alpha1_Marketplace_PublishedProduct",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing PublishedProduct for version v1alpha1 from group catalog in scope Marketplace. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed PublishedProduct for version v1alpha1 from group catalog in scope Marketplace"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_PublishedProduct",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/publishedproducts/{name}/references" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the PublishedProduct",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves references resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_PublishedProduct_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update references resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_PublishedProduct_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/publishedproducts/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the PublishedProduct",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves Extension resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_PublishedProduct_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update Extension resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_PublishedProduct_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.PublishedProduct resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of PublishedProduct for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProduct"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/productvisibility" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "list_catalog_v1alpha1_Marketplace_ProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productvisibility."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Create ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "create_catalog_v1alpha1_Marketplace_ProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/productvisibility/{name}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductVisibility",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_ProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Remove ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "remove_catalog_v1alpha1_Marketplace_ProductVisibility",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductVisibility for version v1alpha1 from group catalog in scope Marketplace. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductVisibility for version v1alpha1 from group catalog in scope Marketplace"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_ProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/productvisibility/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductVisibility",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves Extension resource data of ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_ProductVisibility_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update Extension resource data of ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_ProductVisibility_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/consumerproductvisibility" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "list_catalog_v1alpha1_Marketplace_ConsumerProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ConsumerProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of consumerproductvisibility."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Create ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "create_catalog_v1alpha1_Marketplace_ConsumerProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ConsumerProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/consumerproductvisibility/{name}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerProductVisibility",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_ConsumerProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ConsumerProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Remove ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "remove_catalog_v1alpha1_Marketplace_ConsumerProductVisibility",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_ConsumerProductVisibility",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ConsumerProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/consumerproductvisibility/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ConsumerProductVisibility",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves Extension resource data of ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_ConsumerProductVisibility_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ConsumerProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update Extension resource data of ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_ConsumerProductVisibility_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ConsumerProductVisibility resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ConsumerProductVisibility for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/supportcontacts" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves SupportContact for version v1 from group catalog",
        "description" : "Retrieves SupportContact for version v1 from group catalog",
        "operationId" : "list_catalog_v1_SupportContact",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type SupportContact for version v1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of supportcontacts."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.SupportContact"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create SupportContact for version v1 from group catalog",
        "description" : "Create SupportContact for version v1 from group catalog",
        "operationId" : "create_catalog_v1_SupportContact",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.SupportContact"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new SupportContact for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/supportcontacts/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the SupportContact",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves SupportContact for version v1 from group catalog",
        "description" : "Retrieves SupportContact for version v1 from group catalog",
        "operationId" : "read_catalog_v1_SupportContact",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read SupportContact for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove SupportContact for version v1 from group catalog",
        "description" : "Remove SupportContact for version v1 from group catalog",
        "operationId" : "remove_catalog_v1_SupportContact",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing SupportContact for version v1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed SupportContact for version v1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update SupportContact for version v1 from group catalog",
        "description" : "Update SupportContact for version v1 from group catalog",
        "operationId" : "update_catalog_v1_SupportContact",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.SupportContact"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update SupportContact for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/supportcontacts/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the SupportContact",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of SupportContact for version v1 from group catalog",
        "description" : "Retrieves Extension resource data of SupportContact for version v1 from group catalog",
        "operationId" : "read_catalog_v1_SupportContact_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of SupportContact for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of SupportContact for version v1 from group catalog",
        "description" : "Update Extension resource data of SupportContact for version v1 from group catalog",
        "operationId" : "update_catalog_v1_SupportContact_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.SupportContact"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of SupportContact for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/supportcontacts" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves SupportContact for version v1alpha1 from group catalog",
        "description" : "Retrieves SupportContact for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_SupportContact",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type SupportContact for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of supportcontacts."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create SupportContact for version v1alpha1 from group catalog",
        "description" : "Create SupportContact for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_SupportContact",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new SupportContact for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/supportcontacts/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the SupportContact",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves SupportContact for version v1alpha1 from group catalog",
        "description" : "Retrieves SupportContact for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_SupportContact",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read SupportContact for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove SupportContact for version v1alpha1 from group catalog",
        "description" : "Remove SupportContact for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_SupportContact",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing SupportContact for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed SupportContact for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update SupportContact for version v1alpha1 from group catalog",
        "description" : "Update SupportContact for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_SupportContact",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update SupportContact for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/supportcontacts/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the SupportContact",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of SupportContact for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of SupportContact for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_SupportContact_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of SupportContact for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of SupportContact for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of SupportContact for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_SupportContact_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.SupportContact resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of SupportContact for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContact"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Product for version v1 from group catalog",
        "description" : "Retrieves Product for version v1 from group catalog",
        "operationId" : "list_catalog_v1_Product",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Product for version v1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of products."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Product"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Product for version v1 from group catalog",
        "description" : "Create Product for version v1 from group catalog",
        "operationId" : "create_catalog_v1_Product",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Product"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Product for version v1 from group catalog",
        "description" : "Retrieves Product for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Product",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Product for version v1 from group catalog",
        "description" : "Remove Product for version v1 from group catalog",
        "operationId" : "remove_catalog_v1_Product",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Product for version v1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Product for version v1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Product for version v1 from group catalog",
        "description" : "Update Product for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Product",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, state, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Product for version v1 from group catalog",
        "description" : "Retrieves icon resource data of Product for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Product_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Product for version v1 from group catalog",
        "description" : "Update icon resource data of Product for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Product_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Product for version v1 from group catalog",
        "description" : "Retrieves status resource data of Product for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Product_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Product for version v1 from group catalog",
        "description" : "Update status resource data of Product for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Product_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{name}/state" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of Product for version v1 from group catalog",
        "description" : "Retrieves state resource data of Product for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Product_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of Product for version v1 from group catalog",
        "description" : "Update state resource data of Product for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Product_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{name}/references" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of Product for version v1 from group catalog",
        "description" : "Retrieves references resource data of Product for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Product_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of Product for version v1 from group catalog",
        "description" : "Update references resource data of Product for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Product_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Product for version v1 from group catalog",
        "description" : "Retrieves Extension resource data of Product for version v1 from group catalog",
        "operationId" : "read_catalog_v1_Product_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Product for version v1 from group catalog",
        "description" : "Update Extension resource data of Product for version v1 from group catalog",
        "operationId" : "update_catalog_v1_Product_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Product for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Product for version v1alpha1 from group catalog",
        "description" : "Retrieves Product for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_Product",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Product for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of products."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Product for version v1alpha1 from group catalog",
        "description" : "Create Product for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_Product",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Product for version v1alpha1 from group catalog",
        "description" : "Retrieves Product for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Product",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Product for version v1alpha1 from group catalog",
        "description" : "Remove Product for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_Product",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Product for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Product for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Product for version v1alpha1 from group catalog",
        "description" : "Update Product for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Product",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, icon, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{name}/references" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of Product for version v1alpha1 from group catalog",
        "description" : "Retrieves references resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Product_references",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of Product for version v1alpha1 from group catalog",
        "description" : "Update references resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Product_references",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Product for version v1alpha1 from group catalog",
        "description" : "Retrieves icon resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Product_icon",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Product for version v1alpha1 from group catalog",
        "description" : "Update icon resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Product_icon",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{name}/state" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of Product for version v1alpha1 from group catalog",
        "description" : "Retrieves state resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Product_state",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of Product for version v1alpha1 from group catalog",
        "description" : "Update state resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Product_state",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Product for version v1alpha1 from group catalog",
        "description" : "Retrieves status resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Product_status",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Product for version v1alpha1 from group catalog",
        "description" : "Update status resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Product_status",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Product for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_Product_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Product for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of Product for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_Product_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Product resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Product for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Product"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductRelease for version v1 from group catalog",
        "description" : "Retrieves ProductRelease for version v1 from group catalog",
        "operationId" : "list_catalog_v1_ProductRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.version * status.level * spec.state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductRelease for version v1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productreleases."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductRelease for version v1 from group catalog",
        "description" : "Create ProductRelease for version v1 from group catalog",
        "operationId" : "create_catalog_v1_ProductRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductRelease for version v1 from group catalog",
        "description" : "Retrieves ProductRelease for version v1 from group catalog",
        "operationId" : "read_catalog_v1_ProductRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductRelease for version v1 from group catalog",
        "description" : "Remove ProductRelease for version v1 from group catalog",
        "operationId" : "remove_catalog_v1_ProductRelease",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductRelease for version v1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductRelease for version v1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductRelease for version v1 from group catalog",
        "description" : "Update ProductRelease for version v1 from group catalog",
        "operationId" : "update_catalog_v1_ProductRelease",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of ProductRelease for version v1 from group catalog",
        "description" : "Retrieves icon resource data of ProductRelease for version v1 from group catalog",
        "operationId" : "read_catalog_v1_ProductRelease_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of ProductRelease for version v1 from group catalog",
        "description" : "Update icon resource data of ProductRelease for version v1 from group catalog",
        "operationId" : "update_catalog_v1_ProductRelease_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ProductRelease for version v1 from group catalog",
        "description" : "Retrieves status resource data of ProductRelease for version v1 from group catalog",
        "operationId" : "read_catalog_v1_ProductRelease_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ProductRelease for version v1 from group catalog",
        "description" : "Update status resource data of ProductRelease for version v1 from group catalog",
        "operationId" : "update_catalog_v1_ProductRelease_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductRelease for version v1 from group catalog",
        "description" : "Retrieves Extension resource data of ProductRelease for version v1 from group catalog",
        "operationId" : "read_catalog_v1_ProductRelease_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductRelease for version v1 from group catalog",
        "description" : "Update Extension resource data of ProductRelease for version v1 from group catalog",
        "operationId" : "update_catalog_v1_ProductRelease_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductRelease for version v1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_ProductRelease",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.version * status.level * spec.state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductRelease for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productreleases."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductRelease for version v1alpha1 from group catalog",
        "description" : "Create ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_ProductRelease",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductRelease",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductRelease for version v1alpha1 from group catalog",
        "description" : "Remove ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_ProductRelease",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductRelease for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductRelease for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductRelease for version v1alpha1 from group catalog",
        "description" : "Update ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductRelease",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{name}/icon" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of ProductRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves icon resource data of ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_icon",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of ProductRelease for version v1alpha1 from group catalog",
        "description" : "Update icon resource data of ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_icon",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ProductRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves status resource data of ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_status",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ProductRelease for version v1alpha1 from group catalog",
        "description" : "Update status resource data of ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_status",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductRelease for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductRelease for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of ProductRelease for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductRelease resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductRelease for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductRelease"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplanunits" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductPlanUnit for version v1alpha1 from group catalog",
        "description" : "Retrieves ProductPlanUnit for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_ProductPlanUnit",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlanUnit resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductPlanUnit for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productplanunits."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductPlanUnit for version v1alpha1 from group catalog",
        "description" : "Create ProductPlanUnit for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_ProductPlanUnit",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlanUnit resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductPlanUnit for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplanunits/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductPlanUnit",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductPlanUnit for version v1alpha1 from group catalog",
        "description" : "Retrieves ProductPlanUnit for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductPlanUnit",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlanUnit resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductPlanUnit for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductPlanUnit for version v1alpha1 from group catalog",
        "description" : "Remove ProductPlanUnit for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_ProductPlanUnit",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductPlanUnit for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductPlanUnit for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductPlanUnit for version v1alpha1 from group catalog",
        "description" : "Update ProductPlanUnit for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductPlanUnit",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlanUnit resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductPlanUnit for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplanunits/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductPlanUnit",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductPlanUnit for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of ProductPlanUnit for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductPlanUnit_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlanUnit resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductPlanUnit for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductPlanUnit for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of ProductPlanUnit for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductPlanUnit_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlanUnit resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductPlanUnit for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductPlan for version v1alpha1 from group catalog",
        "description" : "Retrieves ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "list_catalog_v1alpha1_ProductPlan",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * spec.type * state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductPlan for version v1alpha1 from group catalog",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productplans."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductPlan for version v1alpha1 from group catalog",
        "description" : "Create ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "create_catalog_v1alpha1_ProductPlan",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductPlan for version v1alpha1 from group catalog",
        "description" : "Retrieves ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductPlan",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductPlan for version v1alpha1 from group catalog",
        "description" : "Remove ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "remove_catalog_v1alpha1_ProductPlan",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductPlan for version v1alpha1 from group catalog. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductPlan for version v1alpha1 from group catalog"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductPlan for version v1alpha1 from group catalog",
        "description" : "Update ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductPlan",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, references, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{name}/state" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Retrieves state resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Update state resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{name}/references" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Retrieves references resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Update references resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{name}/status" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Retrieves status resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Update status resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Retrieves Extension resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductPlan for version v1alpha1 from group catalog",
        "description" : "Update Extension resource data of ProductPlan for version v1alpha1 from group catalog",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductPlan resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductPlan for version v1alpha1 from group catalog",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlan"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productplans/{productplanName}/quotas" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Retrieves Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "list_catalog_v1_ProductPlan_Quota",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Quota for version v1 from group catalog in scope ProductPlan",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of quotas."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Quota"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Create Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "create_catalog_v1_ProductPlan_Quota",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Quota"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Quota for version v1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productplans/{productplanName}/quotas/{name}" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Quota",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Retrieves Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1_ProductPlan_Quota",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Quota for version v1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Remove Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "remove_catalog_v1_ProductPlan_Quota",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Quota for version v1 from group catalog in scope ProductPlan. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Quota for version v1 from group catalog in scope ProductPlan"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Update Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1_ProductPlan_Quota",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Quota"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Quota for version v1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productplans/{productplanName}/quotas/{name}/status" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Quota",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Retrieves status resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1_ProductPlan_Quota_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Quota for version v1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Update status resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1_ProductPlan_Quota_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Quota"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Quota for version v1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productplans/{productplanName}/quotas/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Quota",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Retrieves Extension resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1_ProductPlan_Quota_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Quota for version v1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "description" : "Update Extension resource data of Quota for version v1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1_ProductPlan_Quota_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Quota"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Quota for version v1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{productplanName}/quotas" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Retrieves Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "list_catalog_v1alpha1_ProductPlan_Quota",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of quotas."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Create Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "create_catalog_v1alpha1_ProductPlan_Quota",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{productplanName}/quotas/{name}" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Quota",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Retrieves Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_Quota",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Remove Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "remove_catalog_v1alpha1_ProductPlan_Quota",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Quota for version v1alpha1 from group catalog in scope ProductPlan. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Quota for version v1alpha1 from group catalog in scope ProductPlan"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Update Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_Quota",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{productplanName}/quotas/{name}/status" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Quota",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Retrieves status resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_Quota_status",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Update status resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_Quota_status",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{productplanName}/quotas/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Quota",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Retrieves Extension resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_Quota_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Update Extension resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_Quota_extension",
        "deprecated" : true,
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Quota resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Quota for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Quota"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceGroup for version v1alpha1 from group definitions",
        "description" : "Retrieves ResourceGroup for version v1alpha1 from group definitions",
        "operationId" : "list_definitions_v1alpha1_ResourceGroup",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceGroup resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ResourceGroup for version v1alpha1 from group definitions",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of groups."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ResourceGroup for version v1alpha1 from group definitions",
        "description" : "Create ResourceGroup for version v1alpha1 from group definitions",
        "operationId" : "create_definitions_v1alpha1_ResourceGroup",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceGroup resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ResourceGroup for version v1alpha1 from group definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "description" : "The name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceGroup for version v1alpha1 from group definitions",
        "description" : "Retrieves ResourceGroup for version v1alpha1 from group definitions",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceGroup resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ResourceGroup for version v1alpha1 from group definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ResourceGroup for version v1alpha1 from group definitions",
        "description" : "Remove ResourceGroup for version v1alpha1 from group definitions",
        "operationId" : "remove_definitions_v1alpha1_ResourceGroup",
        "tags" : [ "definitions" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ResourceGroup for version v1alpha1 from group definitions. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ResourceGroup for version v1alpha1 from group definitions"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ResourceGroup for version v1alpha1 from group definitions",
        "description" : "Update ResourceGroup for version v1alpha1 from group definitions",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceGroup resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ResourceGroup for version v1alpha1 from group definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ResourceGroup for version v1alpha1 from group definitions",
        "description" : "Retrieves Extension resource data of ResourceGroup for version v1alpha1 from group definitions",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceGroup resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ResourceGroup for version v1alpha1 from group definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ResourceGroup for version v1alpha1 from group definitions",
        "description" : "Update Extension resource data of ResourceGroup for version v1alpha1 from group definitions",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceGroup resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ResourceGroup for version v1alpha1 from group definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroup"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/resources" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "list_definitions_v1alpha1_ResourceGroup_ResourceDefinition",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Create ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "create_definitions_v1alpha1_ResourceGroup_ResourceDefinition",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/resources/{name}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_ResourceDefinition",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Remove ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "remove_definitions_v1alpha1_ResourceGroup_ResourceDefinition",
        "tags" : [ "definitions" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_ResourceDefinition",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/resources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves Extension resource data of ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_ResourceDefinition_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update Extension resource data of ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_ResourceDefinition_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ResourceDefinition for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/resourceversions" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "list_definitions_v1alpha1_ResourceGroup_ResourceDefinitionVersion",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinitionVersion resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resourceversions."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Create ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "create_definitions_v1alpha1_ResourceGroup_ResourceDefinitionVersion",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinitionVersion resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/resourceversions/{name}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceDefinitionVersion",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_ResourceDefinitionVersion",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinitionVersion resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Remove ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "remove_definitions_v1alpha1_ResourceGroup_ResourceDefinitionVersion",
        "tags" : [ "definitions" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_ResourceDefinitionVersion",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinitionVersion resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/resourceversions/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ResourceDefinitionVersion",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves Extension resource data of ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_ResourceDefinitionVersion_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinitionVersion resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update Extension resource data of ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_ResourceDefinitionVersion_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.ResourceDefinitionVersion resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ResourceDefinitionVersion for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersion"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/commandlines" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "list_definitions_v1alpha1_ResourceGroup_CommandLineInterface",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.CommandLineInterface resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of commandlines."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Create CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "create_definitions_v1alpha1_ResourceGroup_CommandLineInterface",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.CommandLineInterface resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/commandlines/{name}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CommandLineInterface",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_CommandLineInterface",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.CommandLineInterface resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Remove CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "remove_definitions_v1alpha1_ResourceGroup_CommandLineInterface",
        "tags" : [ "definitions" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_CommandLineInterface",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.CommandLineInterface resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/commandlines/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CommandLineInterface",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves Extension resource data of CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_CommandLineInterface_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.CommandLineInterface resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update Extension resource data of CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_CommandLineInterface_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.CommandLineInterface resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of CommandLineInterface for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterface"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/corsrules" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of corsrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/corsrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CorsRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_CorsRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/corsrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CorsRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_CorsRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_CorsRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/corsrules" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of corsrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/corsrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CorsRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_CorsRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_CorsRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/corsrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CorsRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_CorsRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_CorsRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CorsRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of CorsRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CorsRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/amplifyjwtauthrules" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of amplifyjwtauthrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/amplifyjwtauthrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyJWTAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/amplifyjwtauthrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyJWTAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_AmplifyJWTAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_AmplifyJWTAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/amplifyjwtauthrules" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of amplifyjwtauthrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/amplifyjwtauthrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyJWTAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_AmplifyJWTAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/amplifyjwtauthrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyJWTAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_AmplifyJWTAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_AmplifyJWTAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyJWTAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AmplifyJWTAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/amplifyoauth2authrules" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of amplifyoauth2authrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/amplifyoauth2authrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyOAuth2AuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/amplifyoauth2authrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyOAuth2AuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_AmplifyOAuth2AuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_AmplifyOAuth2AuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/amplifyoauth2authrules" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of amplifyoauth2authrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/amplifyoauth2authrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyOAuth2AuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_AmplifyOAuth2AuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/amplifyoauth2authrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AmplifyOAuth2AuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_AmplifyOAuth2AuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_AmplifyOAuth2AuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AmplifyOAuth2AuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AmplifyOAuth2AuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/apikeyauthrules" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of apikeyauthrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/apikeyauthrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIKeyAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_APIKeyAuthRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/apikeyauthrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIKeyAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_APIKeyAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_APIKeyAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/apikeyauthrules" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of apikeyauthrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/apikeyauthrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIKeyAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_APIKeyAuthRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_APIKeyAuthRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/apikeyauthrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the APIKeyAuthRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_APIKeyAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_APIKeyAuthRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.APIKeyAuthRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of APIKeyAuthRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/ratelimitrules" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of ratelimitrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/ratelimitrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the RateLimitRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_RateLimitRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/ratelimitrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the RateLimitRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_RateLimitRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_RateLimitRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/ratelimitrules" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of ratelimitrules."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/ratelimitrules/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the RateLimitRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_RateLimitRule",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_RateLimitRule",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/ratelimitrules/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the RateLimitRule",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_RateLimitRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_RateLimitRule_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.RateLimitRule resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of RateLimitRule for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRule"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetmappings" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "list_catalog_v1alpha1_Asset_AssetMapping",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetmappings."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Create AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "create_catalog_v1alpha1_Asset_AssetMapping",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetmappings/{name}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMapping",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AssetMapping",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Remove AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "remove_catalog_v1alpha1_Asset_AssetMapping",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetMapping for version v1alpha1 from group catalog in scope Asset. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetMapping for version v1alpha1 from group catalog in scope Asset"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AssetMapping",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetmappings/{name}/status" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMapping",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves status resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AssetMapping_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update status resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AssetMapping_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetmappings/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMapping",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves Extension resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AssetMapping_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update Extension resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AssetMapping_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetMapping for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/assetmappings" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_AssetMapping",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetMapping for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetmappings."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Create AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_AssetMapping",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetMapping for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/assetmappings/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMapping",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AssetMapping",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetMapping for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Remove AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_AssetMapping",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetMapping for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetMapping for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Update AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AssetMapping",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetMapping for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/assetmappings/{name}/status" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMapping",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves status resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AssetMapping_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Update status resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AssetMapping_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/assetmappings/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetMapping",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AssetMapping_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AssetMapping_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AssetMapping resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetMapping for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AssetMapping"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetresources" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "list_catalog_v1alpha1_Asset_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetResource for version v1alpha1 from group catalog in scope Asset",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetresources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Create AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "create_catalog_v1alpha1_Asset_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetResource for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetresources/{name}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetResource for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Remove AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "remove_catalog_v1alpha1_Asset_AssetResource",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetResource for version v1alpha1 from group catalog in scope Asset. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetResource for version v1alpha1 from group catalog in scope Asset"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetResource for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetresources/{name}/references" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves references resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AssetResource_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update references resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AssetResource_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/assetresources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves Extension resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AssetResource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update Extension resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AssetResource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetResource for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{assetreleaseName}/assetresources" : {
      "parameters" : [ {
        "name" : "assetreleaseName",
        "description" : "Name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "list_catalog_v1alpha1_AssetRelease_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetresources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Create AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "create_catalog_v1alpha1_AssetRelease_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{assetreleaseName}/assetresources/{name}" : {
      "parameters" : [ {
        "name" : "assetreleaseName",
        "description" : "Name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Retrieves AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Remove AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "remove_catalog_v1alpha1_AssetRelease_AssetResource",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetResource for version v1alpha1 from group catalog in scope AssetRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetResource for version v1alpha1 from group catalog in scope AssetRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Update AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_AssetResource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{assetreleaseName}/assetresources/{name}/references" : {
      "parameters" : [ {
        "name" : "assetreleaseName",
        "description" : "Name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Retrieves references resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_AssetResource_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Update references resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_AssetResource_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{assetreleaseName}/assetresources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "assetreleaseName",
        "description" : "Name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetResource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Retrieves Extension resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_AssetResource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Update Extension resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_AssetResource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetResource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetResource for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/assetrequestdefinitions" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "list_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, authorization, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetrequestdefinitions."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Create AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "create_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, authorization, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/assetrequestdefinitions/{name}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, authorization, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Remove AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "remove_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, authorization, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/assetrequestdefinitions/{name}/authorization" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves authorization resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves authorization resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_authorization",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read authorization resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update authorization resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update authorization resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_authorization",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated authorization resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/assetrequestdefinitions/{name}/references" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves references resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update references resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/assetrequestdefinitions/{name}/webhooks" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves webhooks resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves webhooks resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_webhooks",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read webhooks resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update webhooks resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update webhooks resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_webhooks",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated webhooks resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/assetrequestdefinitions/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Extension resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update Extension resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_AssetRequestDefinition_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "list_catalog_v1alpha1_Application_AssetRequest",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * marketplace.resource.owner.id * approval.state.name * marketplace.resource.owner.organization.id\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, data, references, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AssetRequest for version v1alpha1 from group catalog in scope Application",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of assetrequests."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Create AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "create_catalog_v1alpha1_Application_AssetRequest",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, data, references, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests/{name}" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AssetRequest",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, data, references, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Remove AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "remove_catalog_v1alpha1_Application_AssetRequest",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AssetRequest for version v1alpha1 from group catalog in scope Application. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AssetRequest for version v1alpha1 from group catalog in scope Application"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Update AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AssetRequest",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, marketplace, data, references, approval, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests/{name}/marketplace" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves marketplace resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves marketplace resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AssetRequest_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read marketplace resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update marketplace resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Update marketplace resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AssetRequest_marketplace",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated marketplace resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests/{name}/data" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves data resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves data resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AssetRequest_data",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read data resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update data resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Update data resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AssetRequest_data",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated data resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests/{name}/references" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves references resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AssetRequest_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Update references resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AssetRequest_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests/{name}/approval" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves approval resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves approval resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AssetRequest_approval",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read approval resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update approval resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Update approval resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AssetRequest_approval",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated approval resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests/{name}/status" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves status resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AssetRequest_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Update status resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AssetRequest_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/assetrequests/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AssetRequest",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves Extension resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AssetRequest_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "description" : "Update Extension resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AssetRequest_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AssetRequest resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AssetRequest for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequest"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/externalsecrets" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_Environment_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of externalsecrets."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Create ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_Environment_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/externalsecrets/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ExternalSecret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_Environment_ExternalSecret",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/externalsecrets/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ExternalSecret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_Environment_ExternalSecret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_Environment_ExternalSecret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ExternalSecret for version v1alpha1 from group management in scope Environment. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/externalsecrets" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of externalsecrets."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/externalsecrets/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ExternalSecret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_ExternalSecret",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/externalsecrets/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ExternalSecret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_ExternalSecret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_ExternalSecret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/externalsecrets" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of externalsecrets."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/externalsecrets/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ExternalSecret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_ExternalSecret",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_ExternalSecret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/externalsecrets/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ExternalSecret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_ExternalSecret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_ExternalSecret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ExternalSecret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ExternalSecret for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/virtualservices" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of virtualservices."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/virtualservices/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_VirtualService",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/virtualservices/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_VirtualService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_VirtualService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/virtualservices" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of virtualservices."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/virtualservices/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_VirtualService",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_VirtualService",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/virtualservices/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the VirtualService",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_VirtualService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_VirtualService_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.VirtualService resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of VirtualService for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/oas3documents" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of oas3documents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/oas3documents/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the OAS3Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_OAS3Document",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/oas3documents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the OAS3Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_OAS3Document_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_OAS3Document_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/oas3documents" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of oas3documents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/oas3documents/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the OAS3Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_OAS3Document",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_OAS3Document",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/oas3documents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the OAS3Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_OAS3Document_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_OAS3Document_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.OAS3Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of OAS3Document for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.OAS3Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/graphqldocuments" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPI_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of graphqldocuments."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Create GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPI_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/graphqldocuments/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GraphQLDocument",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_GraphQLDocument",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/graphqldocuments/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GraphQLDocument",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPI_GraphQLDocument_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPI_GraphQLDocument_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPI. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/graphqldocuments" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of graphqldocuments."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Create GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/graphqldocuments/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GraphQLDocument",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Remove GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_GraphQLDocument",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_GraphQLDocument",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/graphqldocuments/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the GraphQLDocument",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Retrieves Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_GraphQLDocument_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "description" : "Update Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_GraphQLDocument_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.GraphQLDocument resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of GraphQLDocument for version v1alpha1 from group management in scope VirtualAPIRelease. Enable the governance feature flag to have access to this resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocument"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/documents" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1 from group catalog in scope Product",
        "description" : "Retrieves Document for version v1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Document for version v1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of documents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Document"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Document for version v1 from group catalog in scope Product",
        "description" : "Create Document for version v1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/documents/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1 from group catalog in scope Product",
        "description" : "Retrieves Document for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Document for version v1 from group catalog in scope Product",
        "description" : "Remove Document for version v1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1_Product_Document",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Document for version v1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Document for version v1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Document for version v1 from group catalog in scope Product",
        "description" : "Update Document for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/documents/{name}/icon" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Document for version v1 from group catalog in scope Product",
        "description" : "Retrieves icon resource data of Document for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Document for version v1 from group catalog in scope Product",
        "description" : "Update icon resource data of Document for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/documents/{name}/status" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Document for version v1 from group catalog in scope Product",
        "description" : "Retrieves status resource data of Document for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Document for version v1 from group catalog in scope Product",
        "description" : "Update status resource data of Document for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/documents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Document for version v1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of Document for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Document for version v1 from group catalog in scope Product",
        "description" : "Update Extension resource data of Document for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Document for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/documents" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1alpha1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Document for version v1alpha1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of documents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Create Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1alpha1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/documents/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Remove Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1alpha1_Product_Document",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Document for version v1alpha1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Document for version v1alpha1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Update Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/documents/{name}/icon" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves icon resource data of Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Update icon resource data of Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/documents/{name}/status" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves status resource data of Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Update status resource data of Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/documents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Document for version v1alpha1 from group catalog in scope Product",
        "description" : "Update Extension resource data of Document for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Document for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/documents" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "list_catalog_v1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Document for version v1 from group catalog in scope ProductRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of documents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Document"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Create Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "create_catalog_v1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/documents/{name}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Remove Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "remove_catalog_v1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Document for version v1 from group catalog in scope ProductRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Document for version v1 from group catalog in scope ProductRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Update Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/documents/{name}/icon" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves icon resource data of Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Update icon resource data of Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/documents/{name}/status" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves status resource data of Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Update status resource data of Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/documents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Extension resource data of Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Document for version v1 from group catalog in scope ProductRelease",
        "description" : "Update Extension resource data of Document for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Document for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/documents" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "list_catalog_v1alpha1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Document for version v1alpha1 from group catalog in scope ProductRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of documents."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Create Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "create_catalog_v1alpha1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/documents/{name}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Remove Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "remove_catalog_v1alpha1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Document for version v1alpha1 from group catalog in scope ProductRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Document for version v1alpha1 from group catalog in scope ProductRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_Document",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, icon, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/documents/{name}/icon" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves icon resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves icon resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read icon resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update icon resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update icon resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_Document_icon",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated icon resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/documents/{name}/status" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves status resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update status resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_Document_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/documents/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Document",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Extension resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update Extension resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_Document_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Document resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Document for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Document"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/resources" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1 from group catalog in scope Product",
        "description" : "Retrieves Resource for version v1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.fileType * spec.contentType\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Resource for version v1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Resource"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Resource for version v1 from group catalog in scope Product",
        "description" : "Create Resource for version v1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Resource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Resource for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/resources/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1 from group catalog in scope Product",
        "description" : "Retrieves Resource for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Resource for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Resource for version v1 from group catalog in scope Product",
        "description" : "Remove Resource for version v1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1_Product_Resource",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Resource for version v1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Resource for version v1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Resource for version v1 from group catalog in scope Product",
        "description" : "Update Resource for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Resource for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/resources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Resource for version v1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of Resource for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Resource for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Resource for version v1 from group catalog in scope Product",
        "description" : "Update Extension resource data of Resource for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Resource for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/resources" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Resource for version v1alpha1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1alpha1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.fileType * spec.contentType\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Resource for version v1alpha1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Resource for version v1alpha1 from group catalog in scope Product",
        "description" : "Create Resource for version v1alpha1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1alpha1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Resource for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/resources/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Resource for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Resource for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Resource for version v1alpha1 from group catalog in scope Product",
        "description" : "Remove Resource for version v1alpha1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1alpha1_Product_Resource",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Resource for version v1alpha1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Resource for version v1alpha1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Resource for version v1alpha1 from group catalog in scope Product",
        "description" : "Update Resource for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Resource for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/resources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Resource for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of Resource for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Resource for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Resource for version v1alpha1 from group catalog in scope Product",
        "description" : "Update Extension resource data of Resource for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Resource for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/resources" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Resource for version v1 from group catalog in scope ProductRelease",
        "operationId" : "list_catalog_v1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.fileType * spec.contentType\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Resource for version v1 from group catalog in scope ProductRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.Resource"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Resource for version v1 from group catalog in scope ProductRelease",
        "description" : "Create Resource for version v1 from group catalog in scope ProductRelease",
        "operationId" : "create_catalog_v1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Resource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Resource for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/resources/{name}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Resource for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Resource for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Resource for version v1 from group catalog in scope ProductRelease",
        "description" : "Remove Resource for version v1 from group catalog in scope ProductRelease",
        "operationId" : "remove_catalog_v1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Resource for version v1 from group catalog in scope ProductRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Resource for version v1 from group catalog in scope ProductRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Resource for version v1 from group catalog in scope ProductRelease",
        "description" : "Update Resource for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Resource for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/resources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Resource for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Extension resource data of Resource for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Resource for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Resource for version v1 from group catalog in scope ProductRelease",
        "description" : "Update Extension resource data of Resource for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Resource for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/resources" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "list_catalog_v1alpha1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * spec.fileType * spec.contentType\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Resource for version v1alpha1 from group catalog in scope ProductRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of resources."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Create Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "create_catalog_v1alpha1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Resource for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/resources/{name}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Resource for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Remove Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "remove_catalog_v1alpha1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Resource for version v1alpha1 from group catalog in scope ProductRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Resource for version v1alpha1 from group catalog in scope ProductRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_Resource",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Resource for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/resources/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Resource",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Extension resource data of Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Resource for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update Extension resource data of Resource for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_Resource_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Resource resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Resource for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/productoverviews" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1 from group catalog in scope Product",
        "description" : "Retrieves ProductOverview for version v1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductOverview for version v1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productoverviews."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductOverview for version v1 from group catalog in scope Product",
        "description" : "Create ProductOverview for version v1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductOverview for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/productoverviews/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1 from group catalog in scope Product",
        "description" : "Retrieves ProductOverview for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductOverview for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductOverview for version v1 from group catalog in scope Product",
        "description" : "Remove ProductOverview for version v1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductOverview for version v1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductOverview for version v1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductOverview for version v1 from group catalog in scope Product",
        "description" : "Update ProductOverview for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductOverview for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/products/{productName}/productoverviews/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductOverview for version v1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of ProductOverview for version v1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1_Product_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductOverview for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductOverview for version v1 from group catalog in scope Product",
        "description" : "Update Extension resource data of ProductOverview for version v1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1_Product_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductOverview for version v1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/productoverviews" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1alpha1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductOverview for version v1alpha1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productoverviews."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductOverview for version v1alpha1 from group catalog in scope Product",
        "description" : "Create ProductOverview for version v1alpha1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1alpha1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductOverview for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/productoverviews/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductOverview for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductOverview for version v1alpha1 from group catalog in scope Product",
        "description" : "Remove ProductOverview for version v1alpha1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1alpha1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductOverview for version v1alpha1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductOverview for version v1alpha1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductOverview for version v1alpha1 from group catalog in scope Product",
        "description" : "Update ProductOverview for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductOverview for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/productoverviews/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope Product",
        "description" : "Update Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/productoverviews" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves ProductOverview for version v1 from group catalog in scope ProductRelease",
        "operationId" : "list_catalog_v1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductOverview for version v1 from group catalog in scope ProductRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productoverviews."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductOverview for version v1 from group catalog in scope ProductRelease",
        "description" : "Create ProductOverview for version v1 from group catalog in scope ProductRelease",
        "operationId" : "create_catalog_v1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductOverview for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/productoverviews/{name}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves ProductOverview for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductOverview for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductOverview for version v1 from group catalog in scope ProductRelease",
        "description" : "Remove ProductOverview for version v1 from group catalog in scope ProductRelease",
        "operationId" : "remove_catalog_v1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductOverview for version v1 from group catalog in scope ProductRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductOverview for version v1 from group catalog in scope ProductRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductOverview for version v1 from group catalog in scope ProductRelease",
        "description" : "Update ProductOverview for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductOverview for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1/productreleases/{productreleaseName}/productoverviews/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductOverview for version v1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Extension resource data of ProductOverview for version v1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1_ProductRelease_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductOverview for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductOverview for version v1 from group catalog in scope ProductRelease",
        "description" : "Update Extension resource data of ProductOverview for version v1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1_ProductRelease_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductOverview for version v1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/productoverviews" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "list_catalog_v1alpha1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of productoverviews."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Create ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "create_catalog_v1alpha1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/productoverviews/{name}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Remove ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "remove_catalog_v1alpha1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ProductOverview for version v1alpha1 from group catalog in scope ProductRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ProductOverview for version v1alpha1 from group catalog in scope ProductRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_ProductOverview",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/productoverviews/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ProductOverview",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_ProductOverview_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ProductOverview resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ProductOverview for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverview"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/webhooks" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Webhook for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Webhook for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Webhook for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of webhooks."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Webhook for version v1alpha1 from group management in scope Environment",
        "description" : "Create Webhook for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Webhook for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/webhooks/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Webhook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Webhook for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Webhook for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Webhook for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Webhook for version v1alpha1 from group management in scope Environment",
        "description" : "Remove Webhook for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_Webhook",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Webhook for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Webhook for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Webhook for version v1alpha1 from group management in scope Environment",
        "description" : "Update Webhook for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Webhook for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/webhooks/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Webhook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Webhook for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of Webhook for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Webhook_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Webhook for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Webhook for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of Webhook for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Webhook_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Webhook for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/webhooks" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Webhook for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Webhook for version v1alpha1 from group management in scope Integration",
        "operationId" : "list_management_v1alpha1_Integration_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Webhook for version v1alpha1 from group management in scope Integration",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of webhooks."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Webhook for version v1alpha1 from group management in scope Integration",
        "description" : "Create Webhook for version v1alpha1 from group management in scope Integration",
        "operationId" : "create_management_v1alpha1_Integration_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Webhook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/webhooks/{name}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Webhook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Webhook for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Webhook for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Webhook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Webhook for version v1alpha1 from group management in scope Integration",
        "description" : "Remove Webhook for version v1alpha1 from group management in scope Integration",
        "operationId" : "remove_management_v1alpha1_Integration_Webhook",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Webhook for version v1alpha1 from group management in scope Integration. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Webhook for version v1alpha1 from group management in scope Integration"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Webhook for version v1alpha1 from group management in scope Integration",
        "description" : "Update Webhook for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_Webhook",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Webhook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/webhooks/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Webhook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Webhook for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Extension resource data of Webhook for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_Webhook_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Webhook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Webhook for version v1alpha1 from group management in scope Integration",
        "description" : "Update Extension resource data of Webhook for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_Webhook_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Webhook for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/webhooks" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "list_catalog_v1alpha1_AuthorizationProfile_Webhook",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of webhooks."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Create Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "create_catalog_v1alpha1_AuthorizationProfile_Webhook",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/webhooks/{name}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Webhook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_Webhook",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Remove Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "remove_catalog_v1alpha1_AuthorizationProfile_Webhook",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_Webhook",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/webhooks/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Webhook",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Extension resource data of Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_Webhook_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update Extension resource data of Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_Webhook_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Webhook resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Webhook for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Webhook"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/releasetags" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "list_catalog_v1alpha1_Asset_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of releasetags."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Create ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "create_catalog_v1alpha1_Asset_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/releasetags/{name}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Remove ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "remove_catalog_v1alpha1_Asset_ReleaseTag",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ReleaseTag for version v1alpha1 from group catalog in scope Asset. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ReleaseTag for version v1alpha1 from group catalog in scope Asset"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/releasetags/{name}/state" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_ReleaseTag_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_ReleaseTag_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/releasetags/{name}/status" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_ReleaseTag_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_ReleaseTag_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/releasetags/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_ReleaseTag_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_ReleaseTag_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/releasetags" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1alpha1_Product_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of releasetags."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Create ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1alpha1_Product_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/releasetags/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Remove ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1alpha1_Product_ReleaseTag",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ReleaseTag for version v1alpha1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ReleaseTag for version v1alpha1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Update ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_ReleaseTag",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/releasetags/{name}/state" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_ReleaseTag_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Update state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_ReleaseTag_state",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/releasetags/{name}/status" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_ReleaseTag_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Update status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_ReleaseTag_status",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/releasetags/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_ReleaseTag_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "description" : "Update Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_ReleaseTag_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ReleaseTag for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/releasetags" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "list_management_v1alpha1_VirtualAPI_ReleaseTag",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * status.level * state\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of releasetags."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Create ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "create_management_v1alpha1_VirtualAPI_ReleaseTag",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/releasetags/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "read_management_v1alpha1_VirtualAPI_ReleaseTag",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Remove ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_ReleaseTag",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing ReleaseTag for version v1alpha1 from group management in scope VirtualAPI. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed ReleaseTag for version v1alpha1 from group management in scope VirtualAPI"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Update ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "update_management_v1alpha1_VirtualAPI_ReleaseTag",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, state, status, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/releasetags/{name}/state" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves state resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves state resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "read_management_v1alpha1_VirtualAPI_ReleaseTag_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read state resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update state resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Update state resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "update_management_v1alpha1_VirtualAPI_ReleaseTag_state",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated state resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/releasetags/{name}/status" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves status resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves status resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "read_management_v1alpha1_VirtualAPI_ReleaseTag_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read status resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update status resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Update status resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "update_management_v1alpha1_VirtualAPI_ReleaseTag_status",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated status resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/releasetags/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the ReleaseTag",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves Extension resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "read_management_v1alpha1_VirtualAPI_ReleaseTag_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Update Extension resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "update_management_v1alpha1_VirtualAPI_ReleaseTag_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.ReleaseTag resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of ReleaseTag for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentialrequestdefinitions" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_CredentialRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of credentialrequestdefinitions."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Create CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_CredentialRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentialrequestdefinitions/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_CredentialRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Remove CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_CredentialRequestDefinition",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing CredentialRequestDefinition for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed CredentialRequestDefinition for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_CredentialRequestDefinition",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentialrequestdefinitions/{name}/references" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves references resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_CredentialRequestDefinition_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update references resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_CredentialRequestDefinition_references",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentialrequestdefinitions/{name}/webhooks" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_CredentialRequestDefinition_webhooks",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_CredentialRequestDefinition_webhooks",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/credentialrequestdefinitions/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_CredentialRequestDefinition_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_CredentialRequestDefinition_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of CredentialRequestDefinition for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/credentialrequestdefinitions" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "list_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of credentialrequestdefinitions."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Create CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "create_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/credentialrequestdefinitions/{name}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Remove CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "remove_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, references, webhooks, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/credentialrequestdefinitions/{name}/references" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves references resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves references resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read references resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update references resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update references resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition_references",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated references resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/credentialrequestdefinitions/{name}/webhooks" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition_webhooks",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition_webhooks",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated webhooks resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/credentialrequestdefinitions/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the CredentialRequestDefinition",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Extension resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update Extension resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_CredentialRequestDefinition_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.CredentialRequestDefinition resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of CredentialRequestDefinition for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinition"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/secrets" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "list_catalog_v1alpha1_AuthorizationProfile_Secret",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of secrets."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Create Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "create_catalog_v1alpha1_AuthorizationProfile_Secret",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/secrets/{name}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Secret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_Secret",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Remove Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "remove_catalog_v1alpha1_AuthorizationProfile_Secret",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Secret for version v1alpha1 from group catalog in scope AuthorizationProfile. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Secret for version v1alpha1 from group catalog in scope AuthorizationProfile"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_Secret",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/secrets/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Secret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Extension resource data of Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_Secret_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update Extension resource data of Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_Secret_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Secret for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/secrets" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Secret for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Secret for version v1alpha1 from group management in scope Integration",
        "operationId" : "list_management_v1alpha1_Integration_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Secret for version v1alpha1 from group management in scope Integration",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of secrets."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Secret for version v1alpha1 from group management in scope Integration",
        "description" : "Create Secret for version v1alpha1 from group management in scope Integration",
        "operationId" : "create_management_v1alpha1_Integration_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Secret for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/secrets/{name}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Secret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Secret for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Secret for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Secret for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Secret for version v1alpha1 from group management in scope Integration",
        "description" : "Remove Secret for version v1alpha1 from group management in scope Integration",
        "operationId" : "remove_management_v1alpha1_Integration_Secret",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Secret for version v1alpha1 from group management in scope Integration. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Secret for version v1alpha1 from group management in scope Integration"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Secret for version v1alpha1 from group management in scope Integration",
        "description" : "Update Secret for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Secret for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/secrets/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Secret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Secret for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Extension resource data of Secret for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_Secret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Secret for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Secret for version v1alpha1 from group management in scope Integration",
        "description" : "Update Extension resource data of Secret for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_Secret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Secret for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/secrets" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Secret for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Secret for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type Secret for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of secrets."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create Secret for version v1alpha1 from group management in scope Environment",
        "description" : "Create Secret for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new Secret for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/secrets/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Secret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Secret for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Secret for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Secret for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove Secret for version v1alpha1 from group management in scope Environment",
        "description" : "Remove Secret for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_Secret",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing Secret for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed Secret for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Secret for version v1alpha1 from group management in scope Environment",
        "description" : "Update Secret for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Secret",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Secret for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/secrets/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the Secret",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of Secret for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of Secret for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_Secret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of Secret for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of Secret for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of Secret for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_Secret_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.Secret resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.Secret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of Secret for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.Secret"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "list_catalog_v1alpha1_Asset_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope Asset",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "create_catalog_v1alpha1_Asset_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "remove_catalog_v1alpha1_Asset_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope Asset. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope Asset"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assets/{assetName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "assetName",
        "description" : "Name of the Asset",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "read_catalog_v1alpha1_Asset_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Asset",
        "operationId" : "update_catalog_v1alpha1_Asset_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/supportcontacts/{supportcontactName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "supportcontactName",
        "description" : "Name of the SupportContact",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "operationId" : "list_catalog_v1alpha1_SupportContact_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "operationId" : "create_catalog_v1alpha1_SupportContact_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/supportcontacts/{supportcontactName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "supportcontactName",
        "description" : "Name of the SupportContact",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "operationId" : "read_catalog_v1alpha1_SupportContact_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "operationId" : "remove_catalog_v1alpha1_SupportContact_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope SupportContact. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope SupportContact"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "operationId" : "update_catalog_v1alpha1_SupportContact_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/supportcontacts/{supportcontactName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "supportcontactName",
        "description" : "Name of the SupportContact",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "operationId" : "read_catalog_v1alpha1_SupportContact_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
        "operationId" : "update_catalog_v1alpha1_SupportContact_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope SupportContact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "operationId" : "list_management_v1alpha1_VirtualAPIRelease_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "description" : "Create AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "operationId" : "create_management_v1alpha1_VirtualAPIRelease_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "description" : "Remove AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "operationId" : "remove_management_v1alpha1_VirtualAPIRelease_AccessControlList",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "description" : "Update AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapireleases/{virtualapireleaseName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapireleaseName",
        "description" : "Name of the VirtualAPIRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "operationId" : "read_management_v1alpha1_VirtualAPIRelease_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
        "operationId" : "update_management_v1alpha1_VirtualAPIRelease_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPIRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{assetreleaseName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "assetreleaseName",
        "description" : "Name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "list_catalog_v1alpha1_AssetRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "create_catalog_v1alpha1_AssetRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{assetreleaseName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "assetreleaseName",
        "description" : "Name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "remove_catalog_v1alpha1_AssetRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope AssetRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope AssetRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/assetreleases/{assetreleaseName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "assetreleaseName",
        "description" : "Name of the AssetRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "read_catalog_v1alpha1_AssetRelease_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
        "operationId" : "update_catalog_v1alpha1_AssetRelease_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AssetRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Application",
        "operationId" : "list_catalog_v1alpha1_Application_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope Application",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope Application",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope Application",
        "operationId" : "create_catalog_v1alpha1_Application_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Application",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Application",
        "operationId" : "remove_catalog_v1alpha1_Application_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope Application. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope Application"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope Application",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/applications/{applicationName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "applicationName",
        "description" : "Name of the Application",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Application",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Application",
        "operationId" : "read_catalog_v1alpha1_Application_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Application",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Application",
        "operationId" : "update_catalog_v1alpha1_Application_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplanunits/{productplanunitName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "productplanunitName",
        "description" : "Name of the ProductPlanUnit",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "operationId" : "list_catalog_v1alpha1_ProductPlanUnit_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "operationId" : "create_catalog_v1alpha1_ProductPlanUnit_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplanunits/{productplanunitName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "productplanunitName",
        "description" : "Name of the ProductPlanUnit",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "operationId" : "read_catalog_v1alpha1_ProductPlanUnit_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "operationId" : "remove_catalog_v1alpha1_ProductPlanUnit_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "operationId" : "update_catalog_v1alpha1_ProductPlanUnit_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplanunits/{productplanunitName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productplanunitName",
        "description" : "Name of the ProductPlanUnit",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "operationId" : "read_catalog_v1alpha1_ProductPlanUnit_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
        "operationId" : "update_catalog_v1alpha1_ProductPlanUnit_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlanUnit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Environment",
        "operationId" : "list_management_v1alpha1_Environment_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group management in scope Environment",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group management in scope Environment",
        "description" : "Create AccessControlList for version v1alpha1 from group management in scope Environment",
        "operationId" : "create_management_v1alpha1_Environment_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group management in scope Environment",
        "description" : "Remove AccessControlList for version v1alpha1 from group management in scope Environment",
        "operationId" : "remove_management_v1alpha1_Environment_AccessControlList",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group management in scope Environment. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group management in scope Environment"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group management in scope Environment",
        "description" : "Update AccessControlList for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/environments/{environmentName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "environmentName",
        "description" : "Name of the Environment",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope Environment",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope Environment",
        "operationId" : "read_management_v1alpha1_Environment_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope Environment",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope Environment",
        "operationId" : "update_management_v1alpha1_Environment_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group management in scope Environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "list_catalog_v1alpha1_AuthorizationProfile_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "create_catalog_v1alpha1_AuthorizationProfile_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "remove_catalog_v1alpha1_AuthorizationProfile_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/authprofiles/{authprofileName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "authprofileName",
        "description" : "Name of the AuthorizationProfile",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "read_catalog_v1alpha1_AuthorizationProfile_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
        "operationId" : "update_catalog_v1alpha1_AuthorizationProfile_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope AuthorizationProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "list_catalog_v1alpha1_Marketplace_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "create_catalog_v1alpha1_Marketplace_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "remove_catalog_v1alpha1_Marketplace_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope Marketplace. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope Marketplace"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/marketplaces/{marketplaceName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "marketplaceName",
        "description" : "Name of the Marketplace",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "read_catalog_v1alpha1_Marketplace_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
        "operationId" : "update_catalog_v1alpha1_Marketplace_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Marketplace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/stages/{stageName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "stageName",
        "description" : "Name of the Stage",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "operationId" : "list_catalog_v1alpha1_Stage_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope Stage",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "operationId" : "create_catalog_v1alpha1_Stage_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope Stage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/stages/{stageName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "stageName",
        "description" : "Name of the Stage",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "operationId" : "read_catalog_v1alpha1_Stage_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope Stage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "operationId" : "remove_catalog_v1alpha1_Stage_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope Stage. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope Stage"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "operationId" : "update_catalog_v1alpha1_Stage_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Stage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/stages/{stageName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "stageName",
        "description" : "Name of the Stage",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "operationId" : "read_catalog_v1alpha1_Stage_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Stage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Stage",
        "operationId" : "update_catalog_v1alpha1_Stage_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Stage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Mesh",
        "operationId" : "list_management_v1alpha1_Mesh_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group management in scope Mesh",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group management in scope Mesh",
        "description" : "Create AccessControlList for version v1alpha1 from group management in scope Mesh",
        "operationId" : "create_management_v1alpha1_Mesh_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group management in scope Mesh",
        "description" : "Remove AccessControlList for version v1alpha1 from group management in scope Mesh",
        "operationId" : "remove_management_v1alpha1_Mesh_AccessControlList",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group management in scope Mesh. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group management in scope Mesh"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group management in scope Mesh",
        "description" : "Update AccessControlList for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/meshes/{meshName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "meshName",
        "description" : "Name of the Mesh",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope Mesh",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope Mesh",
        "operationId" : "read_management_v1alpha1_Mesh_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope Mesh",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope Mesh",
        "operationId" : "update_management_v1alpha1_Mesh_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group management in scope Mesh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "list_management_v1alpha1_VirtualAPI_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Create AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "create_management_v1alpha1_VirtualAPI_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "read_management_v1alpha1_VirtualAPI_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Remove AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "remove_management_v1alpha1_VirtualAPI_AccessControlList",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group management in scope VirtualAPI. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group management in scope VirtualAPI"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Update AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "update_management_v1alpha1_VirtualAPI_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/virtualapis/{virtualapiName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "virtualapiName",
        "description" : "Name of the VirtualAPI",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "read_management_v1alpha1_VirtualAPI_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
        "operationId" : "update_management_v1alpha1_VirtualAPI_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group management in scope VirtualAPI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{subscriptionName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "subscriptionName",
        "description" : "Name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "operationId" : "list_catalog_v1alpha1_Subscription_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope Subscription",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "operationId" : "create_catalog_v1alpha1_Subscription_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{subscriptionName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "subscriptionName",
        "description" : "Name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "operationId" : "read_catalog_v1alpha1_Subscription_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "operationId" : "remove_catalog_v1alpha1_Subscription_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope Subscription. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope Subscription"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "operationId" : "update_catalog_v1alpha1_Subscription_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/subscriptions/{subscriptionName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "subscriptionName",
        "description" : "Name of the Subscription",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "operationId" : "read_catalog_v1alpha1_Subscription_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Subscription",
        "operationId" : "update_catalog_v1alpha1_Subscription_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "list_catalog_v1alpha1_ProductRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "create_catalog_v1alpha1_ProductRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "remove_catalog_v1alpha1_ProductRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope ProductRelease. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope ProductRelease"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productreleases/{productreleaseName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productreleaseName",
        "description" : "Name of the ProductRelease",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "read_catalog_v1alpha1_ProductRelease_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
        "operationId" : "update_catalog_v1alpha1_ProductRelease_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductRelease",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{productplanName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "list_catalog_v1alpha1_ProductPlan_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "create_catalog_v1alpha1_ProductPlan_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{productplanName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "remove_catalog_v1alpha1_ProductPlan_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope ProductPlan. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope ProductPlan"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/productplans/{productplanName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productplanName",
        "description" : "Name of the ProductPlan",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "read_catalog_v1alpha1_ProductPlan_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
        "operationId" : "update_catalog_v1alpha1_ProductPlan_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope ProductPlan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/watchtopics/{watchtopicName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "watchtopicName",
        "description" : "Name of the WatchTopic",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "operationId" : "list_management_v1alpha1_WatchTopic_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group management in scope WatchTopic",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "description" : "Create AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "operationId" : "create_management_v1alpha1_WatchTopic_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group management in scope WatchTopic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/watchtopics/{watchtopicName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "watchtopicName",
        "description" : "Name of the WatchTopic",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "operationId" : "read_management_v1alpha1_WatchTopic_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group management in scope WatchTopic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "description" : "Remove AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "operationId" : "remove_management_v1alpha1_WatchTopic_AccessControlList",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group management in scope WatchTopic. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group management in scope WatchTopic"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "description" : "Update AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "operationId" : "update_management_v1alpha1_WatchTopic_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group management in scope WatchTopic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/watchtopics/{watchtopicName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "watchtopicName",
        "description" : "Name of the WatchTopic",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "operationId" : "read_management_v1alpha1_WatchTopic_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group management in scope WatchTopic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope WatchTopic",
        "operationId" : "update_management_v1alpha1_WatchTopic_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group management in scope WatchTopic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Integration",
        "operationId" : "list_management_v1alpha1_Integration_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group management in scope Integration",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group management in scope Integration",
        "description" : "Create AccessControlList for version v1alpha1 from group management in scope Integration",
        "operationId" : "create_management_v1alpha1_Integration_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group management in scope Integration",
        "description" : "Remove AccessControlList for version v1alpha1 from group management in scope Integration",
        "operationId" : "remove_management_v1alpha1_Integration_AccessControlList",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group management in scope Integration. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group management in scope Integration"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group management in scope Integration",
        "description" : "Update AccessControlList for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/integrations/{integrationName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "integrationName",
        "description" : "Name of the Integration",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope Integration",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope Integration",
        "operationId" : "read_management_v1alpha1_Integration_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope Integration",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope Integration",
        "operationId" : "update_management_v1alpha1_Integration_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group management in scope Integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Product",
        "operationId" : "list_catalog_v1alpha1_Product_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope Product",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope Product",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope Product",
        "operationId" : "create_catalog_v1alpha1_Product_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Product",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Product",
        "operationId" : "remove_catalog_v1alpha1_Product_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope Product. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope Product"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope Product",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/products/{productName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "productName",
        "description" : "Name of the Product",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Product",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Product",
        "operationId" : "read_catalog_v1alpha1_Product_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Product",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Product",
        "operationId" : "update_catalog_v1alpha1_Product_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "list_definitions_v1alpha1_ResourceGroup_AccessControlList",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Create AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "create_definitions_v1alpha1_ResourceGroup_AccessControlList",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_AccessControlList",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Remove AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "remove_definitions_v1alpha1_ResourceGroup_AccessControlList",
        "tags" : [ "definitions" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_AccessControlList",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/definitions/v1alpha1/groups/{groupName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "groupName",
        "description" : "Name of the ResourceGroup",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "read_definitions_v1alpha1_ResourceGroup_AccessControlList_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
        "operationId" : "update_definitions_v1alpha1_ResourceGroup_AccessControlList_extension",
        "tags" : [ "definitions" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the definitions.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group definitions in scope ResourceGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/categories/{categoryName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "categoryName",
        "description" : "Name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Category",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Category",
        "operationId" : "list_catalog_v1alpha1_Category_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group catalog in scope Category",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group catalog in scope Category",
        "description" : "Create AccessControlList for version v1alpha1 from group catalog in scope Category",
        "operationId" : "create_catalog_v1alpha1_Category_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group catalog in scope Category",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/categories/{categoryName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "categoryName",
        "description" : "Name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Category",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group catalog in scope Category",
        "operationId" : "read_catalog_v1alpha1_Category_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group catalog in scope Category",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Category",
        "description" : "Remove AccessControlList for version v1alpha1 from group catalog in scope Category",
        "operationId" : "remove_catalog_v1alpha1_Category_AccessControlList",
        "tags" : [ "catalog" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group catalog in scope Category. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group catalog in scope Category"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group catalog in scope Category",
        "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Category",
        "operationId" : "update_catalog_v1alpha1_Category_AccessControlList",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group catalog in scope Category",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/v1alpha1/categories/{categoryName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "categoryName",
        "description" : "Name of the Category",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Category",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Category",
        "operationId" : "read_catalog_v1alpha1_Category_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Category",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Category",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Category",
        "operationId" : "update_catalog_v1alpha1_Category_AccessControlList_extension",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the catalog.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group catalog in scope Category",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/accesscontrollists" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "list_management_v1alpha1_K8SCluster_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/pageNumberParam"
        }, {
          "$ref" : "#/components/parameters/pageSizeParam"
        }, {
          "$ref" : "#/components/parameters/sortParam"
        }, {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources: * name * title * tags * attributes * metadata.id * metadata.state * metadata.references.id * metadata.references.kind * metadata.references.name * metadata.deletedReferences.id * metadata.deletedReferences.kind * metadata.deletedReferences.name * metadata.resourceVersion * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all resources of type AccessControlList for version v1alpha1 from group management in scope K8SCluster",
            "headers" : {
              "X-Axway-Total-Count" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Total number of accesscontrollists."
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "post" : {
        "summary" : "Create AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Create AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "create_management_v1alpha1_K8SCluster_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Create a new AccessControlList for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/accesscontrollists/{name}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read AccessControlList for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "delete" : {
        "summary" : "Remove AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Remove AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "remove_management_v1alpha1_K8SCluster_AccessControlList",
        "tags" : [ "management" ],
        "responses" : {
          "202" : {
            "description" : "Accepted removing AccessControlList for version v1alpha1 from group management in scope K8SCluster. Dependent resources found, clean up will finish once all dependent resources have been removed"
          },
          "204" : {
            "description" : "Removed AccessControlList for version v1alpha1 from group management in scope K8SCluster"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_AccessControlList",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec, {extension}. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update AccessControlList for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/management/v1alpha1/k8sclusters/{k8sclusterName}/accesscontrollists/{name}/{extension}" : {
      "parameters" : [ {
        "name" : "k8sclusterName",
        "description" : "Name of the K8SCluster",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "name" : "extension",
        "description" : "Name of the extension",
        "in" : "path",
        "schema" : {
          "type" : "string",
          "pattern" : "x-.*"
        },
        "required" : true
      }, {
        "name" : "name",
        "description" : "The name of the AccessControlList",
        "in" : "path",
        "schema" : {
          "type" : "string"
        },
        "required" : true
      }, {
        "$ref" : "#/components/parameters/TenantHeader"
      } ],
      "get" : {
        "summary" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Retrieves Extension resource data of AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "read_management_v1alpha1_K8SCluster_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Read Extension resource data of AccessControlList for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      },
      "put" : {
        "summary" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "description" : "Update Extension resource data of AccessControlList for version v1alpha1 from group management in scope K8SCluster",
        "operationId" : "update_management_v1alpha1_K8SCluster_AccessControlList_extension",
        "tags" : [ "management" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/embedParam"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Query string for restricting the response fields from the management.v1alpha1.AccessControlList resource. Multiple values can be specified separated by comma. Supported values: group, apiVersion, kind, name, title, metadata, attributes, tags, spec. Unknown values will be ignored.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Extension resource data of AccessControlList for version v1alpha1 from group management in scope K8SCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.AccessControlList"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "428" : {
            "$ref" : "#/components/responses/PreConditionRequired"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "pageNumberParam" : {
        "name" : "page",
        "in" : "query",
        "description" : "The offset starting page number in the result set to start returning results from, starts at 1.",
        "required" : false,
        "schema" : {
          "type" : "integer",
          "default" : 1
        }
      },
      "pageSizeParam" : {
        "name" : "pageSize",
        "in" : "query",
        "description" : "The number of entities allowed in a page.",
        "required" : false,
        "schema" : {
          "type" : "integer",
          "default" : 20
        }
      },
      "sortParam" : {
        "name" : "sort",
        "in" : "query",
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "description" : "The field to sort result sets by, in ASC or DESC order.\nAllowed fields for sorting:\n        name\n        title\n        metadata.audit.createTimestamp\n        metadata.audit.modifyTimestamp"
      },
      "queryParam" : {
        "name" : "query",
        "in" : "query",
        "description" : "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources:\n  * name\n  * title\n  * tags\n  * attributes\n  * metadata.id\n  * metadata.references.id\n  * metadata.references.kind\n  * metadata.references.name\n  * metadata.deletedReferences.id\n  * metadata.deletedReferences.kind\n  * metadata.deletedReferences.name\n  * metadata.resourceVersion\n  * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ\n  * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ\n  * metadata.scope.owner.id\n  * owner.id\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser\n",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "embedParam" : {
        "name" : "embed",
        "in" : "query",
        "description" : "Defines parameters that can be embedded:\n  * metadata.references - includes the referenced resources in the response.\n  * metadata.accessRights - includes user's permissions on requested resource and its scope.\n",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "TenantHeader" : {
        "name" : "X-Axway-Tenant-Id",
        "in" : "header",
        "schema" : {
          "type" : "string",
          "maxLength" : 36
        },
        "required" : false,
        "description" : "The platform Organization ID. Not required when using Service Accounts."
      }
    },
    "responses" : {
      "BadRequest" : {
        "description" : "Failed to validate request parameters.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/api.v1.ErrorResponse"
            }
          }
        }
      },
      "Unauthorized" : {
        "description" : "Unauthorized. A valid authorization header was not provided with the request to authenticate.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/api.v1.ErrorResponse"
            }
          }
        }
      },
      "Forbidden" : {
        "description" : "Forbidden, the user does not have the correct permissions to call this API.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/api.v1.ErrorResponse"
            }
          }
        }
      },
      "NotFound" : {
        "description" : "The resource specified could not be found.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/api.v1.ErrorResponse"
            }
          }
        }
      },
      "Conflict" : {
        "description" : "Request conflicts with the current state of the server.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/api.v1.ErrorResponse"
            }
          }
        }
      },
      "PreConditionRequired" : {
        "description" : "The update Request is out of Sync with database.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/api.v1.ErrorResponse"
            }
          }
        }
      },
      "InternalServerError" : {
        "description" : "Unexpected internal server error.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/api.v1.ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "BearerToken" : {
        "type" : "http",
        "scheme" : "bearer",
        "description" : "Authenticated platform bearer token."
      },
      "OAuth2" : {
        "type" : "oauth2",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://login.axway.com/auth/realms/Broker/protocol/openid-connect/token",
            "scopes" : { }
          },
          "authorizationCode" : {
            "authorizationUrl" : "https://login.axway.com/auth/realms/Broker/protocol/openid-connect/auth",
            "tokenUrl" : "https://login.axway.com/auth/realms/Broker/protocol/openid-connect/token",
            "scopes" : { }
          },
          "implicit" : {
            "authorizationUrl" : "https://login.axway.com/auth/realms/Broker/protocol/openid-connect/auth",
            "scopes" : { }
          }
        }
      }
    },
    "schemas" : {
      "api.v1.ErrorResponse" : {
        "title" : "api.v1.ErrorResponse",
        "description" : "Detail for standard error responses.",
        "type" : "object",
        "additionalProperties" : true,
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : true,
              "properties" : {
                "status" : {
                  "type" : "integer"
                },
                "title" : {
                  "type" : "string"
                },
                "detail" : {
                  "type" : "string"
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true,
                  "properties" : {
                    "tenantId" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "api.v1.Metadata" : {
        "type" : "object",
        "description" : "Metadata that all server resources have. Data is generated by the server.",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Internal id of the resource."
          },
          "audit" : {
            "$ref" : "#/components/schemas/api.v1.AuditMetadata"
          },
          "scope" : {
            "type" : "object",
            "description" : "The scope where this resource was defined.",
            "properties" : {
              "id" : {
                "type" : "string",
                "maxLength" : 32,
                "description" : "Internal id of the scope resource where the resource is defined."
              },
              "kind" : {
                "type" : "string",
                "maxLength" : 30,
                "description" : "The kind of the scope resource where the resource is defined."
              },
              "name" : {
                "type" : "string",
                "maxLength" : 100,
                "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
                "description" : "The name of the scope where the resource is defined."
              },
              "title" : {
                "type" : "string",
                "maxLength" : 350,
                "description" : "The title of the scope where the resource is defined."
              },
              "selfLink" : {
                "type" : "string",
                "description" : "The URL representing the scope resource object."
              },
              "owner" : {
                "$ref" : "#/components/schemas/api.v1.Owner"
              }
            }
          },
          "acls" : {
            "type" : "array",
            "description" : "Access Control Lists for this resource.",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Acl"
            }
          },
          "resourceVersion" : {
            "type" : "string",
            "description" : "Internal version of this object that can be used by clients to determine when objects have changed.",
            "maxLength" : 20
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Reference"
            }
          },
          "state" : {
            "type" : "string",
            "description" : "Defines the state of the resource. If present, indicates if the resource is in Deleting state."
          },
          "selfLink" : {
            "type" : "string",
            "description" : "The URL representing this resource object."
          }
        },
        "readOnly" : true
      },
      "api.v1.Reference" : {
        "type" : "object",
        "description" : "List of objects dependent by this object.",
        "properties" : {
          "id" : {
            "type" : "string",
            "maxLength" : 32,
            "description" : "Unique id generated by the server."
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "description" : "The kind of the referenced resource."
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "The name of the referenced resource."
          },
          "scopeKind" : {
            "type" : "string",
            "maxLength" : 30,
            "description" : "The kind of the referenced resource scope."
          },
          "scopeName" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "The name of the referenced resource scope."
          },
          "selfLink" : {
            "type" : "string",
            "description" : "The URL representing the referenced resource."
          },
          "type" : {
            "type" : "string",
            "default" : "hard",
            "description" : "Defines the type of the reference: * soft - spec property that has this reference will get nulled out if the referenced resource gets removed. * hard - dictates that the current resource will get removed when the referenced resource gets removed.\n",
            "enum" : [ "soft", "hard" ]
          }
        },
        "readOnly" : true
      },
      "api.v1.Acl" : {
        "type" : "object",
        "description" : "Summarizes an Access Control List (ACL) resource associated with an API Server resource.",
        "properties" : {
          "id" : {
            "type" : "string",
            "maxLength" : 32,
            "description" : "Unique id generated by the server."
          },
          "subjectType" : {
            "type" : "string",
            "default" : "team",
            "description" : "Type of the subject.",
            "enum" : [ "team" ]
          },
          "subjectId" : {
            "type" : "string",
            "maxLength" : 36,
            "description" : "UUID of the subject."
          },
          "aclId" : {
            "type" : "string",
            "maxLength" : 36,
            "description" : "ID of the ACL Resource."
          }
        }
      },
      "api.v1.AuditMetadata" : {
        "title" : "api.v1.AuditMetadata",
        "description" : "Read-only metadata for the record.",
        "properties" : {
          "createTimestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The creation time."
          },
          "createUserId" : {
            "type" : "string",
            "description" : "Id of the user that created the entity.",
            "minLength" : 1,
            "maxLength" : 52
          },
          "modifyTimestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The last modification time."
          },
          "modifyUserId" : {
            "type" : "string",
            "description" : "Id of the user that last modified the entity.",
            "minLength" : 1,
            "maxLength" : 52
          }
        },
        "readOnly" : true,
        "type" : "object"
      },
      "api.v1.Attributes" : {
        "title" : "api.v1.Attributes",
        "description" : "Custom attributes added to objects.",
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        }
      },
      "api.v1.Finalizer" : {
        "description" : "Finalizer on the API server resource.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 100
          },
          "description" : {
            "type" : "string",
            "maxLength" : 350
          }
        },
        "required" : [ "name" ]
      },
      "api.v1.Owner" : {
        "description" : "Owner of the resource.",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of the owner. Defaults to team if not present.",
            "enum" : [ "team" ],
            "default" : "team"
          },
          "id" : {
            "type" : "string",
            "description" : "Id of the owner of the resource.",
            "maxLength" : 36
          }
        },
        "required" : [ "id" ]
      },
      "api.v1.ResourceInstance" : {
        "description" : "API Server generic resource structure.",
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Defines the group from which the resource belongs to. The server infers this from the endpoint the client submits the request to."
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "description" : "Defines the structure of the resource. The server infers this from the endpoint the client submits the request to."
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "description" : "Defines the kind of the resource. The server infers this from the endpoint the client submits the request to."
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "finalizers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "type" : "object",
            "description" : "Resource instance specs."
          }
        },
        "additionalProperties" : {
          "type" : "object"
        },
        "required" : [ "spec" ]
      },
      "api.v1.RateLimit" : {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "string",
            "enum" : [ "SECOND", "MINUTE", "HOUR" ],
            "description" : "The unit of time over which the limit applies."
          },
          "limit" : {
            "type" : "integer",
            "minimum" : 0,
            "description" : "The allowed number of requests per unit of time."
          }
        },
        "required" : [ "unit", "limit" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.WatchTopic" : {
        "description" : "Definition of WatchTopic for version v1alpha1 in group management. \n\n Resource representing a set of filters for the Agents to create a GRPC Watch stream",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "WatchTopic",
        "x-axway-plural" : "watchtopics",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind WatchTopic. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "WatchTopic"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the WatchTopic. WatchTopic name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the WatchTopic."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.WatchTopicSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.WatchTopicSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the WatchTopic",
            "maxLength" : 350
          },
          "filters" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "type" : "object",
              "properties" : {
                "group" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "description" : "Value for the group of the resource. Use \"*\" for any."
                },
                "scope" : {
                  "type" : "object",
                  "description" : "Resource scope filter details.",
                  "properties" : {
                    "kind" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Value for the Kind of the scope of the resource. Use \"*\" for any."
                    },
                    "name" : {
                      "type" : "string",
                      "maxLength" : 100,
                      "pattern" : "^([\\*])|([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)",
                      "description" : "Name of the scope of the resource. Use \"*\" for any."
                    }
                  },
                  "additionalProperties" : false,
                  "required" : [ "kind", "name" ]
                },
                "kind" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "description" : "Value for the Kind of the resource. Use \"*\" for any."
                },
                "name" : {
                  "type" : "string",
                  "maxLength" : 100,
                  "pattern" : "^([\\*])|([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)",
                  "description" : "Name of the resource. Use \"*\" for any."
                },
                "type" : {
                  "type" : "array",
                  "minItems" : 1,
                  "items" : {
                    "type" : "string",
                    "description" : "Type of the operation for the tracked resources.",
                    "enum" : [ "created", "updated", "deleted" ]
                  }
                }
              },
              "required" : [ "group", "kind", "name", "type" ]
            }
          }
        },
        "required" : [ "filters" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.DiscoveryAgent" : {
        "description" : "Definition of DiscoveryAgent for version v1alpha1 in group management. \n\n Resource representing a discovery agent",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "DiscoveryAgent",
        "x-axway-plural" : "discoveryagents",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind DiscoveryAgent. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "DiscoveryAgent"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the DiscoveryAgent. DiscoveryAgent name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the DiscoveryAgent."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgentSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.DiscoveryAgentStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.DiscoveryAgentSpec" : {
        "type" : "object",
        "properties" : {
          "dataplaneType" : {
            "type" : "string",
            "description" : "The dataplane type that this agent connects to",
            "maxLength" : 255,
            "x-amplify-event-data" : { }
          },
          "config" : {
            "type" : "object",
            "description" : "Represents the discovery agent config",
            "properties" : {
              "filter" : {
                "type" : "string",
                "description" : "Defines the tag based filter expression to be evaluated for discovering the API from the API Gateway. The filter value is a conditional expression that can use logical operators to compare two value. The conditional expression must have \"tag\" as the prefix/selector in the symbol name. For e.g.\n``` tag.SOME_TAG == \"somevalue\" ```\nThe expression can be a simple condition as shown above or compound condition in which more than one simple conditions are evaluated using logical operator.\nFor e.g.\n``` tag.SOME_TAG == \"somevalue\" || tag.ANOTHER_TAG != \"some_other_value\" ```\nIn addition to logical expression, the filter can hold call based expressions. Below are the list of supported call expressions\n#### Exists\nExists call can be made to evaluate if the tag name exists in the list of tags on API. This call expression can be used as unary expression For e.g.\n``` tag.SOME_TAG.Exists() ```\n#### Any\nAny call can be made in a simple expression to evaluate if the tag with any name has specified value or not in the list of tags on the API. For e.g.\n``` tag.Any() == \"Tag with some value\" || tag.Any() != \"Tag with other value\" ```\n#### Contains\nContains call can be made in a simple expression to evaluate if the the specified tag contains specified argument as value. This call expression requires string argument that will be used to perform lookup in tag value For e.g.\n``` tag.Contains(\"somevalue\") ```\n#### MatchRegEx\nMatchRegEx call can be used for evaluating the specified tag value to match specified regular expression. This call expression requires a regular expression as the argument. For e.g.\n``` tag.MatchRegEx(\"(some){1}\") ```\n"
              },
              "additionalTags" : {
                "type" : "array",
                "description" : "The list of tags to be added to the API service resource that the agent publishes to Amplify Central",
                "items" : {
                  "type" : "string"
                }
              },
              "ignoreTags" : {
                "type" : "array",
                "description" : "The list of tags to exclude from the API service resource that the agent publishes to Amplify Central",
                "items" : {
                  "type" : "string"
                }
              },
              "owningTeam" : {
                "type" : "string",
                "description" : "Name of the team that owns the catalog item created by agent. If not provided, the default team will be used."
              }
            }
          },
          "logging" : {
            "type" : "object",
            "description" : "Logging config",
            "properties" : {
              "level" : {
                "type" : "string",
                "description" : "Defines the log level.",
                "enum" : [ "error", "warn", "info", "debug" ]
              }
            }
          }
        },
        "required" : [ "dataplaneType", "config" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.DiscoveryAgentStatus" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string",
            "description" : "Version name for the agent revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          },
          "latestAvailableVersion" : {
            "type" : "string",
            "description" : "Latest available version for the agent revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          },
          "state" : {
            "type" : "string",
            "description" : "Agent status:\n * running - Passed all health checks.  Up and running\n * stopped - Agent is not running\n * failed - Failed health checks\n * unhealthy - Agent is running with health check failure\n",
            "enum" : [ "running", "stopped", "failed", "unhealthy" ]
          },
          "previousState" : {
            "type" : "string",
            "enum" : [ "running", "stopped", "failed", "unhealthy" ]
          },
          "message" : {
            "type" : "string",
            "description" : "A way to communicate details about the current status by the agent"
          },
          "lastActivityTime" : {
            "type" : "string",
            "description" : "The last updated event timestamp provided by the agent",
            "format" : "date-time"
          },
          "sdkVersion" : {
            "type" : "string",
            "description" : "Version name for the SDK revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          }
        }
      },
      "management.v1alpha1.TraceabilityAgent" : {
        "description" : "Definition of TraceabilityAgent for version v1alpha1 in group management. \n\n Resource representing a traceability agent",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "TraceabilityAgent",
        "x-axway-plural" : "traceabilityagents",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind TraceabilityAgent. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "TraceabilityAgent"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the TraceabilityAgent. TraceabilityAgent name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the TraceabilityAgent."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgentSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.TraceabilityAgentStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.TraceabilityAgentSpec" : {
        "type" : "object",
        "properties" : {
          "dataplaneType" : {
            "type" : "string",
            "description" : "The dataplane type that this agent connects to",
            "maxLength" : 255,
            "x-amplify-event-data" : { }
          },
          "config" : {
            "type" : "object",
            "description" : "Represents the traceability agent config",
            "properties" : {
              "owningTeam" : {
                "type" : "string",
                "description" : "Name of the team that owns the catalog item created by agent. If not provided, the default team will be used."
              },
              "processHeaders" : {
                "type" : "boolean",
                "description" : "Configures the agent to include request and response headers in captured traffic. Defaults to true"
              },
              "excludeHeaders" : {
                "type" : "array",
                "description" : "List of header names that will not be included in the captured traffic by the agent",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "logging" : {
            "type" : "object",
            "description" : "Logging config",
            "properties" : {
              "level" : {
                "type" : "string",
                "description" : "Defines the log level.",
                "enum" : [ "error", "warn", "info", "debug" ]
              }
            }
          }
        },
        "required" : [ "dataplaneType", "config" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.TraceabilityAgentStatus" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string",
            "description" : "Version name for the agent revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          },
          "latestAvailableVersion" : {
            "type" : "string",
            "description" : "Latest available version for the agent revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          },
          "state" : {
            "type" : "string",
            "description" : "Agent status\n * running - Passed all health checks.  Up and running\n * stopped - Agent is not running\n * failed - Failed health checks\n * unhealthy - Agent is running with health check failure\n",
            "enum" : [ "running", "stopped", "failed", "unhealthy" ]
          },
          "previousState" : {
            "type" : "string",
            "enum" : [ "running", "stopped", "failed", "unhealthy" ]
          },
          "message" : {
            "type" : "string",
            "description" : "A way to communicate details about the current status by the agent"
          },
          "lastActivityTime" : {
            "type" : "string",
            "description" : "The last updated event timestamp provided by the agent",
            "format" : "date-time"
          },
          "sdkVersion" : {
            "type" : "string",
            "description" : "Version name for the SDK revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          }
        }
      },
      "management.v1alpha1.GovernanceAgent" : {
        "description" : "Definition of GovernanceAgent for version v1alpha1 in group management. \n\n Resource representing a governance agent",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "GovernanceAgent",
        "x-axway-plural" : "governanceagents",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status", "agentconfigstatus" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind GovernanceAgent. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "GovernanceAgent"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the GovernanceAgent. GovernanceAgent name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the GovernanceAgent."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgentSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgentStatus"
          },
          "agentconfigstatus" : {
            "$ref" : "#/components/schemas/management.v1alpha1.GovernanceAgentAgentconfigstatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.GovernanceAgentSpec" : {
        "type" : "object",
        "properties" : {
          "dataplaneType" : {
            "type" : "string",
            "description" : "The dataplane type that this agent connects to",
            "minLength" : 1,
            "maxLength" : 255,
            "x-amplify-event-data" : { }
          },
          "config" : {
            "type" : "object",
            "description" : "Represents the governance agent config"
          }
        },
        "required" : [ "dataplaneType" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.GovernanceAgentStatus" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string",
            "description" : "Version name for the agent revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          },
          "state" : {
            "type" : "string",
            "description" : "Agent status\n * running - Passed all health checks.  Up and running\n * stopped - Agent is not running\n * failed - Failed health checks\n * unhealthy - Agent is running with health check failure\n",
            "enum" : [ "running", "stopped", "failed", "unhealthy" ]
          },
          "previousState" : {
            "type" : "string",
            "enum" : [ "running", "stopped", "failed", "unhealthy" ]
          },
          "message" : {
            "type" : "string",
            "description" : "A way to communicate details about the current status by the agent"
          },
          "lastActivityTime" : {
            "type" : "string",
            "description" : "The last updated event timestamp provided by the agent",
            "format" : "date-time"
          },
          "sdkVersion" : {
            "type" : "string",
            "description" : "Version name for the SDK revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          }
        }
      },
      "management.v1alpha1.GovernanceAgentAgentconfigstatus" : {
        "type" : "object",
        "properties" : {
          "resourceVersion" : {
            "type" : "string",
            "description" : "Version of the config.",
            "maxLength" : 255,
            "minLength" : 1
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "Error message if failure.",
            "maxLength" : 350,
            "minLength" : 1
          },
          "configState" : {
            "type" : "string",
            "description" : "Agent configuration state:\n  * success - Configuration applied successfully\n  * fail - Configuration failed to be applied\n",
            "enum" : [ "success", "fail" ]
          }
        }
      },
      "catalog.v1alpha1.Stage" : {
        "description" : "Definition of Stage for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Stage in the Asset Catalog.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Stage",
        "x-axway-plural" : "stages",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Stage. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Stage"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Stage. Stage name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Stage."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.StageSpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.StageIcon"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.StageSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the stage",
            "maxLength" : 350
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.StageIcon" : {
        "type" : "string",
        "description" : "Image for the asset expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1alpha1.Asset" : {
        "description" : "Definition of Asset for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Asset in the Asset Catalog.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Asset",
        "x-axway-plural" : "assets",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "access", "icon", "latestrelease", "status", "state", "references" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "subResourceName" : "status",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "subResourceName" : "status",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "subResourceName" : "references",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Stage",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "Environment",
            "plural" : "environments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Asset. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Asset"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Asset. Asset name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Asset."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetSpec"
          },
          "access" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetAccess"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetIcon"
          },
          "latestrelease" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetLatestrelease"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetStatus"
          },
          "state" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetState"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AssetSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the asset.",
            "maxLength" : 350
          },
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-extensible-enum" : [ "API" ]
          },
          "categories" : {
            "type" : "array",
            "description" : "list of categories for the asset.",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "autoRelease" : {
            "type" : "object",
            "description" : "Defines if an asset should create releases everytime there is an update to the resources.",
            "properties" : {
              "releaseType" : {
                "type" : "string",
                "enum" : [ "major", "minor", "patch" ]
              },
              "previousReleases" : {
                "type" : "object",
                "properties" : {
                  "updateState" : {
                    "type" : "string",
                    "description" : "Updates all prior non-archived releases to the deprecated state.",
                    "enum" : [ "deprecated" ]
                  }
                },
                "additionalProperties" : false
              }
            },
            "required" : [ "releaseType" ],
            "additionalProperties" : false
          }
        },
        "required" : [ "type" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetAccess" : {
        "description" : "Defines how an asset should handle access requests received from marketplace consumers.",
        "type" : "object",
        "properties" : {
          "approval" : {
            "type" : "string",
            "enum" : [ "automatic", "manual" ]
          }
        },
        "required" : [ "approval" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetIcon" : {
        "type" : "string",
        "description" : "Image for the asset expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1alpha1.AssetLatestrelease" : {
        "description" : "Provides newest non-archived release and version. Will be unassigned if no releases exist.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AssetRelease",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../version" ]
          },
          "version" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "properties" : {
                    "assetResource" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "Asset/AssetResource",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../../" ]
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1alpha1.AssetState" : {
        "type" : "string",
        "x-amplify-index" : { },
        "enum" : [ "draft", "active", "deprecated", "archived" ]
      },
      "catalog.v1alpha1.AssetReferences" : {
        "type" : "array",
        "items" : {
          "oneOf" : [ {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReferences.StageRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReferences.EnvironmentRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReferences.APIServiceRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReferences.AssetMappingRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReferences.AssetMappingTemplateRef"
          } ],
          "discriminator" : {
            "propertyName" : "kind",
            "mapping" : {
              "Stage" : "#/components/schemas/catalog.v1alpha1.AssetReferences.StageRef",
              "Environment" : "#/components/schemas/catalog.v1alpha1.AssetReferences.EnvironmentRef",
              "APIService" : "#/components/schemas/catalog.v1alpha1.AssetReferences.APIServiceRef",
              "AssetMapping" : "#/components/schemas/catalog.v1alpha1.AssetReferences.AssetMappingRef",
              "AssetMappingTemplate" : "#/components/schemas/catalog.v1alpha1.AssetReferences.AssetMappingTemplateRef"
            }
          }
        }
      },
      "catalog.v1alpha1.AssetReferences.EnvironmentRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Environment" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReferences.APIServiceRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "APIService" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment/APIService",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReferences.StageRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Stage" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/Stage",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReferences.AssetMappingRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "AssetMapping" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment/AssetMapping",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReferences.AssetMappingTemplateRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "AssetMappingTemplate" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment/AssetMappingTemplate",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetRelease" : {
        "description" : "Definition of AssetRelease for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Asset in the Asset Catalog.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AssetRelease",
        "x-axway-plural" : "assetreleases",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "status", "icon", "references" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "subResourceName" : "latestrelease",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "subResourceName" : "status",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "subResourceName" : "status",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "subResourceName" : "references",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Stage",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "Environment",
            "plural" : "environments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ReleaseTag",
            "scopeKind" : "Asset",
            "plural" : "releasetags",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD", "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AssetRelease. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AssetRelease"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AssetRelease. AssetRelease name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AssetRelease."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseStatus"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseIcon"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AssetReleaseSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the asset release.",
            "maxLength" : 350
          },
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-extensible-enum" : [ "API" ]
          },
          "version" : {
            "type" : "string",
            "description" : "version of the asset release.",
            "maxLength" : 30,
            "x-amplify-index" : { },
            "pattern" : "^(0|([1-9][0-9]*))(\\.(0|([1-9][0-9]*))){2}$"
          },
          "asset" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Asset",
            "x-amplify-kind-ref-type" : "hard"
          },
          "state" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-extensible-enum" : [ "active", "deprecated", "archived" ]
          },
          "categories" : {
            "type" : "array",
            "description" : "list of categories for the released asset.",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          }
        },
        "required" : [ "asset", "type", "version" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReleaseStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "properties" : {
                    "assetResource" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "AssetRelease/AssetResource",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../../" ]
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1alpha1.AssetReleaseIcon" : {
        "type" : "string",
        "description" : "Image for the asset expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1alpha1.AssetReleaseReferences" : {
        "type" : "array",
        "items" : {
          "oneOf" : [ {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.StageRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.ReleaseTagRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.EnvironmentRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.APIServiceRef"
          }, {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.AssetMappingTemplateRef"
          } ],
          "discriminator" : {
            "propertyName" : "kind",
            "mapping" : {
              "Stage" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.StageRef",
              "ReleaseTag" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.ReleaseTagRef",
              "Environment" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.EnvironmentRef",
              "APIService" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.APIServiceRef",
              "AssetMappingTemplate" : "#/components/schemas/catalog.v1alpha1.AssetReleaseReferences.AssetMappingTemplateRef"
            }
          }
        }
      },
      "catalog.v1alpha1.AssetReleaseReferences.ReleaseTagRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "ReleaseTag" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Asset/ReleaseTag"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReleaseReferences.EnvironmentRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Environment" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReleaseReferences.StageRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Stage" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/Stage",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReleaseReferences.APIServiceRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "APIService" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment/APIService",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetReleaseReferences.AssetMappingTemplateRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "AssetMappingTemplate" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment/AssetMappingTemplate",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1.Category" : {
        "description" : "Definition of Category for version v1 in group catalog. \n\n Resource representing a category",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "Category",
        "x-axway-plural" : "categories",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "ConsumerInstance",
            "scopeKind" : "Environment",
            "plural" : "consumerinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Category. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Category"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Category. Category name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Category."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.CategorySpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1.CategoryIcon"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.CategorySpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Markdown representing the category description.",
            "maxLength" : 350
          },
          "restriction" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1.CategorySpec.AssetRestriction"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.CategorySpec.ProductRestriction"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.CategorySpec.APIServiceRestriction"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "asset" : "#/components/schemas/catalog.v1.CategorySpec.AssetRestriction",
                "product" : "#/components/schemas/catalog.v1.CategorySpec.ProductRestriction",
                "apiservice" : "#/components/schemas/catalog.v1.CategorySpec.APIServiceRestriction"
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1.CategoryIcon" : {
        "type" : "string",
        "description" : "Image for the Category expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1.CategorySpec.AssetRestriction" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "asset" ]
          }
        },
        "required" : [ "type" ],
        "additionalProperties" : false
      },
      "catalog.v1.CategorySpec.APIServiceRestriction" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "apiservice" ]
          }
        },
        "required" : [ "type" ],
        "additionalProperties" : false
      },
      "catalog.v1.CategorySpec.ProductRestriction" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "product" ]
          },
          "marketplace" : {
            "description" : "Defines category's marketplace properties.",
            "type" : "object",
            "properties" : {
              "featured" : {
                "type" : "boolean",
                "description" : "Defines if the Category is featured in the marketplace.",
                "x-amplify-index" : { }
              },
              "visible" : {
                "type" : "boolean",
                "description" : "Defines if the Category is visible in the marketplace.",
                "x-amplify-index" : { }
              }
            },
            "required" : [ "visible", "featured" ]
          }
        },
        "required" : [ "type", "marketplace" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.Category" : {
        "description" : "Definition of Category for version v1alpha1 in group catalog. \n\n Resource representing a category",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Category",
        "x-axway-plural" : "categories",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "ConsumerInstance",
            "scopeKind" : "Environment",
            "plural" : "consumerinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Category. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Category"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Category. Category name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Category."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CategorySpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CategoryIcon"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.CategorySpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Markdown representing the category description.",
            "maxLength" : 350
          },
          "restriction" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1alpha1.CategorySpec.AssetRestriction"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.CategorySpec.ProductRestriction"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.CategorySpec.APIServiceRestriction"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "asset" : "#/components/schemas/catalog.v1alpha1.CategorySpec.AssetRestriction",
                "product" : "#/components/schemas/catalog.v1alpha1.CategorySpec.ProductRestriction",
                "apiservice" : "#/components/schemas/catalog.v1alpha1.CategorySpec.APIServiceRestriction"
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.CategoryIcon" : {
        "type" : "string",
        "description" : "Image for the Category expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1alpha1.CategorySpec.AssetRestriction" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "asset" ]
          }
        },
        "required" : [ "type" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.CategorySpec.APIServiceRestriction" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "apiservice" ]
          }
        },
        "required" : [ "type" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.CategorySpec.ProductRestriction" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-amplify-index" : { },
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "product" ]
          },
          "marketplace" : {
            "description" : "Defines category's marketplace properties.",
            "type" : "object",
            "properties" : {
              "featured" : {
                "type" : "boolean",
                "description" : "Defines if the Category is featured in the marketplace.",
                "x-amplify-index" : { }
              },
              "visible" : {
                "type" : "boolean",
                "description" : "Defines if the Category is visible in the marketplace.",
                "x-amplify-index" : { }
              }
            },
            "required" : [ "visible", "featured" ]
          }
        },
        "required" : [ "type", "marketplace" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AuthorizationProfile" : {
        "description" : "Definition of AuthorizationProfile for version v1alpha1 in group catalog. \n\n Defines a group of CredentialRequestDefinitions that can be used to access an AssetResource.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AuthorizationProfile",
        "x-axway-plural" : "authprofiles",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "references" ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "Environment",
            "plural" : "environments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AuthorizationProfile. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AuthorizationProfile"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AuthorizationProfile. AuthorizationProfile name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AuthorizationProfile."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfileSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AuthorizationProfileReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AuthorizationProfileSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of AuthorizationProfile that can be used to access Asset.",
            "maxLength" : 350
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AuthorizationProfileReferences" : {
        "type" : "object",
        "properties" : {
          "environment" : {
            "type" : "string",
            "x-amplify-kind-ref" : "management/Environment",
            "x-amplify-kind-ref-type" : "hard"
          }
        }
      },
      "catalog.v1alpha1.Application" : {
        "description" : "Definition of Application for version v1alpha1 in group catalog. \n\n Defines group of credentials.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Application",
        "x-axway-plural" : "applications",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "marketplace" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "ManagedApplication",
            "scopeKind" : "Environment",
            "plural" : "managedapplications",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Credential",
            "scopeKind" : "Environment",
            "plural" : "credentials",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Marketplace",
            "plural" : "marketplaces",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Application. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Application"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Application. Application name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Application."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ApplicationSpec"
          },
          "marketplace" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ApplicationMarketplace"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ApplicationSpec" : {
        "type" : "object",
        "properties" : {
          "security" : {
            "type" : "object",
            "properties" : {
              "encryptionKey" : {
                "type" : "string",
                "description" : "public key to be used to encrypt the credentials linked to this Application."
              },
              "encryptionAlgorithm" : {
                "type" : "string",
                "enum" : [ "RSA-OAEP", "PKCS" ]
              },
              "encryptionHash" : {
                "type" : "string",
                "enum" : [ "SHA256" ]
              }
            },
            "required" : [ "encryptionKey" ]
          }
        },
        "required" : [ "security" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ApplicationMarketplace" : {
        "type" : "object",
        "description" : "Details about the marketplace Application.",
        "required" : [ "name", "resource" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the Marketplace.",
            "x-amplify-kind-ref" : "Marketplace",
            "x-amplify-kind-ref-type" : "hard"
          },
          "resource" : {
            "type" : "object",
            "description" : "The Marketplace Application resource details.",
            "required" : [ "metadata" ],
            "properties" : {
              "metadata" : {
                "type" : "object",
                "description" : "Marketplace Application metadata.",
                "properties" : {
                  "createUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  },
                  "modifyUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  }
                },
                "additionalProperties" : false
              },
              "owner" : {
                "description" : "Owner of the Application.",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "description" : "The type of the owner.",
                    "enum" : [ "team" ]
                  },
                  "id" : {
                    "type" : "string",
                    "description" : "Id of the owner of the resource.",
                    "maxLength" : 36,
                    "x-amplify-index" : { }
                  },
                  "organization" : {
                    "type" : "object",
                    "description" : "Organization details.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "Id of the organization.",
                        "x-amplify-index" : { }
                      }
                    },
                    "required" : [ "id" ],
                    "additionalProperties" : false
                  }
                },
                "required" : [ "organization" ],
                "additionalProperties" : false
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.Credential" : {
        "description" : "Definition of Credential for version v1alpha1 in group catalog. \n\n Defines the credential request and outcome of the provisioning.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Credential",
        "x-axway-plural" : "credentials",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references", "data", "state", "policies", "marketplace", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Application",
          "plural" : "applications"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Marketplace",
            "plural" : "marketplaces",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Credential",
            "scopeKind" : "Environment",
            "plural" : "credentials",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "credentialrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Credential. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Credential"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Credential. Credential name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Credential."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialReferences"
          },
          "data" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialData"
          },
          "state" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialState"
          },
          "policies" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialPolicies"
          },
          "marketplace" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialMarketplace"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.CredentialSpec" : {
        "type" : "object",
        "properties" : {
          "credentialRequestDefinition" : {
            "type" : "string",
            "description" : "Reference to Credential Request Definition resource",
            "x-amplify-kind-ref" : "AuthorizationProfile/CredentialRequestDefinition",
            "x-amplify-kind-ref-type" : "soft"
          },
          "data" : {
            "type" : "object",
            "description" : "data matching the credential request definition schema."
          },
          "state" : {
            "type" : "object",
            "description" : "Desired state of the Credential.",
            "properties" : {
              "name" : {
                "type" : "string",
                "x-amplify-index" : { },
                "enum" : [ "active", "inactive" ]
              },
              "reason" : {
                "type" : "string",
                "description" : "Additional info on the state.",
                "maxLength" : 350
              },
              "rotate" : {
                "type" : "boolean",
                "description" : "Defines if credential needs to be rotated."
              }
            },
            "additionalProperties" : false,
            "required" : [ "name" ]
          }
        },
        "required" : [ "data", "credentialRequestDefinition" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.CredentialReferences" : {
        "type" : "object",
        "properties" : {
          "credential" : {
            "type" : "string",
            "description" : "Reference to the Credential for managed app that got created from this catalog credential.",
            "x-amplify-kind-ref" : "management/Environment/Credential"
          }
        }
      },
      "catalog.v1alpha1.CredentialData" : {
        "type" : "object",
        "description" : "data matching the provisioning schema from CredentialRequestDefinition."
      },
      "catalog.v1alpha1.CredentialState" : {
        "type" : "object",
        "description" : "Current state of the Credential.",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "active", "inactive" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Additional info on the state.",
            "maxLength" : 350
          }
        },
        "additionalProperties" : false,
        "required" : [ "name" ]
      },
      "catalog.v1alpha1.CredentialPolicies" : {
        "type" : "object",
        "properties" : {
          "expiry" : {
            "type" : "object",
            "properties" : {
              "timestamp" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Time when the Credential is set to be expired.",
                "x-amplify-index" : { }
              }
            },
            "additionalProperties" : false,
            "required" : [ "timestamp" ]
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.CredentialMarketplace" : {
        "type" : "object",
        "description" : "Details about the marketplace Application.",
        "required" : [ "name", "resource" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the Marketplace.",
            "x-amplify-kind-ref" : "Marketplace",
            "x-amplify-kind-ref-type" : "hard"
          },
          "resource" : {
            "type" : "object",
            "description" : "The Marketplace Credential resource details.",
            "required" : [ "metadata" ],
            "properties" : {
              "metadata" : {
                "type" : "object",
                "description" : "Marketplace Application metadata.",
                "properties" : {
                  "createUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  },
                  "modifyUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  }
                },
                "additionalProperties" : false
              },
              "owner" : {
                "description" : "Owner of the Credential.",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "description" : "The type of the owner.",
                    "enum" : [ "team" ]
                  },
                  "id" : {
                    "type" : "string",
                    "description" : "Id of the owner of the resource.",
                    "maxLength" : 36,
                    "x-amplify-index" : { }
                  },
                  "organization" : {
                    "type" : "object",
                    "description" : "Organization details.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "Id of the organization.",
                        "x-amplify-index" : { }
                      }
                    },
                    "required" : [ "id" ],
                    "additionalProperties" : false
                  }
                },
                "required" : [ "organization" ],
                "additionalProperties" : false
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.CredentialStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated credential status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "type of the reason.",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the type."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1alpha1.Subscription" : {
        "description" : "Definition of Subscription for version v1alpha1 in group catalog. \n\n Defines the subscription.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Subscription",
        "x-axway-plural" : "subscriptions",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "marketplace", "approval", "status" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "ProductPlan",
            "plural" : "productplans",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Marketplace",
            "plural" : "marketplaces",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Subscription. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Subscription"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Subscription. Subscription name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Subscription."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.SubscriptionSpec"
          },
          "marketplace" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.SubscriptionMarketplace"
          },
          "approval" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.SubscriptionApproval"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.SubscriptionStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.SubscriptionSpec" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "type" : "string",
            "description" : "Reference to Product resource",
            "x-amplify-kind-ref" : "Product"
          },
          "plan" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "Reference to Product resource",
                "x-amplify-kind-ref" : "ProductPlan"
              }
            },
            "additionalProperties" : false,
            "required" : [ "name" ]
          }
        },
        "required" : [ "product", "plan" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.SubscriptionMarketplace" : {
        "type" : "object",
        "description" : "Details about the marketplace Application.",
        "required" : [ "name", "resource" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the Marketplace.",
            "x-amplify-kind-ref" : "Marketplace",
            "x-amplify-kind-ref-type" : "hard"
          },
          "resource" : {
            "type" : "object",
            "description" : "The Marketplace Application resource details.",
            "required" : [ "metadata" ],
            "properties" : {
              "metadata" : {
                "type" : "object",
                "description" : "Marketplace Application metadata.",
                "properties" : {
                  "createUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  },
                  "modifyUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  }
                },
                "additionalProperties" : false
              },
              "owner" : {
                "description" : "Owner of the Application.",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "description" : "The type of the owner.",
                    "enum" : [ "team" ]
                  },
                  "id" : {
                    "type" : "string",
                    "description" : "Id of the owner of the resource.",
                    "maxLength" : 36,
                    "x-amplify-index" : { }
                  },
                  "organization" : {
                    "type" : "object",
                    "description" : "Organization details.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "Id of the organization.",
                        "x-amplify-index" : { }
                      }
                    },
                    "required" : [ "id" ],
                    "additionalProperties" : false
                  }
                },
                "required" : [ "organization" ],
                "additionalProperties" : false
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.SubscriptionApproval" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "approved", "rejected", "pending" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason for the state."
          }
        },
        "required" : [ "state" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.SubscriptionStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.Environment" : {
        "description" : "Definition of Environment for version v1alpha1 in group management. \n\n Resource representing an Amplify Central Environment.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Environment",
        "x-axway-plural" : "environments",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AuthorizationProfile",
            "plural" : "authprofiles",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "MeshDiscovery",
            "scopeKind" : "Mesh",
            "plural" : "meshdiscoveries",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Environment. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Environment"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Environment. Environment name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Environment."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.EnvironmentSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.EnvironmentSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "x-amplify-event-data" : { }
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "production" : {
            "type" : "boolean",
            "description" : "Production environment will be used to perform production processing or connect to a non-Axway gateway. This usage will count against your entitled quota.",
            "x-amplify-event-data" : { }
          },
          "axwayManaged" : {
            "type" : "boolean",
            "description" : "Axway Managed environment is hosted in the Axway Managed Cloud.",
            "x-amplify-event-data" : { },
            "x-amplify-index" : { }
          },
          "icon" : {
            "type" : "object",
            "description" : "Image for the Environment.",
            "properties" : {
              "contentType" : {
                "description" : "Content-Type of the image.",
                "type" : "string",
                "enum" : [ "image/jpeg", "image/png" ]
              },
              "data" : {
                "description" : "Base64 encoded image.",
                "type" : "string",
                "format" : "base64"
              }
            },
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.APIService" : {
        "description" : "Definition of APIService for version v1alpha1 in group management. \n\n Resource representing an Amplify Central API Service",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "APIService",
        "x-axway-plural" : "apiservices",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status", "details" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "ConsumerInstance",
            "scopeKind" : "Environment",
            "plural" : "consumerinstances",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Deployment",
            "scopeKind" : "Environment",
            "plural" : "deployments",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind APIService. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "APIService"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the APIService. APIService name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the APIService."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APIServiceSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APIServiceStatus"
          },
          "details" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APIServiceDetails"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.APIServiceSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the api service.",
            "x-amplify-event-data" : { }
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "catalog/Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "icon" : {
            "type" : "object",
            "description" : "Image for the APIService.",
            "properties" : {
              "contentType" : {
                "description" : "Content-Type of the image.",
                "type" : "string",
                "enum" : [ "image/jpeg", "image/png" ]
              },
              "data" : {
                "description" : "Base64 encoded image.",
                "type" : "string",
                "format" : "base64"
              }
            },
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.APIServiceStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "enum" : [ "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/management.v1alpha1.APIServiceStatus.Error"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/management.v1alpha1.APIServiceStatus.Error"
                }
              }
            }
          }
        },
        "additionalProperties" : true,
        "required" : [ "level" ]
      },
      "management.v1alpha1.APIServiceStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "management.v1alpha1.APIServiceDetails" : {
        "type" : "object",
        "properties" : {
          "specType" : {
            "type" : "string",
            "description" : "Specification type for the API Service.",
            "x-amplify-index" : { }
          }
        }
      },
      "management.v1alpha1.APIServiceRevision" : {
        "description" : "Definition of APIServiceRevision for version v1alpha1 in group management. \n\n Resource representing an Amplify Central API Service Revision",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "APIServiceRevision",
        "x-axway-plural" : "apiservicerevisions",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "ConsumerInstance",
            "scopeKind" : "Environment",
            "plural" : "consumerinstances",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind APIServiceRevision. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "APIServiceRevision"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the APIServiceRevision. APIServiceRevision name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the APIServiceRevision."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APIServiceRevisionSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.APIServiceRevisionSpec" : {
        "type" : "object",
        "properties" : {
          "apiService" : {
            "type" : "string",
            "x-amplify-kind-ref" : "APIService"
          },
          "definition" : {
            "type" : "object",
            "description" : "The api specification details.",
            "properties" : {
              "type" : {
                "type" : "string",
                "maxLength" : 32,
                "x-amplify-index" : { },
                "description" : "The type of the api specification.",
                "x-extensible-enum" : [ "oas3", "oas2", "wsdl", "protobuf", "asyncapi", "graphql-sdl" ]
              },
              "value" : {
                "type" : "string",
                "description" : "Base64 encoded value of the api specification.",
                "format" : "base64"
              },
              "contentType" : {
                "type" : "string",
                "description" : "content-type of the spec.",
                "pattern" : "^[-\\w.]+/[-\\w.]+$"
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "apiService" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.APIServiceInstance" : {
        "description" : "Definition of APIServiceInstance for version v1alpha1 in group management. \n\n Resource representing an Amplify Central API Service Instance",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "APIServiceInstance",
        "x-axway-plural" : "apiserviceinstances",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "ConsumerInstance",
            "scopeKind" : "Environment",
            "plural" : "consumerinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "Environment",
            "plural" : "credentialrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "AccessRequestDefinition",
            "scopeKind" : "Environment",
            "plural" : "accessrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind APIServiceInstance. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "APIServiceInstance"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the APIServiceInstance. APIServiceInstance name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the APIServiceInstance."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstanceSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APIServiceInstanceReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.APIServiceInstanceSpec" : {
        "type" : "object",
        "properties" : {
          "apiServiceRevision" : {
            "type" : "string",
            "x-amplify-kind-ref" : "APIServiceRevision"
          },
          "accessRequestDefinition" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AccessRequestDefinition",
            "x-amplify-kind-ref-type" : "soft"
          },
          "credentialRequestDefinitions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "CredentialRequestDefinition",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "endpoint" : {
            "type" : "array",
            "description" : "A list of locations where the api is deployed.",
            "items" : {
              "type" : "object",
              "properties" : {
                "host" : {
                  "type" : "string"
                },
                "port" : {
                  "type" : "integer"
                },
                "protocol" : {
                  "type" : "string"
                },
                "routing" : {
                  "type" : "object",
                  "properties" : {
                    "basePath" : {
                      "type" : "string",
                      "pattern" : "^/",
                      "description" : "The base path to the API. Example: '/api'."
                    },
                    "details" : {
                      "type" : "object",
                      "description" : "Specify any additional routing details needed",
                      "additionalProperties" : true
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "additionalProperties" : false,
              "required" : [ "host", "protocol" ]
            }
          }
        },
        "required" : [ "apiServiceRevision", "endpoint" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.APIServiceInstanceReferences" : {
        "type" : "object",
        "properties" : {
          "apiService" : {
            "type" : "string",
            "description" : "Reference to Amplify Central APIService",
            "x-amplify-kind-ref" : "APIService",
            "x-amplify-kind-ref-type" : "soft"
          }
        }
      },
      "management.v1alpha1.ConsumerInstance" : {
        "description" : "Definition of ConsumerInstance for version v1alpha1 in group management. \n\n Resource representing a Unified Catalog Item of type API",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ConsumerInstance",
        "x-axway-plural" : "consumerinstances",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status", "references" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "ConsumerSubscriptionDefinition",
            "scopeKind" : "Environment",
            "plural" : "consumersubscriptiondefs",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ConsumerInstance. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ConsumerInstance"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ConsumerInstance. ConsumerInstance name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ConsumerInstance."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstanceSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstanceStatus"
          },
          "references" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ConsumerInstanceReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.ConsumerInstanceSpec" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Maps to the name of the Catalog Item. If not provided, the resource title will be used.",
            "maxLength" : 100,
            "minLength" : 1
          },
          "apiServiceInstance" : {
            "type" : "string",
            "description" : "The name of an APIServiceInstance resource that specifies where the API is deployed.",
            "x-amplify-kind-ref" : "APIServiceInstance"
          },
          "owningTeam" : {
            "type" : "string",
            "description" : "Name of the team that owns the Catalog Item. If not provided, the Default team will be used.",
            "x-amplify-index" : { }
          },
          "description" : {
            "type" : "string",
            "description" : "Maps to the description of the Catalog Item. Defaults to the API service description.",
            "maxLength" : 350
          },
          "visibility" : {
            "type" : "string",
            "description" : "The visibility of the Catalog Item\n * PUBLIC - If Catalog Item is in PUBLISHED state, it will be visible to the entire organization.\n * RESTRICTED - If Catalog Item is in PUBLISHED state, it will be visible to the owning team and teams part of the Catalog Item Access Control List.\n",
            "enum" : [ "RESTRICTED", "PUBLIC" ]
          },
          "version" : {
            "type" : "string",
            "description" : "Version name for the revision.",
            "maxLength" : 255,
            "pattern" : "^(?!\\s).*(?<!\\s)$"
          },
          "state" : {
            "type" : "string",
            "description" : "Catalog Item state\n * UNPUBLISHED - Only developers in the owning team will be able to access the Catalog Item.\n * PUBLISHED - Developers and Consumers in the owning team and any additional team in the ACL will\nbe able to access the Catalog Item.\n",
            "enum" : [ "UNPUBLISHED", "PUBLISHED" ]
          },
          "status" : {
            "type" : "string",
            "description" : "A way to communicate the status of the service to consumers. Examples: DRAFT, BETA, GA",
            "maxLength" : 255
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            },
            "description" : "List of tags to be set on the Catalog Item. Max allowed tags for the Catalog Item is 80."
          },
          "icon" : {
            "type" : "object",
            "description" : "Image for the Catalog Item.\nIf not present, the icon on the APISevice will be used in the Catalog Item.",
            "properties" : {
              "contentType" : {
                "description" : "Content-Type of the image.",
                "type" : "string",
                "enum" : [ "image/jpeg", "image/png" ]
              },
              "data" : {
                "description" : "Base64 encoded image.",
                "type" : "string",
                "format" : "base64"
              }
            },
            "additionalProperties" : false
          },
          "documentation" : {
            "type" : "string",
            "description" : "Markdown documentation for the Catalog Item documentation."
          },
          "unstructuredDataProperties" : {
            "type" : "object",
            "description" : "The Catalog Item properties for unstructured definition subtypes.",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "Defines the unstructured data type. Example 'APIBuilderConnector' or 'SDK'."
              },
              "contentType" : {
                "type" : "string",
                "description" : "Defines the Content Type of the data."
              },
              "label" : {
                "type" : "string",
                "description" : "Short name for the unstructured data."
              },
              "fileName" : {
                "type" : "string",
                "description" : "File name used to be sent as part of the content disposition header for revision unstructured data download."
              },
              "data" : {
                "type" : "string",
                "format" : "base64",
                "description" : "Base64 encoded data for the Catalog Item revision content."
              }
            },
            "required" : [ "type", "contentType" ],
            "additionalProperties" : false
          },
          "additionalDataProperties" : {
            "type" : "object",
            "description" : "The Catalog Item properties for additional data.",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "Defines the unstructured data type. Example 'APIBuilderConnector' or 'SDK'."
              },
              "contentType" : {
                "type" : "string",
                "description" : "Defines the Content Type of the data."
              },
              "label" : {
                "type" : "string",
                "description" : "Short name for the unstructured data."
              },
              "fileName" : {
                "type" : "string",
                "description" : "File name used to be sent as part of the content disposition header for revision unstructured data download."
              },
              "data" : {
                "type" : "string",
                "format" : "base64",
                "description" : "Base64 encoded data for the Catalog Item revision content."
              }
            },
            "required" : [ "type", "contentType", "data" ],
            "additionalProperties" : false
          },
          "subscription" : {
            "type" : "object",
            "properties" : {
              "enabled" : {
                "type" : "boolean",
                "description" : "Defines if subscriptions are allowed on the Catalog Item."
              },
              "autoSubscribe" : {
                "type" : "boolean",
                "description" : "Defines if subscriptions need to be manually approved."
              },
              "subscriptionDefinition" : {
                "type" : "string",
                "x-amplify-kind-ref" : "ConsumerSubscriptionDefinition",
                "x-amplify-kind-ref-type" : "soft",
                "description" : "The name of a ConsumerSubscriptionDefinition kind that defines the schema and possible webhooks to get invoked."
              }
            },
            "additionalProperties" : false
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "catalog/Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.ConsumerInstanceStatus" : {
        "type" : "object",
        "properties" : {
          "phase" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "enum" : [ "Update", "Delete", "Create" ]
              },
              "level" : {
                "type" : "string",
                "description" : "The criticality of the last update",
                "x-amplify-index" : { },
                "enum" : [ "info", "error" ]
              },
              "transitionTime" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Time of the current phase."
              },
              "message" : {
                "type" : "string",
                "description" : "Description of the phase."
              }
            },
            "additionalProperties" : false,
            "required" : [ "name", "level", "transitionTime" ]
          }
        },
        "additionalProperties" : false,
        "required" : [ "phase" ]
      },
      "management.v1alpha1.ConsumerInstanceReferences" : {
        "type" : "object",
        "properties" : {
          "apiService" : {
            "type" : "string",
            "description" : "Reference to Amplify Central APIService",
            "x-amplify-kind-ref" : "APIService",
            "x-amplify-kind-ref-type" : "soft"
          },
          "apiServiceRevision" : {
            "type" : "string",
            "description" : "Reference to Amplify Central APIServiceRevision",
            "x-amplify-kind-ref" : "APIServiceRevision",
            "x-amplify-kind-ref-type" : "soft"
          }
        }
      },
      "management.v1alpha1.ConsumerSubscriptionDefinition" : {
        "description" : "Definition of ConsumerSubscriptionDefinition for version v1alpha1 in group management. \n\n Resource representing a Unified Catalog Item of type API.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ConsumerSubscriptionDefinition",
        "x-axway-plural" : "consumersubscriptiondefs",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "ConsumerInstance",
            "scopeKind" : "Environment",
            "plural" : "consumerinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "Webhook",
            "scopeKind" : "Environment",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ConsumerSubscriptionDefinition. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ConsumerSubscriptionDefinition"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ConsumerSubscriptionDefinition. ConsumerSubscriptionDefinition name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ConsumerSubscriptionDefinition."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ConsumerSubscriptionDefinitionSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.ConsumerSubscriptionDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "webhooks" : {
            "type" : "array",
            "description" : "List of Webhook kind resource names that dictates what webhooks will be invoked on subscription changes.",
            "items" : {
              "type" : "string",
              "description" : "Reference to the webhook to be triggered on subscription updates.",
              "x-amplify-kind-ref" : "Webhook",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "schema" : {
            "type" : "object",
            "description" : "Subscription definition properties to be used by the consumers.",
            "properties" : {
              "properties" : {
                "type" : "array",
                "description" : "Defines the subscription schema properties as key/value pairs.",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "key" : {
                      "type" : "string",
                      "description" : "The Catalog Item subscription spec key.\nFor API type subscriptions, the key needs to be 'profile'."
                    },
                    "value" : {
                      "type" : "object",
                      "description" : "JSON schema to specify data needed from consumers when subscriptions are created."
                    }
                  },
                  "required" : [ "key", "value" ],
                  "additionalProperties" : false
                }
              }
            },
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.Integration" : {
        "description" : "Definition of Integration for version v1alpha1 in group management. \n\n Resource representing a group of integration resources.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Integration",
        "x-axway-plural" : "integrations",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Integration. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Integration"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Integration. Integration name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Integration."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.IntegrationSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.IntegrationSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.ResourceHook" : {
        "description" : "Definition of ResourceHook for version v1alpha1 in group management. \n\n Listen to API Server resource lifecycle changes.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ResourceHook",
        "x-axway-plural" : "resourcehooks",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Integration",
          "plural" : "integrations"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "Webhook",
            "scopeKind" : "Integration",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ResourceHook. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ResourceHook"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ResourceHook. ResourceHook name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ResourceHook."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ResourceHookSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.ResourceHookSpec" : {
        "type" : "object",
        "properties" : {
          "triggers" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "group" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "description" : "Value for the group of the resource. Use \"*\" for any."
                },
                "scope" : {
                  "type" : "object",
                  "description" : "Resource scope trigger details.",
                  "properties" : {
                    "kind" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Value for the Kind of the scope of the resource. Use \"*\" for any."
                    },
                    "name" : {
                      "type" : "string",
                      "maxLength" : 100,
                      "pattern" : "^([\\*])|([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)",
                      "description" : "Name of the scope of the resource. Use \"*\" for any."
                    }
                  },
                  "additionalProperties" : false,
                  "required" : [ "kind", "name" ]
                },
                "kind" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "description" : "Value for the Kind of the resource. Use \"*\" for any."
                },
                "name" : {
                  "type" : "string",
                  "maxLength" : 100,
                  "pattern" : "^([\\*])|([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)",
                  "description" : "Name of the resource. Use \"*\" for any."
                },
                "type" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "description" : "Type of the operation for the tracked resources.",
                    "enum" : [ "created", "updated", "deleted" ]
                  }
                }
              },
              "required" : [ "kind", "name", "type", "group" ],
              "additionalProperties" : false
            }
          },
          "webhooks" : {
            "type" : "array",
            "description" : "List of Webhook kind resource names that dictates what webhooks will be invoked on matching triggers.",
            "items" : {
              "type" : "string",
              "description" : "Reference to webhooks to be invoked when a trigger matches.",
              "x-amplify-kind-ref" : "Webhook",
              "x-amplify-kind-ref-type" : "soft"
            }
          }
        },
        "required" : [ "triggers", "webhooks" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.K8SCluster" : {
        "description" : "Definition of K8SCluster for version v1alpha1 in group management. \n\n Resource representing a kubernetes cluster.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "K8SCluster",
        "x-axway-plural" : "k8sclusters",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "Mesh",
            "plural" : "meshes",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind K8SCluster. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "K8SCluster"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the K8SCluster. K8SCluster name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the K8SCluster."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.K8SClusterSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.K8SClusterSpec" : {
        "type" : "object",
        "properties" : {
          "mesh" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Mesh"
          }
        },
        "additionalProperties" : true
      },
      "management.v1alpha1.K8SResource" : {
        "description" : "Definition of K8SResource for version v1alpha1 in group management. \n\n Represents a Kubernetes resource in a mesh.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "K8SResource",
        "x-axway-plural" : "k8sresources",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "K8SCluster",
          "plural" : "k8sclusters"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "MeshWorkload",
            "scopeKind" : "Mesh",
            "plural" : "meshworkloads",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "MeshService",
            "scopeKind" : "Mesh",
            "plural" : "meshservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "ResourceDiscovery",
            "scopeKind" : "K8SCluster",
            "plural" : "resourcediscoveries",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind K8SResource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "K8SResource"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the K8SResource. K8SResource name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the K8SResource."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.K8SResourceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.K8SResourceSpec" : {
        "type" : "object",
        "properties" : {
          "resourceDiscovery" : {
            "type" : "string",
            "x-amplify-kind-ref" : "ResourceDiscovery"
          },
          "resourceVersion" : {
            "type" : "string"
          },
          "uid" : {
            "type" : "string"
          },
          "ownerReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "kind" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                }
              }
            }
          },
          "resourceSpec" : {
            "type" : "object"
          },
          "resourceStatus" : {
            "type" : "object"
          }
        },
        "additionalProperties" : {
          "type" : "object"
        }
      },
      "management.v1alpha1.ResourceDiscovery" : {
        "description" : "Definition of ResourceDiscovery for version v1alpha1 in group management. \n\n Resource controlling resource discoveries in a mesh.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ResourceDiscovery",
        "x-axway-plural" : "resourcediscoveries",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "K8SCluster",
          "plural" : "k8sclusters"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "K8SResource",
            "scopeKind" : "K8SCluster",
            "plural" : "k8sresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ResourceDiscovery. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ResourceDiscovery"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ResourceDiscovery. ResourceDiscovery name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ResourceDiscovery."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ResourceDiscoverySpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.ResourceDiscoverySpec" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string"
          },
          "kind" : {
            "type" : "string"
          },
          "group" : {
            "type" : "string"
          },
          "namespaceFilter" : {
            "type" : "object",
            "description" : "Namespace filter.",
            "properties" : {
              "names" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "resourceFilter" : {
            "type" : "object",
            "description" : "Resource filter.",
            "properties" : {
              "names" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "matchLabels" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                }
              }
            }
          },
          "keepSpecFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "keepStatusFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ignoreLabels" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "extraAttributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "management.v1alpha1.Mesh" : {
        "description" : "Definition of Mesh for version v1alpha1 in group management. \n\n Resource representing a Mesh.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Mesh",
        "x-axway-plural" : "meshes",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "K8SCluster",
            "plural" : "k8sclusters",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Mesh. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Mesh"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Mesh. Mesh name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Mesh."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.MeshSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.MeshSpec" : {
        "type" : "object",
        "additionalProperties" : false
      },
      "management.v1alpha1.SpecDiscovery" : {
        "description" : "Definition of SpecDiscovery for version v1alpha1 in group management. \n\n Configures API Discovery in a mesh.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "SpecDiscovery",
        "x-axway-plural" : "specdiscoveries",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "K8SCluster",
          "plural" : "k8sclusters"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "APISpec",
            "scopeKind" : "K8SCluster",
            "plural" : "apispecs",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind SpecDiscovery. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "SpecDiscovery"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the SpecDiscovery. SpecDiscovery name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the SpecDiscovery."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.SpecDiscoverySpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.SpecDiscoverySpec" : {
        "type" : "object",
        "properties" : {
          "namespaceFilter" : {
            "type" : "object",
            "description" : "a list of namespace names to follow. If not set, follows all namespaces.",
            "properties" : {
              "names" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "resourceFilter" : {
            "type" : "object",
            "description" : "Filter pod resources by name or labels.",
            "properties" : {
              "names" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "matchLabels" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                }
              }
            }
          },
          "targets" : {
            "type" : "object",
            "properties" : {
              "exactPaths" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "path" : {
                      "type" : "string",
                      "description" : "path to api definition",
                      "example" : "/apidocs"
                    },
                    "headers" : {
                      "type" : "object",
                      "description" : "headers to add to the query",
                      "additionalProperties" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              },
              "fromAnnotation" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "template" : {
                      "type" : "string",
                      "description" : "annotation template. golang template that's fed the following object for each declared port of the pod: {\"name\", \"number\"}",
                      "example" : "[my.path.annotation/{{ .port.Name }}]"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "management.v1alpha1.APISpec" : {
        "description" : "Definition of APISpec for version v1alpha1 in group management. \n\n An API Spec",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "APISpec",
        "x-axway-plural" : "apispecs",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "K8SCluster",
          "plural" : "k8sclusters"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "MeshWorkload",
            "scopeKind" : "Mesh",
            "plural" : "meshworkloads",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "MeshService",
            "scopeKind" : "Mesh",
            "plural" : "meshservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "SpecDiscovery",
            "scopeKind" : "K8SCluster",
            "plural" : "specdiscoveries",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind APISpec. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "APISpec"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the APISpec. APISpec name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the APISpec."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APISpecSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.APISpecSpec" : {
        "type" : "object",
        "properties" : {
          "specDiscoveryRef" : {
            "type" : "string",
            "x-amplify-kind-ref" : "SpecDiscovery"
          },
          "definition" : {
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "The type of the api specification.",
                "x-extensible-enum" : [ "oas3", "oas2", "wsdl", "protobuf", "asyncapi", "graphql-sdl" ]
              },
              "value" : {
                "type" : "string",
                "description" : "Base64 encoded value of the api specification.",
                "format" : "base64"
              },
              "hash" : {
                "type" : "string",
                "description" : "Consistent hash of the value.",
                "format" : "base64"
              }
            }
          },
          "endpoints" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "The type of the endpoint."
                },
                "host" : {
                  "type" : "string",
                  "description" : "The host of the pod <namespace>.<pod-name>"
                },
                "port" : {
                  "type" : "string",
                  "description" : "The port of the pod on which this spec was discovered."
                },
                "path" : {
                  "type" : "string",
                  "description" : "The path on which this spec was discovered."
                },
                "labels" : {
                  "type" : "object",
                  "description" : "The labels for the pod this spec was discovered on.",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "management.v1alpha1.MeshWorkload" : {
        "description" : "Definition of MeshWorkload for version v1alpha1 in group management. \n\n A MeshWorkload retains useful information from one or a group of pods managed by the same k8s workload.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "MeshWorkload",
        "x-axway-plural" : "meshworkloads",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Mesh",
          "plural" : "meshes"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "MeshService",
            "scopeKind" : "Mesh",
            "plural" : "meshservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "APISpec",
            "scopeKind" : "K8SCluster",
            "plural" : "apispecs",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "K8SResource",
            "scopeKind" : "K8SCluster",
            "plural" : "k8sresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind MeshWorkload. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "MeshWorkload"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the MeshWorkload. MeshWorkload name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the MeshWorkload."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.MeshWorkloadSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.MeshWorkloadSpec" : {
        "type" : "object",
        "properties" : {
          "resources" : {
            "type" : "array",
            "description" : "References to k8sresources making up the workload.",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "K8SCluster/K8SResource",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "labels" : {
            "type" : "object",
            "description" : "Labels from the k8sresources making up the workload.",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "ports" : {
            "type" : "array",
            "description" : "Discovered ports on the workload.",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "description" : "The name of the port.",
                  "type" : "string"
                },
                "port" : {
                  "description" : "Port number.",
                  "type" : "integer"
                },
                "specs" : {
                  "description" : "API specs exposed by this workload on this port.",
                  "type" : "object",
                  "properties" : {
                    "discoveredSpecs" : {
                      "description" : "Array of references to apispecs discovered\nby the discovery agent.\n",
                      "type" : "array",
                      "items" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "K8SCluster/APISpec",
                        "x-amplify-kind-ref-type" : "soft"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties" : true
      },
      "management.v1alpha1.MeshService" : {
        "description" : "Definition of MeshService for version v1alpha1 in group management. \n\n A MeshService aggregates all apis exposed by workloads under the same authority.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "MeshService",
        "x-axway-plural" : "meshservices",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Mesh",
          "plural" : "meshes"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "MeshWorkload",
            "scopeKind" : "Mesh",
            "plural" : "meshworkloads",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APISpec",
            "scopeKind" : "K8SCluster",
            "plural" : "apispecs",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "K8SResource",
            "scopeKind" : "K8SCluster",
            "plural" : "k8sresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind MeshService. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "MeshService"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the MeshService. MeshService name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the MeshService."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.MeshServiceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.MeshServiceSpec" : {
        "type" : "object",
        "properties" : {
          "selector" : {
            "type" : "object",
            "description" : "The labels used by the service to match workloads it exposes.",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "resource" : {
            "type" : "string",
            "description" : "Reference to the K8SResource derived from the Kubernetes Service.",
            "x-amplify-kind-ref" : "K8SCluster/K8SResource",
            "x-amplify-kind-ref-type" : "soft"
          },
          "workloads" : {
            "type" : "array",
            "description" : "References to workloads exposed by the service.",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "MeshWorkload",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "ports" : {
            "type" : "array",
            "description" : "Details per port.",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string"
                },
                "port" : {
                  "type" : "integer"
                },
                "endpoints" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "workloads" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      },
                      "subset" : {
                        "type" : "object",
                        "description" : "A subset is the set of labels one or more workloads has outside the labels in the service selector.",
                        "additionalProperties" : {
                          "type" : "string"
                        }
                      },
                      "specs" : {
                        "description" : "Array of references to apispecs discovered\nby the discovery agent.\n",
                        "type" : "array",
                        "items" : {
                          "type" : "string",
                          "x-amplify-kind-ref" : "K8SCluster/APISpec",
                          "x-amplify-kind-ref-type" : "soft"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties" : true
      },
      "management.v1alpha1.MeshDiscovery" : {
        "description" : "Definition of MeshDiscovery for version v1alpha1 in group management. \n\n A MeshDiscovery is used to promote services discovered in a mesh to the provider model.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "MeshDiscovery",
        "x-axway-plural" : "meshdiscoveries",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Mesh",
          "plural" : "meshes"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "Environment",
            "plural" : "environments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind MeshDiscovery. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "MeshDiscovery"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the MeshDiscovery. MeshDiscovery name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the MeshDiscovery."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.MeshDiscoverySpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.MeshDiscoverySpec" : {
        "type" : "object",
        "properties" : {
          "environmentRef" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Environment",
            "description" : "Target environment."
          }
        },
        "required" : [ "environmentRef" ],
        "additionalProperties" : true
      },
      "management.v1alpha1.AssetMappingTemplate" : {
        "description" : "Definition of AssetMappingTemplate for version v1alpha1 in group management. \n\n An AssetMappingTemplate to detect and automatically promote APIServices to the assets catalog model.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AssetMappingTemplate",
        "x-axway-plural" : "assetmappingtemplates",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AssetMapping",
            "scopeKind" : "Environment",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetMapping",
            "scopeKind" : "Asset",
            "plural" : "assetmappings",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AssetMappingTemplate. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AssetMappingTemplate"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AssetMappingTemplate. AssetMappingTemplate name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AssetMappingTemplate."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingTemplateSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AssetMappingTemplateSpec" : {
        "type" : "object",
        "properties" : {
          "filters" : {
            "type" : "array",
            "description" : "A list of filters for the API Service resource on which the template applies.",
            "items" : {
              "type" : "object",
              "properties" : {
                "apiService" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string",
                        "description" : "The name of the API Service."
                      },
                      "attributes" : {
                        "type" : "object",
                        "description" : "Attributes used to filter the APIServiceRevisions for the API Service on which the template applies.",
                        "additionalProperties" : {
                          "type" : "string"
                        }
                      },
                      "apiServiceRevision" : {
                        "type" : "object",
                        "properties" : {
                          "attributes" : {
                            "type" : "object",
                            "description" : "Attributes used to filter the APIServiceRevisions for the API Service on which the template applies.",
                            "additionalProperties" : {
                              "type" : "string"
                            }
                          },
                          "apiServiceInstance" : {
                            "type" : "object",
                            "properties" : {
                              "attributes" : {
                                "type" : "object",
                                "description" : "Attributes used to filter the APIServiceInstances for the API Service on which the template applies.",
                                "additionalProperties" : {
                                  "type" : "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "stage" : {
                  "type" : "string",
                  "description" : "name of the stage",
                  "maxLength" : 100
                },
                "categories" : {
                  "type" : "array",
                  "description" : "list of categories for the asset.",
                  "items" : {
                    "type" : "string",
                    "x-amplify-kind-ref" : "catalog/Category",
                    "x-amplify-kind-ref-type" : "soft"
                  }
                },
                "asset" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "description" : "name of the asset or a template for name"
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestDefinition" : {
        "description" : "Definition of AccessRequestDefinition for version v1alpha1 in group management. \n\n Resource representing requirments for accessing an APIServiceInstance",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AccessRequestDefinition",
        "x-axway-plural" : "accessrequestdefinitions",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "webhooks" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "assetrequestdefinitions",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "Webhook",
            "scopeKind" : "Environment",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AccessRequestDefinition. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AccessRequestDefinition"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AccessRequestDefinition. AccessRequestDefinition name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AccessRequestDefinition."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinitionSpec"
          },
          "webhooks" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestDefinitionWebhooks"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AccessRequestDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "schema" : {
            "type" : "object",
            "description" : "JSON Schema draft \\#7 for defining the AccessRequest properties needed to get access to an APIServiceInstance."
          },
          "provision" : {
            "type" : "object",
            "properties" : {
              "schema" : {
                "type" : "object",
                "description" : "JSON Schema draft \\#7 for describing the data to be sent back after access has been provisioned."
              }
            },
            "required" : [ "schema" ],
            "additionalProperties" : false
          }
        },
        "required" : [ "schema" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestDefinitionWebhooks" : {
        "type" : "array",
        "items" : {
          "type" : "string",
          "description" : "Webhooks to invoke on AccessRequests",
          "x-amplify-kind-ref" : "Webhook",
          "x-amplify-kind-ref-type" : "soft"
        }
      },
      "management.v1alpha1.AccessRequest" : {
        "description" : "Definition of AccessRequest for version v1alpha1 in group management. \n\n Resource representing an Access Request for an APIServiceInstance",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AccessRequest",
        "x-axway-plural" : "accessrequests",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "data", "status", "references" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "ProductPlan",
            "plural" : "productplans",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Subscription",
            "plural" : "subscriptions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "PublishedProduct",
            "scopeKind" : "Marketplace",
            "plural" : "publishedproducts",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Application",
            "plural" : "applications",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Quota",
            "scopeKind" : "ProductPlan",
            "plural" : "quotas",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "ManagedApplication",
            "scopeKind" : "Environment",
            "plural" : "managedapplications",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AccessRequest. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AccessRequest"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AccessRequest. AccessRequest name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AccessRequest."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestSpec"
          },
          "data" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestData"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestStatus"
          },
          "references" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AccessRequestSpec" : {
        "type" : "object",
        "properties" : {
          "apiServiceInstance" : {
            "type" : "string",
            "description" : "The name of an APIServiceInstance resource that specifies where the API is deployed.",
            "x-amplify-kind-ref" : "APIServiceInstance",
            "x-amplify-kind-ref-type" : "hard"
          },
          "managedApplication" : {
            "type" : "string",
            "description" : "The name of an ManagedApplication resource that groups set of credentials.",
            "x-amplify-kind-ref" : "ManagedApplication",
            "x-amplify-kind-ref-type" : "hard"
          },
          "data" : {
            "type" : "object",
            "description" : "The value that matches the AccessRequestDefinition schema linked to the referenced APIServiceInstance."
          },
          "quota" : {
            "type" : "object",
            "description" : "Quota information for accessing the api.",
            "properties" : {
              "limit" : {
                "type" : "integer",
                "description" : "The limit of the allowed quota for the access request."
              },
              "interval" : {
                "type" : "string",
                "enum" : [ "annually", "monthly", "weekly", "daily" ]
              }
            },
            "required" : [ "limit", "interval" ]
          }
        },
        "required" : [ "apiServiceInstance", "data", "managedApplication" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestData" : {
        "type" : "object",
        "description" : "Data matching the provisioning schema from the AccessRequestDefinition"
      },
      "management.v1alpha1.AccessRequestStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.AccessRequestReferences" : {
        "type" : "array",
        "items" : {
          "oneOf" : [ {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.AssetRequest"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Application"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Subscription"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Product"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.ProductPlan"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.PublishedProduct"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Quota"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.AssetResource"
          }, {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.ProductRelease"
          } ],
          "discriminator" : {
            "propertyName" : "kind",
            "mapping" : {
              "AssetRequest" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.AssetRequest",
              "Application" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Application",
              "Subscription" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Subscription",
              "Product" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Product",
              "ProductPlan" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.ProductPlan",
              "PublishedProduct" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.PublishedProduct",
              "Quota" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.Quota",
              "AssetResource" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.AssetResource",
              "ProductRelease" : "#/components/schemas/management.v1alpha1.AccessRequestReferences.ProductRelease"
            }
          }
        }
      },
      "management.v1alpha1.AccessRequestReferences.AssetRequest" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "AssetRequest" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/Application/AssetRequest"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.Application" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Application" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/Application"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.Subscription" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Subscription" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/Subscription"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.Product" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Product" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/Product"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.ProductPlan" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "ProductPlan" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/ProductPlan"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.PublishedProduct" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "PublishedProduct" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/Marketplace/PublishedProduct"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.Quota" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Quota" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/ProductPlan/Quota"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.AssetResource" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "AssetResource" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/AssetRelease/AssetResource"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AccessRequestReferences.ProductRelease" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "ProductRelease" ]
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "catalog/ProductRelease"
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.Deployment" : {
        "description" : "Definition of Deployment for version v1alpha1 in group management. \n\n Deployment of a Virtual API in an Environment.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Deployment",
        "x-axway-plural" : "deployments",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AmplifyRuntimeConfig",
            "scopeKind" : "Environment",
            "plural" : "ampruntimeconfigs",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "VirtualHost",
            "scopeKind" : "Environment",
            "plural" : "virtualhosts",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "VirtualAPIRelease",
            "plural" : "virtualapireleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "VirtualAPI",
            "plural" : "virtualapis",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Deployment. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Deployment"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Deployment. Deployment name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Deployment."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.DeploymentSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/management.v1alpha1.DeploymentReferences"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.DeploymentStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.DeploymentSpec" : {
        "type" : "object",
        "properties" : {
          "virtualAPIRelease" : {
            "type" : "string",
            "description" : "The name of an APIServiceInstance resource that specifies where the API is deployed.",
            "x-amplify-kind-ref" : "VirtualAPIRelease",
            "x-amplify-kind-ref-type" : "hard"
          },
          "virtualHost" : {
            "type" : "string",
            "description" : "The VirtualHost instance used for this deployment.",
            "x-amplify-index" : { },
            "x-amplify-kind-ref" : "VirtualHost",
            "x-amplify-kind-ref-type" : "hard"
          }
        },
        "required" : [ "virtualAPIRelease", "virtualHost" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.DeploymentReferences" : {
        "type" : "object",
        "properties" : {
          "apiService" : {
            "type" : "string",
            "description" : "Reference to the API Service that got created from this deployment.",
            "x-amplify-kind-ref" : "APIService",
            "x-amplify-kind-ref-type" : "soft"
          },
          "virtualAPI" : {
            "type" : "string",
            "description" : "Reference to the Virtual API Service that is bound to this deployment.",
            "x-amplify-index" : { },
            "x-amplify-kind-ref" : "VirtualAPI",
            "x-amplify-kind-ref-type" : "soft"
          }
        }
      },
      "management.v1alpha1.DeploymentStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error", "ConflictError" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/management.v1alpha1.DeploymentStatus.Error"
              }, {
                "$ref" : "#/components/schemas/management.v1alpha1.DeploymentStatus.ConflictError"
              }, {
                "$ref" : "#/components/schemas/management.v1alpha1.DeploymentStatus.Success"
              }, {
                "$ref" : "#/components/schemas/management.v1alpha1.DeploymentStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/management.v1alpha1.DeploymentStatus.Error",
                  "ConflictError" : "#/components/schemas/management.v1alpha1.DeploymentStatus.ConflictError",
                  "Success" : "#/components/schemas/management.v1alpha1.DeploymentStatus.Success",
                  "Pending" : "#/components/schemas/management.v1alpha1.DeploymentStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.DeploymentStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occurred."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the pending status"
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "management.v1alpha1.DeploymentStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occurred."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "management.v1alpha1.DeploymentStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "management.v1alpha1.DeploymentStatus.ConflictError" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "ConflictError" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the conflict error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the error occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "management.v1alpha1.AmplifyConfig" : {
        "description" : "Definition of AmplifyConfig for version v1alpha1 in group management. \n\n Configuration for the Amplify Gateway within the environment.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AmplifyConfig",
        "x-axway-plural" : "ampconfigs",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AmplifyRuntimeConfig",
            "scopeKind" : "Environment",
            "plural" : "ampruntimeconfigs",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AmplifyConfig. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AmplifyConfig"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AmplifyConfig. AmplifyConfig name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AmplifyConfig."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyConfigSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AmplifyConfigSpec" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "object",
            "description" : "The listener address configuration.",
            "properties" : {
              "interface" : {
                "type" : "string",
                "description" : "The listener interface",
                "maxLength" : 253,
                "minLength" : 1
              },
              "port" : {
                "type" : "integer",
                "description" : "The listener exposed port",
                "minimum" : 1,
                "maximum" : 65535
              }
            },
            "required" : [ "interface", "port" ]
          }
        },
        "required" : [ "address" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AmplifyRuntimeConfig" : {
        "description" : "Definition of AmplifyRuntimeConfig for version v1alpha1 in group management. \n\n The Runtime configuration for the Amplify Gateway in the environment.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AmplifyRuntimeConfig",
        "x-axway-plural" : "ampruntimeconfigs",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "AmplifyConfig",
            "scopeKind" : "Environment",
            "plural" : "ampconfigs",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Deployment",
            "scopeKind" : "Environment",
            "plural" : "deployments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AmplifyRuntimeConfig. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AmplifyRuntimeConfig"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AmplifyRuntimeConfig. AmplifyRuntimeConfig name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AmplifyRuntimeConfig."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfigSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyRuntimeConfigStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AmplifyRuntimeConfigSpec" : {
        "type" : "object",
        "properties" : {
          "runtimeConfig" : {
            "type" : "object",
            "description" : "The runtime config.",
            "additionalProperties" : { }
          },
          "amplifyConfig" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AmplifyConfig",
            "x-amplify-kind-ref-type" : "hard"
          },
          "externalSecrets" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "deployments" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "Deployment",
              "x-amplify-kind-ref-type" : "soft"
            }
          }
        },
        "required" : [ "runtimeConfig", "amplifyConfig" ]
      },
      "management.v1alpha1.AmplifyRuntimeConfigStatus" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "enum" : [ "pending", "deployed", "failedDeploy" ]
          },
          "message" : {
            "type" : "string",
            "description" : "Description of the phase.",
            "maxLength" : 253,
            "minLength" : 1
          }
        },
        "required" : [ "name" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.VirtualHost" : {
        "description" : "Definition of VirtualHost for version v1alpha1 in group management. \n\n The Virtual Host configured in the environment.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "VirtualHost",
        "x-axway-plural" : "virtualhosts",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "Deployment",
            "scopeKind" : "Environment",
            "plural" : "deployments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "ExternalSecret",
            "scopeKind" : "Environment",
            "plural" : "externalsecrets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "Secret",
            "scopeKind" : "Environment",
            "plural" : "secrets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind VirtualHost. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "VirtualHost"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the VirtualHost. VirtualHost name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the VirtualHost."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualHostSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.VirtualHostSpec" : {
        "type" : "object",
        "properties" : {
          "domain" : {
            "type" : "string",
            "description" : "The fully qualifield domain name as described in RFC 1035",
            "maxLength" : 253,
            "minLength" : 4,
            "pattern" : "^(?!.*(-)\\1+)(?:[a-zA-Z]{1}[a-zA-Z0-9-]{0,62}(?<!-)\\.)+[a-zA-Z][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$"
          },
          "secret" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualHostSpec.SecretRef"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualHostSpec.ExternalSecretRef"
            } ],
            "discriminator" : {
              "propertyName" : "kind",
              "mapping" : {
                "Secret" : "#/components/schemas/management.v1alpha1.VirtualHostSpec.SecretRef",
                "ExternalSecret" : "#/components/schemas/management.v1alpha1.VirtualHostSpec.ExternalSecretRef"
              }
            }
          }
        },
        "required" : [ "domain", "secret" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.VirtualHostSpec.ExternalSecretRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "ExternalSecret" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "ExternalSecret",
            "x-amplify-kind-ref-type" : "soft"
          }
        },
        "required" : [ "kind", "name" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.VirtualHostSpec.SecretRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "Secret" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Secret",
            "x-amplify-kind-ref-type" : "soft"
          }
        },
        "required" : [ "kind", "name" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.ManagedApplication" : {
        "description" : "Definition of ManagedApplication for version v1alpha1 in group management. \n\n Defines group of credentials.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ManagedApplication",
        "x-axway-plural" : "managedapplications",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "marketplace", "references", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Credential",
            "scopeKind" : "Environment",
            "plural" : "credentials",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Marketplace",
            "plural" : "marketplaces",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Application",
            "plural" : "applications",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ManagedApplication. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ManagedApplication"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ManagedApplication. ManagedApplication name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ManagedApplication."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplicationSpec"
          },
          "marketplace" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplicationMarketplace"
          },
          "references" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplicationReferences"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ManagedApplicationStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.ManagedApplicationSpec" : {
        "type" : "object",
        "properties" : {
          "security" : {
            "type" : "object",
            "properties" : {
              "encryptionKey" : {
                "type" : "string",
                "description" : "public key to be used to encrypt the credentials linked to this Managed Application."
              },
              "encryptionAlgorithm" : {
                "type" : "string",
                "enum" : [ "RSA-OAEP", "PKCS" ]
              },
              "encryptionHash" : {
                "type" : "string",
                "enum" : [ "SHA256" ]
              }
            },
            "required" : [ "encryptionKey" ]
          }
        }
      },
      "management.v1alpha1.ManagedApplicationMarketplace" : {
        "type" : "object",
        "description" : "Details about the marketplace Application.",
        "required" : [ "name", "resource" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the Marketplace.",
            "x-amplify-kind-ref" : "catalog/Marketplace",
            "x-amplify-kind-ref-type" : "hard"
          },
          "resource" : {
            "type" : "object",
            "description" : "The Marketplace Application resource details.",
            "required" : [ "metadata" ],
            "properties" : {
              "metadata" : {
                "type" : "object",
                "description" : "Marketplace Application metadata.",
                "properties" : {
                  "createUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  },
                  "modifyUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  }
                },
                "additionalProperties" : false
              },
              "owner" : {
                "description" : "Owner of the Application.",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "description" : "The type of the owner.",
                    "enum" : [ "team" ]
                  },
                  "id" : {
                    "type" : "string",
                    "description" : "Id of the owner of the resource.",
                    "maxLength" : 36,
                    "x-amplify-index" : { }
                  },
                  "organization" : {
                    "type" : "object",
                    "description" : "Organization details.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "Id of the organization.",
                        "x-amplify-index" : { }
                      }
                    },
                    "required" : [ "id" ],
                    "additionalProperties" : false
                  }
                },
                "required" : [ "organization" ],
                "additionalProperties" : false
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.ManagedApplicationReferences" : {
        "type" : "object",
        "properties" : {
          "application" : {
            "type" : "string",
            "description" : "Reference to Application resource",
            "x-amplify-kind-ref" : "catalog/Application"
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.ManagedApplicationStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : true
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.Credential" : {
        "description" : "Definition of Credential for version v1alpha1 in group management. \n\n Defines group of credentials.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Credential",
        "x-axway-plural" : "credentials",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references", "data", "state", "policies", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Credential",
            "scopeKind" : "Application",
            "plural" : "credentials",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "Environment",
            "plural" : "credentialrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Application",
            "plural" : "applications",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "ManagedApplication",
            "scopeKind" : "Environment",
            "plural" : "managedapplications",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Credential. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Credential"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Credential. Credential name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Credential."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialReferences"
          },
          "data" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialData"
          },
          "state" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialState"
          },
          "policies" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialPolicies"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.CredentialSpec" : {
        "type" : "object",
        "properties" : {
          "credentialRequestDefinition" : {
            "type" : "string",
            "description" : "Reference to Credential Request Definition resource",
            "x-amplify-kind-ref" : "CredentialRequestDefinition"
          },
          "managedApplication" : {
            "type" : "string",
            "description" : "Reference to the ManagedApplication for which the Credential belongs to",
            "x-amplify-kind-ref" : "ManagedApplication"
          },
          "data" : {
            "type" : "object",
            "description" : "data matching the credential request definition schema."
          },
          "state" : {
            "type" : "object",
            "description" : "Desired state of the Credential.",
            "properties" : {
              "name" : {
                "type" : "string",
                "x-amplify-index" : { },
                "enum" : [ "active", "inactive" ]
              },
              "reason" : {
                "type" : "string",
                "description" : "Additional info on the desired state.",
                "maxLength" : 350
              },
              "rotate" : {
                "type" : "boolean",
                "description" : "Defines if credential needs to be rotated."
              }
            },
            "additionalProperties" : false,
            "required" : [ "name" ]
          }
        },
        "required" : [ "credentialRequestDefinition", "managedApplication", "data" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.CredentialReferences" : {
        "type" : "object",
        "properties" : {
          "application" : {
            "type" : "string",
            "description" : "Name of the catalog Application for which the initial Credential was generated",
            "x-amplify-kind-ref" : "catalog/Application",
            "x-amplify-kind-ref-type" : "soft"
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.CredentialData" : {
        "type" : "object",
        "description" : "data matching the provisioning schema from CredentialRequestDefinition."
      },
      "management.v1alpha1.CredentialState" : {
        "type" : "object",
        "description" : "Current state of the Credential.",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "active", "inactive" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Additional info on the state.",
            "maxLength" : 350
          }
        },
        "additionalProperties" : false,
        "required" : [ "name" ]
      },
      "management.v1alpha1.CredentialPolicies" : {
        "type" : "object",
        "properties" : {
          "expiry" : {
            "type" : "object",
            "properties" : {
              "timestamp" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Time when the Credential is set to be expired.",
                "x-amplify-index" : { }
              }
            },
            "additionalProperties" : false,
            "required" : [ "timestamp" ]
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.CredentialStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.VirtualAPI" : {
        "description" : "Definition of VirtualAPI for version v1alpha1 in group management. \n\n A virtualized API definition.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "VirtualAPI",
        "x-axway-plural" : "virtualapis",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon", "state", "status" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "VirtualAPIRelease",
            "plural" : "virtualapireleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Deployment",
            "scopeKind" : "Environment",
            "plural" : "deployments",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind VirtualAPI. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "VirtualAPI"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the VirtualAPI. VirtualAPI name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the VirtualAPI."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPISpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIIcon"
          },
          "state" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIState"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.VirtualAPISpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the asset.",
            "maxLength" : 350
          },
          "type" : {
            "type" : "string",
            "x-extensible-enum" : [ "REST" ]
          },
          "api" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPISpec.OasDefinition"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPISpec.GraphQLDefinition"
            } ]
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.VirtualAPIIcon" : {
        "type" : "string",
        "description" : "Image for the virtual API expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "management.v1alpha1.VirtualAPIState" : {
        "type" : "string",
        "x-extensible-enum" : [ "draft", "active", "archived" ]
      },
      "management.v1alpha1.VirtualAPIStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIStatus.Error"
              }, {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIStatus.Success"
              }, {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/management.v1alpha1.VirtualAPIStatus.Error",
                  "Success" : "#/components/schemas/management.v1alpha1.VirtualAPIStatus.Success",
                  "Pending" : "#/components/schemas/management.v1alpha1.VirtualAPIStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.VirtualAPIStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the pending status"
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "management.v1alpha1.VirtualAPIStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "management.v1alpha1.VirtualAPIStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "management.v1alpha1.VirtualAPISpec.OasDefinition" : {
        "description" : "The OAS specification.",
        "type" : "object",
        "properties" : {
          "oas" : {
            "type" : "object"
          }
        },
        "additionalProperties" : false,
        "required" : [ "oas" ]
      },
      "management.v1alpha1.VirtualAPISpec.GraphQLDefinition" : {
        "description" : "The GraphQL information.",
        "type" : "object",
        "properties" : {
          "graphql" : {
            "description" : "Base64 encoded value of the GraphQL specification.",
            "type" : "string",
            "format" : "base64",
            "minLength" : 1
          },
          "endpoint" : {
            "description" : "The url for the service. For example, https://myservice.com/graphql",
            "type" : "string",
            "pattern" : "^(http|https):\\/\\/(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])?(?::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?((\\/|\\?)\\S+)?$",
            "minLength" : 1
          },
          "operations" : {
            "description" : "The supported operations, namely GET and/or POST",
            "type" : "array",
            "uniqueItems" : true,
            "minItems" : 1,
            "maxItems" : 2,
            "items" : {
              "type" : "string",
              "enum" : [ "GET", "POST" ]
            }
          }
        },
        "required" : [ "graphql", "endpoint", "operations" ]
      },
      "management.v1alpha1.VirtualAPIRelease" : {
        "description" : "Definition of VirtualAPIRelease for version v1alpha1 in group management. \n\n A released version of a virtualized API definition.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "VirtualAPIRelease",
        "x-axway-plural" : "virtualapireleases",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon", "state" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "Deployment",
            "scopeKind" : "Environment",
            "plural" : "deployments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "ReleaseTag",
            "scopeKind" : "VirtualAPI",
            "plural" : "releasetags",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "VirtualAPI",
            "plural" : "virtualapis",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind VirtualAPIRelease. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "VirtualAPIRelease"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the VirtualAPIRelease. VirtualAPIRelease name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the VirtualAPIRelease."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIReleaseSpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIReleaseIcon"
          },
          "state" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualAPIReleaseState"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.VirtualAPIReleaseSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the asset.",
            "maxLength" : 350
          },
          "type" : {
            "type" : "string",
            "x-extensible-enum" : [ "REST" ]
          },
          "version" : {
            "type" : "string",
            "description" : "version of the virtual API release.",
            "maxLength" : 30,
            "minLength" : 1
          },
          "virtualapi" : {
            "type" : "string",
            "x-amplify-kind-ref" : "VirtualAPI",
            "x-amplify-kind-ref-type" : "hard"
          },
          "releaseTag" : {
            "type" : "string",
            "x-amplify-kind-ref" : "VirtualAPI/ReleaseTag",
            "x-amplify-kind-ref-type" : "soft"
          }
        },
        "required" : [ "virtualapi", "type", "version" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.VirtualAPIReleaseIcon" : {
        "type" : "string",
        "description" : "Image for the virtual API expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "management.v1alpha1.VirtualAPIReleaseState" : {
        "type" : "string",
        "x-extensible-enum" : [ "active", "deprecated", "archived" ]
      },
      "catalog.v1.Marketplace" : {
        "description" : "Definition of Marketplace for version v1 in group catalog. \n\n Resource representing an Amplify Central Marketplace.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "Marketplace",
        "x-axway-plural" : "marketplaces",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Application",
            "plural" : "applications",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Credential",
            "scopeKind" : "Application",
            "plural" : "credentials",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Subscription",
            "plural" : "subscriptions",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "ManagedApplication",
            "scopeKind" : "Environment",
            "plural" : "managedapplications",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Marketplace. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Marketplace"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Marketplace. Marketplace name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Marketplace."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.MarketplaceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.MarketplaceSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the Marketplace.",
            "maxLength" : 350
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.Marketplace" : {
        "description" : "Definition of Marketplace for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Marketplace.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Marketplace",
        "x-axway-plural" : "marketplaces",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Application",
            "plural" : "applications",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Credential",
            "scopeKind" : "Application",
            "plural" : "credentials",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Subscription",
            "plural" : "subscriptions",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "ManagedApplication",
            "scopeKind" : "Environment",
            "plural" : "managedapplications",
            "subResourceName" : "marketplace",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Marketplace. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Marketplace"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Marketplace. Marketplace name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Marketplace."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.MarketplaceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.MarketplaceSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the Marketplace.",
            "maxLength" : 350
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.PublishedProduct" : {
        "description" : "Definition of PublishedProduct for version v1alpha1 in group catalog. \n\n Resource representing a Product reference",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "PublishedProduct",
        "x-axway-plural" : "publishedproducts",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references" ],
        "x-axway-scopes" : [ {
          "kind" : "Marketplace",
          "plural" : "marketplaces"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind PublishedProduct. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "PublishedProduct"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the PublishedProduct. PublishedProduct name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the PublishedProduct."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProductSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.PublishedProductReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.PublishedProductSpec" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "x-amplify-kind-ref" : "Product"
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.PublishedProductReferences" : {
        "type" : "object",
        "required" : [ "release" ],
        "properties" : {
          "release" : {
            "description" : "The Product release that was published to the marketplace",
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "Reference to product release",
                "x-amplify-kind-ref" : "ProductRelease",
                "x-amplify-kind-ref-type" : "soft"
              },
              "version" : {
                "type" : "string",
                "description" : "Product release version"
              },
              "state" : {
                "type" : "string",
                "description" : "Product release state"
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ProductVisibility" : {
        "description" : "Definition of ProductVisibility for version v1alpha1 in group catalog. \n\n Resource representing Products visibility settings in the Marketplace",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ProductVisibility",
        "x-axway-plural" : "productvisibility",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Marketplace",
          "plural" : "marketplaces"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ProductVisibility. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ProductVisibility"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ProductVisibility. ProductVisibility name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ProductVisibility."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibilitySpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ProductVisibilitySpec" : {
        "type" : "object",
        "required" : [ "products" ],
        "properties" : {
          "products" : {
            "description" : "Defines where the visibility settings apply.",
            "type" : "array",
            "minItems" : 1,
            "maxItems" : 1,
            "items" : {
              "type" : "object",
              "required" : [ "name" ],
              "properties" : {
                "name" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "Product",
                  "x-amplify-kind-ref-type" : "hard",
                  "maxLength" : 100,
                  "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                }
              }
            }
          },
          "exclude" : {
            "type" : "boolean",
            "description" : "Determines if the list of subjects should be excluded from the product visibility."
          },
          "subjects" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibilitySpec.TeamRef"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductVisibilitySpec.TagRef"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "team" : "#/components/schemas/catalog.v1alpha1.ProductVisibilitySpec.TeamRef",
                  "tag" : "#/components/schemas/catalog.v1alpha1.ProductVisibilitySpec.TagRef"
                }
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ProductVisibilitySpec.TeamRef" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "team" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "ID of the subject",
            "maxLength" : 36
          }
        },
        "required" : [ "type", "id" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ProductVisibilitySpec.TagRef" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "tag" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "value" : {
            "type" : "string",
            "description" : "Value of a platform team tag.",
            "maxLength" : 40
          }
        },
        "required" : [ "type", "value" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ConsumerProductVisibility" : {
        "description" : "Definition of ConsumerProductVisibility for version v1alpha1 in group catalog. \n\n Resource representing Products visibility settings in the Marketplace for Consumer Organizations.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ConsumerProductVisibility",
        "x-axway-plural" : "consumerproductvisibility",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Marketplace",
          "plural" : "marketplaces"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ConsumerProductVisibility. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ConsumerProductVisibility"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ConsumerProductVisibility. ConsumerProductVisibility name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ConsumerProductVisibility."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibilitySpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ConsumerProductVisibilitySpec" : {
        "type" : "object",
        "required" : [ "products" ],
        "properties" : {
          "products" : {
            "description" : "Defines where the visibility settings apply.",
            "type" : "array",
            "minItems" : 1,
            "maxItems" : 1,
            "items" : {
              "type" : "object",
              "required" : [ "name" ],
              "properties" : {
                "name" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "Product",
                  "x-amplify-kind-ref-type" : "hard",
                  "maxLength" : 100,
                  "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                }
              }
            }
          },
          "subjects" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibilitySpec.OrgRef"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "org" : "#/components/schemas/catalog.v1alpha1.ConsumerProductVisibilitySpec.OrgRef"
                }
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ConsumerProductVisibilitySpec.OrgRef" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "org" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "ID of the consumer organization.",
            "maxLength" : 36
          }
        },
        "required" : [ "type", "id" ],
        "additionalProperties" : false
      },
      "catalog.v1.SupportContact" : {
        "description" : "Definition of SupportContact for version v1 in group catalog. \n\n Resource representing a Support Contact information.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "SupportContact",
        "x-axway-plural" : "supportcontacts",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind SupportContact. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "SupportContact"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the SupportContact. SupportContact name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the SupportContact."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.SupportContactSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.SupportContactSpec" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "email",
            "x-amplify-encrypted" : true,
            "description" : "Email address of the Support Contact."
          },
          "phoneNumber" : {
            "type" : "string",
            "pattern" : "^\\+[1-9]\\d{1,14}$",
            "x-amplify-encrypted" : true,
            "description" : "String of the E.164 format of the phone number, e.g. +11234567899"
          },
          "officeHours" : {
            "type" : "object",
            "properties" : {
              "timezone" : {
                "type" : "string",
                "description" : "Long IANA Time Zone format. Examples: 'America/New_York' or 'Europe/Paris'",
                "pattern" : "^[\\-A-Za-z_+0-9]{1,14}(\\/[\\-A-Za-z_+0-9]{1,14}){0,2}$"
              },
              "periods" : {
                "type" : "array",
                "minItems" : 1,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "openTime" : {
                      "type" : "string",
                      "pattern" : "^(2[0-4]|[01][0-9]):([0-5][0-9])$",
                      "description" : "Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00."
                    },
                    "openDay" : {
                      "type" : "string",
                      "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                    },
                    "closeTime" : {
                      "type" : "string",
                      "pattern" : "^(2[0-4]|[01][0-9]):([0-5][0-9])$",
                      "description" : "Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00."
                    },
                    "closeDay" : {
                      "type" : "string",
                      "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                    }
                  },
                  "required" : [ "openTime", "openDay", "closeTime", "closeDay" ],
                  "additionalProperties" : false
                }
              }
            },
            "required" : [ "timezone", "periods" ],
            "additionalProperties" : false
          },
          "alternativeContacts" : {
            "type" : "object",
            "properties" : {
              "urls" : {
                "type" : "array",
                "description" : "Alternative contact URLs.",
                "maxItems" : 5,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "URL hosting service name. Examples: msteams, slack",
                      "x-extensible-enum" : [ "msteams", "slack" ]
                    },
                    "title" : {
                      "type" : "string",
                      "description" : "Title for the provided URL.",
                      "maxLength" : 100
                    },
                    "value" : {
                      "type" : "string",
                      "description" : "URL value.",
                      "pattern" : "^https?://[\\w-_\\:\\.\\?\\/=%&#~\\[\\]\\(\\)@!$&',;]*$"
                    }
                  },
                  "required" : [ "title", "value" ],
                  "additionalProperties" : false
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "email" ]
      },
      "catalog.v1.SupportContactSpec.UrlAlternativeContact" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "url" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "provider" : {
            "type" : "string",
            "description" : "Name of the provider. Example: msteams, slack",
            "maxLength" : 30,
            "x-extensible-enum" : [ "msteams", "slack" ]
          },
          "title" : {
            "type" : "string",
            "description" : "Title for the provided URL.",
            "maxLength" : 100
          },
          "value" : {
            "type" : "string",
            "description" : "URL value.",
            "pattern" : "^https?://[\\w-_\\:\\.\\?\\/=%&#~\\[\\]\\(\\)@!$&',;]*$"
          }
        },
        "required" : [ "title", "value" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.SupportContact" : {
        "description" : "Definition of SupportContact for version v1alpha1 in group catalog. \n\n Resource representing a Support Contact information.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "SupportContact",
        "x-axway-plural" : "supportcontacts",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind SupportContact. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "SupportContact"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the SupportContact. SupportContact name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the SupportContact."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.SupportContactSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.SupportContactSpec" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "email",
            "x-amplify-encrypted" : true,
            "description" : "Email address of the Support Contact."
          },
          "phoneNumber" : {
            "type" : "string",
            "pattern" : "^\\+[1-9]\\d{1,14}$",
            "x-amplify-encrypted" : true,
            "description" : "String of the E.164 format of the phone number, e.g. +11234567899"
          },
          "officeHours" : {
            "type" : "object",
            "properties" : {
              "timezone" : {
                "type" : "string",
                "description" : "Long IANA Time Zone format. Examples: 'America/New_York' or 'Europe/Paris'",
                "pattern" : "^[\\-A-Za-z_+0-9]{1,14}(\\/[\\-A-Za-z_+0-9]{1,14}){0,2}$"
              },
              "periods" : {
                "type" : "array",
                "minItems" : 1,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "openTime" : {
                      "type" : "string",
                      "pattern" : "^(2[0-4]|[01][0-9]):([0-5][0-9])$",
                      "description" : "Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00."
                    },
                    "openDay" : {
                      "type" : "string",
                      "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                    },
                    "closeTime" : {
                      "type" : "string",
                      "pattern" : "^(2[0-4]|[01][0-9]):([0-5][0-9])$",
                      "description" : "Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00."
                    },
                    "closeDay" : {
                      "type" : "string",
                      "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                    }
                  },
                  "required" : [ "openTime", "openDay", "closeTime", "closeDay" ],
                  "additionalProperties" : false
                }
              }
            },
            "required" : [ "timezone", "periods" ],
            "additionalProperties" : false
          },
          "alternativeContacts" : {
            "type" : "object",
            "properties" : {
              "urls" : {
                "type" : "array",
                "description" : "Alternative contact URLs.",
                "maxItems" : 5,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "URL hosting service name. Examples: msteams, slack",
                      "x-extensible-enum" : [ "msteams", "slack" ]
                    },
                    "title" : {
                      "type" : "string",
                      "description" : "Title for the provided URL.",
                      "maxLength" : 100
                    },
                    "value" : {
                      "type" : "string",
                      "description" : "URL value.",
                      "pattern" : "^https?://[\\w-_\\:\\.\\?\\/=%&#~\\[\\]\\(\\)@!$&',;]*$"
                    }
                  },
                  "required" : [ "title", "value" ],
                  "additionalProperties" : false
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "email" ]
      },
      "catalog.v1alpha1.SupportContactSpec.UrlAlternativeContact" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "url" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "provider" : {
            "type" : "string",
            "description" : "Name of the provider. Example: msteams, slack",
            "maxLength" : 30,
            "x-extensible-enum" : [ "msteams", "slack" ]
          },
          "title" : {
            "type" : "string",
            "description" : "Title for the provided URL.",
            "maxLength" : 100
          },
          "value" : {
            "type" : "string",
            "description" : "URL value.",
            "pattern" : "^https?://[\\w-_\\:\\.\\?\\/=%&#~\\[\\]\\(\\)@!$&',;]*$"
          }
        },
        "required" : [ "title", "value" ],
        "additionalProperties" : false
      },
      "catalog.v1.Product" : {
        "description" : "Definition of Product for version v1 in group catalog. \n\n Resource representing an Amplify Central Product in the Products Catalog.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "Product",
        "x-axway-plural" : "products",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon", "status", "state", "references" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "PublishedProduct",
            "scopeKind" : "Marketplace",
            "plural" : "publishedproducts",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Subscription",
            "plural" : "subscriptions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductVisibility",
            "scopeKind" : "Marketplace",
            "plural" : "productvisibility",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ConsumerProductVisibility",
            "scopeKind" : "Marketplace",
            "plural" : "consumerproductvisibility",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductPlan",
            "plural" : "productplans",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "SupportContact",
            "plural" : "supportcontacts",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Product. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Product"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Product. Product name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Product."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductSpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductIcon"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductStatus"
          },
          "state" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductState"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.ProductSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the Product.",
            "maxLength" : 350
          },
          "supportContact" : {
            "type" : "string",
            "x-amplify-kind-ref" : "SupportContact",
            "x-amplify-kind-ref-type" : "soft"
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "assets" : {
            "description" : "Defines all the Assets that the Product will be built from.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "name" ],
              "properties" : {
                "name" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "Asset",
                  "x-amplify-kind-ref-type" : "soft",
                  "x-amplify-kind-ref-collateral" : [ "../" ]
                },
                "filters" : {
                  "type" : "object",
                  "description" : "Filters what AssetRelease the Product points to.",
                  "properties" : {
                    "version" : {
                      "type" : "string",
                      "description" : "The AssetRelease version to use.\nExamples:\n  - 1.0.1 for a specific asset release version\n  - 1.* for all minor and patch versions of version 1\n  - 1.2.* for all the patch version for version 1.2",
                      "pattern" : "^(0|([1-9][0-9]*)|\\*)(\\.(0|([1-9][0-9]*)|\\*)){0,2}$"
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "additionalProperties" : false
            }
          },
          "autoRelease" : {
            "type" : "object",
            "description" : "Defines if a product should create releases everytime there is an update to the product references.",
            "properties" : {
              "releaseType" : {
                "type" : "string",
                "enum" : [ "major", "minor", "patch" ]
              },
              "previousReleases" : {
                "type" : "object",
                "properties" : {
                  "updateState" : {
                    "type" : "string",
                    "description" : "Updates all prior non-archived releases to the deprecated state.",
                    "enum" : [ "deprecated" ]
                  }
                },
                "additionalProperties" : false
              }
            },
            "required" : [ "releaseType" ],
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1.ProductIcon" : {
        "type" : "string",
        "description" : "Image for the Product expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1.ProductStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "properties" : {
                    "asset" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "Asset",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../../" ]
                    },
                    "assetRelease" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "AssetRelease",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../../" ]
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1.ProductState" : {
        "type" : "string",
        "x-amplify-index" : { },
        "enum" : [ "draft", "active", "deprecated", "archived" ]
      },
      "catalog.v1.ProductReferences" : {
        "type" : "object",
        "properties" : {
          "assets" : {
            "description" : "Computed latest AssetReleases for each Asset reference in the Product.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "The Asset reference.",
                  "x-amplify-kind-ref" : "Asset",
                  "x-amplify-kind-ref-type" : "soft",
                  "x-amplify-kind-ref-collateral" : [ "../" ]
                },
                "release" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "description" : "The latest AssetRelease computed based on the provided Asset filters.",
                      "x-amplify-kind-ref" : "AssetRelease",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../" ]
                    },
                    "version" : {
                      "type" : "string",
                      "description" : "The AssetRelease version that the Product currently points to."
                    },
                    "state" : {
                      "type" : "string",
                      "description" : "The AssetRelease state.",
                      "x-extensible-enum" : [ "active", "deprecated", "archived" ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "catalog.v1alpha1.Product" : {
        "description" : "Definition of Product for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Product in the Products Catalog.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Product",
        "x-axway-plural" : "products",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "references", "icon", "state", "status" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "PublishedProduct",
            "scopeKind" : "Marketplace",
            "plural" : "publishedproducts",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Subscription",
            "plural" : "subscriptions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductVisibility",
            "scopeKind" : "Marketplace",
            "plural" : "productvisibility",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ConsumerProductVisibility",
            "scopeKind" : "Marketplace",
            "plural" : "consumerproductvisibility",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductPlan",
            "plural" : "productplans",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "SupportContact",
            "plural" : "supportcontacts",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Product. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Product"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Product. Product name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Product."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductReferences"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductIcon"
          },
          "state" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductState"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ProductSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the Product.",
            "maxLength" : 350
          },
          "supportContact" : {
            "type" : "string",
            "x-amplify-kind-ref" : "SupportContact",
            "x-amplify-kind-ref-type" : "soft"
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "assets" : {
            "description" : "Defines all the Assets that the Product will be built from.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "name" ],
              "properties" : {
                "name" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "Asset",
                  "x-amplify-kind-ref-type" : "soft",
                  "x-amplify-kind-ref-collateral" : [ "../" ]
                },
                "filters" : {
                  "type" : "object",
                  "description" : "Filters what AssetRelease the Product points to.",
                  "properties" : {
                    "version" : {
                      "type" : "string",
                      "description" : "The AssetRelease version to use.\nExamples:\n  - 1.0.1 for a specific asset release version\n  - 1.* for all minor and patch versions of version 1\n  - 1.2.* for all the patch version for version 1.2",
                      "pattern" : "^(0|([1-9][0-9]*)|\\*)(\\.(0|([1-9][0-9]*)|\\*)){0,2}$"
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "additionalProperties" : false
            }
          },
          "autoRelease" : {
            "type" : "object",
            "description" : "Defines if a product should create releases everytime there is an update to the product references.",
            "properties" : {
              "releaseType" : {
                "type" : "string",
                "enum" : [ "major", "minor", "patch" ]
              },
              "previousReleases" : {
                "type" : "object",
                "properties" : {
                  "updateState" : {
                    "type" : "string",
                    "description" : "Updates all prior non-archived releases to the deprecated state.",
                    "enum" : [ "deprecated" ]
                  }
                },
                "additionalProperties" : false
              }
            },
            "required" : [ "releaseType" ],
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ProductReferences" : {
        "type" : "object",
        "properties" : {
          "assets" : {
            "description" : "Computed latest AssetReleases for each Asset reference in the Product.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "The Asset reference.",
                  "x-amplify-kind-ref" : "Asset",
                  "x-amplify-kind-ref-type" : "soft",
                  "x-amplify-kind-ref-collateral" : [ "../" ]
                },
                "release" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "description" : "The latest AssetRelease computed based on the provided Asset filters.",
                      "x-amplify-kind-ref" : "AssetRelease",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../" ]
                    },
                    "version" : {
                      "type" : "string",
                      "description" : "The AssetRelease version that the Product currently points to."
                    },
                    "state" : {
                      "type" : "string",
                      "description" : "The AssetRelease state.",
                      "x-extensible-enum" : [ "active", "deprecated", "archived" ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "catalog.v1alpha1.ProductIcon" : {
        "type" : "string",
        "description" : "Image for the Product expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1alpha1.ProductState" : {
        "type" : "string",
        "x-amplify-index" : { },
        "enum" : [ "draft", "active", "deprecated", "archived" ]
      },
      "catalog.v1alpha1.ProductStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "properties" : {
                    "asset" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "Asset",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../../" ]
                    },
                    "assetRelease" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "AssetRelease",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../../" ]
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1.ProductRelease" : {
        "description" : "Definition of ProductRelease for version v1 in group catalog. \n\n Resource representing a Product release.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "ProductRelease",
        "x-axway-plural" : "productreleases",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon", "status" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductPlan",
            "plural" : "productplans",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "PublishedProduct",
            "scopeKind" : "Marketplace",
            "plural" : "publishedproducts",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ReleaseTag",
            "scopeKind" : "Product",
            "plural" : "releasetags",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ProductRelease. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ProductRelease"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ProductRelease. ProductRelease name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ProductRelease."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductReleaseSpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductReleaseIcon"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductReleaseStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.ProductReleaseSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the release.",
            "maxLength" : 350
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the release.",
            "maxLength" : 30,
            "x-amplify-index" : { },
            "pattern" : "^(0|([1-9][0-9]*))(\\.(0|([1-9][0-9]*))){2}$"
          },
          "product" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Product",
            "x-amplify-kind-ref-type" : "hard"
          },
          "assets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "The Asset name",
                  "x-amplify-kind-ref" : "Asset",
                  "x-amplify-kind-ref-type" : "soft",
                  "x-amplify-kind-ref-collateral" : [ "../" ]
                },
                "release" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "AssetRelease",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../" ]
                    },
                    "version" : {
                      "type" : "string",
                      "description" : "The AssetRelease version."
                    },
                    "state" : {
                      "type" : "string",
                      "description" : "The AssetRelease state.",
                      "x-extensible-enum" : [ "active", "deprecated", "archived" ]
                    }
                  }
                }
              }
            }
          },
          "releaseTag" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Product/ReleaseTag",
            "x-amplify-kind-ref-type" : "hard"
          },
          "state" : {
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "active", "deprecated", "archived" ]
          },
          "categories" : {
            "type" : "array",
            "description" : "list of categories for the released product.",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          }
        },
        "required" : [ "product", "releaseTag", "version" ],
        "additionalProperties" : false
      },
      "catalog.v1.ProductReleaseIcon" : {
        "type" : "string",
        "description" : "Image for the ProductRelease expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1.ProductReleaseStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1.ProductReleaseStatus.Error"
              }, {
                "$ref" : "#/components/schemas/catalog.v1.ProductReleaseStatus.Success"
              }, {
                "$ref" : "#/components/schemas/catalog.v1.ProductReleaseStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/catalog.v1.ProductReleaseStatus.Error",
                  "Success" : "#/components/schemas/catalog.v1.ProductReleaseStatus.Success",
                  "Pending" : "#/components/schemas/catalog.v1.ProductReleaseStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : true
      },
      "catalog.v1.ProductReleaseStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "Reason for being in Pending."
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "asset" : {
                "type" : "string",
                "x-amplify-kind-ref" : "Asset",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              },
              "assetRelease" : {
                "type" : "string",
                "x-amplify-kind-ref" : "AssetRelease",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "catalog.v1.ProductReleaseStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "asset" : {
                "type" : "string",
                "x-amplify-kind-ref" : "Asset",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              },
              "assetRelease" : {
                "type" : "string",
                "x-amplify-kind-ref" : "AssetRelease",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "catalog.v1.ProductReleaseStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "asset" : {
                "type" : "string",
                "x-amplify-kind-ref" : "Asset",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              },
              "assetRelease" : {
                "type" : "string",
                "x-amplify-kind-ref" : "AssetRelease",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1alpha1.ProductRelease" : {
        "description" : "Definition of ProductRelease for version v1alpha1 in group catalog. \n\n Resource representing a Product release.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ProductRelease",
        "x-axway-plural" : "productreleases",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "icon", "status" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductPlan",
            "plural" : "productplans",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "PublishedProduct",
            "scopeKind" : "Marketplace",
            "plural" : "publishedproducts",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ReleaseTag",
            "scopeKind" : "Product",
            "plural" : "releasetags",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ProductRelease. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ProductRelease"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ProductRelease. ProductRelease name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ProductRelease."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductReleaseSpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductReleaseIcon"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductReleaseStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ProductReleaseSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the release.",
            "maxLength" : 350
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the release.",
            "maxLength" : 30,
            "x-amplify-index" : { },
            "pattern" : "^(0|([1-9][0-9]*))(\\.(0|([1-9][0-9]*))){2}$"
          },
          "product" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Product",
            "x-amplify-kind-ref-type" : "hard"
          },
          "assets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "The Asset name",
                  "x-amplify-kind-ref" : "Asset",
                  "x-amplify-kind-ref-type" : "soft",
                  "x-amplify-kind-ref-collateral" : [ "../" ]
                },
                "release" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "x-amplify-kind-ref" : "AssetRelease",
                      "x-amplify-kind-ref-type" : "soft",
                      "x-amplify-kind-ref-collateral" : [ "../" ]
                    },
                    "version" : {
                      "type" : "string",
                      "description" : "The AssetRelease version."
                    },
                    "state" : {
                      "type" : "string",
                      "description" : "The AssetRelease state.",
                      "x-extensible-enum" : [ "active", "deprecated", "archived" ]
                    }
                  }
                }
              }
            }
          },
          "releaseTag" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Product/ReleaseTag",
            "x-amplify-kind-ref-type" : "hard"
          },
          "state" : {
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "active", "deprecated", "archived" ]
          },
          "categories" : {
            "type" : "array",
            "description" : "list of categories for the released product.",
            "items" : {
              "type" : "string",
              "x-amplify-kind-ref" : "Category",
              "x-amplify-kind-ref-type" : "soft"
            }
          }
        },
        "required" : [ "product", "releaseTag", "version" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ProductReleaseIcon" : {
        "type" : "string",
        "description" : "Image for the ProductRelease expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1alpha1.ProductReleaseStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductReleaseStatus.Error"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductReleaseStatus.Success"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ProductReleaseStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/catalog.v1alpha1.ProductReleaseStatus.Error",
                  "Success" : "#/components/schemas/catalog.v1alpha1.ProductReleaseStatus.Success",
                  "Pending" : "#/components/schemas/catalog.v1alpha1.ProductReleaseStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : true
      },
      "catalog.v1alpha1.ProductReleaseStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "Reason for being in Pending."
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "asset" : {
                "type" : "string",
                "x-amplify-kind-ref" : "Asset",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              },
              "assetRelease" : {
                "type" : "string",
                "x-amplify-kind-ref" : "AssetRelease",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "catalog.v1alpha1.ProductReleaseStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "asset" : {
                "type" : "string",
                "x-amplify-kind-ref" : "Asset",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              },
              "assetRelease" : {
                "type" : "string",
                "x-amplify-kind-ref" : "AssetRelease",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "catalog.v1alpha1.ProductReleaseStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "asset" : {
                "type" : "string",
                "x-amplify-kind-ref" : "Asset",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              },
              "assetRelease" : {
                "type" : "string",
                "x-amplify-kind-ref" : "AssetRelease",
                "x-amplify-kind-ref-type" : "soft",
                "x-amplify-kind-ref-collateral" : [ "../../" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1alpha1.ProductPlanUnit" : {
        "description" : "Definition of ProductPlanUnit for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Product Plan Unit.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ProductPlanUnit",
        "x-axway-plural" : "productplanunits",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Quota",
            "scopeKind" : "ProductPlan",
            "plural" : "quotas",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ProductPlanUnit. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ProductPlanUnit"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ProductPlanUnit. ProductPlanUnit name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ProductPlanUnit."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanUnitSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ProductPlanUnitSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the Plan.",
            "maxLength" : 350
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ProductPlan" : {
        "description" : "Definition of ProductPlan for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Product Plan.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ProductPlan",
        "x-axway-plural" : "productplans",
        "x-axway-scoped" : false,
        "x-axway-subresources" : [ "state", "references", "status" ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Subscription",
            "plural" : "subscriptions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Product",
            "plural" : "products",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ProductPlan. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ProductPlan"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ProductPlan. ProductPlan name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ProductPlan."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanSpec"
          },
          "state" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanState"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanReferences"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductPlanStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ProductPlanSpec" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Product",
            "x-amplify-kind-ref-type" : "hard"
          },
          "description" : {
            "type" : "string",
            "description" : "description of the Plan.",
            "maxLength" : 350
          },
          "type" : {
            "description" : "The type of the Plan.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "free", "paid" ]
          },
          "billing" : {
            "description" : "Paid plan billing details.",
            "type" : "object",
            "properties" : {
              "currency" : {
                "type" : "string",
                "pattern" : "^[A-Z]{3}$",
                "x-extensible-enum" : [ "USD", "EUR" ]
              },
              "price" : {
                "type" : "number",
                "format" : "double",
                "description" : "The base price for the plan.",
                "default" : 0,
                "maximum" : 999999999,
                "minimum" : 0
              },
              "cycle" : {
                "type" : "string",
                "description" : "The billing cycle type.",
                "enum" : [ "recurring" ],
                "default" : "recurring"
              },
              "interval" : {
                "type" : "string",
                "enum" : [ "daily", "weekly", "monthly", "annually" ]
              }
            },
            "required" : [ "currency", "interval" ],
            "additionalProperties" : false
          },
          "features" : {
            "description" : "Defines all features supported by the Plan.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "name" ],
              "properties" : {
                "name" : {
                  "type" : "string",
                  "maxLength" : 100
                }
              },
              "additionalProperties" : false
            }
          },
          "subscription" : {
            "description" : "Defines Plan's subscription information",
            "type" : "object",
            "properties" : {
              "interval" : {
                "type" : "object",
                "description" : "The subscription interval",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "description" : "The type of the interval",
                    "enum" : [ "months", "years", "days" ]
                  },
                  "length" : {
                    "type" : "number",
                    "description" : "The subscription interval length"
                  }
                },
                "additionalProperties" : false
              },
              "renewal" : {
                "type" : "string",
                "enum" : [ "automatic" ]
              },
              "approval" : {
                "type" : "string",
                "enum" : [ "automatic", "manual" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false,
        "required" : [ "product", "type" ]
      },
      "catalog.v1alpha1.ProductPlanState" : {
        "type" : "string",
        "x-amplify-index" : { },
        "enum" : [ "draft", "active", "deprecated", "archived" ]
      },
      "catalog.v1alpha1.ProductPlanReferences" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "type" : "object",
            "properties" : {
              "release" : {
                "type" : "string",
                "description" : "The latest active Product Release that corresponds to the Product referenced in the Plan.",
                "x-amplify-kind-ref" : "ProductRelease",
                "x-amplify-kind-ref-type" : "hard"
              }
            }
          }
        }
      },
      "catalog.v1alpha1.ProductPlanStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1.Quota" : {
        "description" : "Definition of Quota for version v1 in group catalog. \n\n Resource representing an Amplify Central Plan Quota.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "Quota",
        "x-axway-plural" : "quotas",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status" ],
        "x-axway-scopes" : [ {
          "kind" : "ProductPlan",
          "plural" : "productplans"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductPlanUnit",
            "plural" : "productplanunits",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Quota. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Quota"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Quota. Quota name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Quota."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.QuotaSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1.QuotaStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.QuotaSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the quota.",
            "maxLength" : 350
          },
          "unit" : {
            "description" : "The unit used to measure the access to the resource.",
            "type" : "string",
            "x-amplify-kind-ref" : "ProductPlanUnit",
            "x-amplify-kind-ref-type" : "soft"
          },
          "pricing" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.FixedPricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.UnlimitedPricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.VolumePricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.GraduatedPricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.PerUnitPricingType"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "fixed" : "#/components/schemas/catalog.v1.QuotaSpec.FixedPricingType",
                "unlimited" : "#/components/schemas/catalog.v1.QuotaSpec.UnlimitedPricingType",
                "volume" : "#/components/schemas/catalog.v1.QuotaSpec.VolumePricingType",
                "graduated" : "#/components/schemas/catalog.v1.QuotaSpec.GraduatedPricingType",
                "perunit" : "#/components/schemas/catalog.v1.QuotaSpec.PerUnitPricingType"
              }
            }
          },
          "resources" : {
            "description" : "The resources that the access is being granted to.",
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.AssetResourceRef"
              } ],
              "discriminator" : {
                "propertyName" : "kind",
                "mapping" : {
                  "AssetResource" : "#/components/schemas/catalog.v1.QuotaSpec.AssetResourceRef"
                }
              }
            }
          }
        },
        "required" : [ "unit", "pricing", "resources" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Error", "Pending" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1.QuotaStatus.Error"
              }, {
                "$ref" : "#/components/schemas/catalog.v1.QuotaStatus.Success"
              }, {
                "$ref" : "#/components/schemas/catalog.v1.QuotaStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/catalog.v1.QuotaStatus.Error",
                  "Success" : "#/components/schemas/catalog.v1.QuotaStatus.Success",
                  "Pending" : "#/components/schemas/catalog.v1.QuotaStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1.QuotaStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the result."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "timestamp", "detail" ]
      },
      "catalog.v1.QuotaStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1.QuotaStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the Pending status."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the resource moved to Pending."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1.QuotaSpec.AssetResourceRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "AssetResource" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Asset/AssetResource",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.LimitTypeLoose" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "loose" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "value" : {
            "type" : "integer",
            "minimum" : 1,
            "description" : "The limit of the unit that is provided."
          },
          "overages" : {
            "type" : "object",
            "properties" : {
              "value" : {
                "type" : "number",
                "format" : "double",
                "description" : "The overage price per unit.",
                "maximum" : 999999999,
                "minimum" : 0
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "value", "overages" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.LimitTypeStrict" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "strict" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "value" : {
            "type" : "integer",
            "minimum" : 1,
            "description" : "The limit of the unit that is provided."
          }
        },
        "required" : [ "type", "value" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.FixedPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "fixed" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "interval" : {
            "type" : "string",
            "enum" : [ "annually", "monthly", "weekly", "daily" ]
          },
          "limit" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeStrict"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeLoose"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "strict" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeStrict",
                "loose" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeLoose"
              }
            }
          }
        },
        "required" : [ "type", "interval", "limit" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.UnlimitedPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "unlimited" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          }
        },
        "required" : [ "type" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.PerUnitPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "perunit" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "cost" : {
            "type" : "number",
            "format" : "double",
            "description" : "The cost per unit of usage.",
            "minimum" : 0,
            "maximum" : 999999999
          }
        },
        "required" : [ "type", "cost" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.LimitTypeTiered" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "tiered" ],
            "default" : "tiered",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "tiers" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "type" : "object",
              "required" : [ "from", "to", "cost", "flatFee" ],
              "properties" : {
                "from" : {
                  "type" : "integer",
                  "description" : "The limit start of the tier provided.",
                  "minimum" : 1,
                  "maximum" : 999999999
                },
                "to" : {
                  "type" : "integer",
                  "description" : "The limit end of the tier provided.",
                  "minimum" : 1,
                  "maximum" : 999999999
                },
                "cost" : {
                  "type" : "number",
                  "format" : "double",
                  "description" : "The tier price.",
                  "minimum" : 0,
                  "maximum" : 999999999
                },
                "flatFee" : {
                  "type" : "number",
                  "format" : "double",
                  "description" : "The flat fee for the tier.",
                  "minimum" : 0,
                  "maximum" : 999999999
                }
              },
              "additionalProperties" : false
            }
          }
        },
        "required" : [ "type", "tiers" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.VolumePricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "volume" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "limit" : {
            "description" : "The tiered limits set.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeTiered"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "tiered" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeTiered"
              }
            }
          }
        },
        "required" : [ "type", "limit" ],
        "additionalProperties" : false
      },
      "catalog.v1.QuotaSpec.GraduatedPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "graduated" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "limit" : {
            "description" : "The tiered limits to set.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeTiered"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "tiered" : "#/components/schemas/catalog.v1.QuotaSpec.LimitTypeTiered"
              }
            }
          }
        },
        "required" : [ "type", "limit" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.Quota" : {
        "description" : "Definition of Quota for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Plan Quota.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Quota",
        "x-axway-plural" : "quotas",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status" ],
        "x-axway-scopes" : [ {
          "kind" : "ProductPlan",
          "plural" : "productplans"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "ProductPlanUnit",
            "plural" : "productplanunits",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Quota. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Quota"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Quota. Quota name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Quota."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.QuotaSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the quota.",
            "maxLength" : 350
          },
          "unit" : {
            "description" : "The unit used to measure the access to the resource.",
            "type" : "string",
            "x-amplify-kind-ref" : "ProductPlanUnit",
            "x-amplify-kind-ref-type" : "soft"
          },
          "pricing" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.FixedPricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.UnlimitedPricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.VolumePricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.GraduatedPricingType"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.PerUnitPricingType"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "fixed" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.FixedPricingType",
                "unlimited" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.UnlimitedPricingType",
                "volume" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.VolumePricingType",
                "graduated" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.GraduatedPricingType",
                "perunit" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.PerUnitPricingType"
              }
            }
          },
          "resources" : {
            "description" : "The resources that the access is being granted to.",
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.AssetResourceRef"
              } ],
              "discriminator" : {
                "propertyName" : "kind",
                "mapping" : {
                  "AssetResource" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.AssetResourceRef"
                }
              }
            }
          }
        },
        "required" : [ "unit", "pricing", "resources" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Error", "Pending" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaStatus.Error"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaStatus.Success"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/catalog.v1alpha1.QuotaStatus.Error",
                  "Success" : "#/components/schemas/catalog.v1alpha1.QuotaStatus.Success",
                  "Pending" : "#/components/schemas/catalog.v1alpha1.QuotaStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1alpha1.QuotaStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the result."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "timestamp", "detail" ]
      },
      "catalog.v1alpha1.QuotaStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1alpha1.QuotaStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the Pending status."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the resource moved to Pending."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1alpha1.QuotaSpec.AssetResourceRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "AssetResource" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Asset/AssetResource",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "kind" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.LimitTypeLoose" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "loose" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "value" : {
            "type" : "integer",
            "minimum" : 1,
            "description" : "The limit of the unit that is provided."
          },
          "overages" : {
            "type" : "object",
            "properties" : {
              "value" : {
                "type" : "number",
                "format" : "double",
                "description" : "The overage price per unit.",
                "maximum" : 999999999,
                "minimum" : 0
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "value", "overages" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.LimitTypeStrict" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "strict" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "value" : {
            "type" : "integer",
            "minimum" : 1,
            "description" : "The limit of the unit that is provided."
          }
        },
        "required" : [ "type", "value" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.FixedPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "fixed" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "interval" : {
            "type" : "string",
            "enum" : [ "annually", "monthly", "weekly", "daily" ]
          },
          "limit" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeStrict"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeLoose"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "strict" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeStrict",
                "loose" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeLoose"
              }
            }
          }
        },
        "required" : [ "type", "interval", "limit" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.UnlimitedPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "unlimited" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          }
        },
        "required" : [ "type" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.PerUnitPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "perunit" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "cost" : {
            "type" : "number",
            "format" : "double",
            "description" : "The cost per unit of usage.",
            "minimum" : 0,
            "maximum" : 999999999
          }
        },
        "required" : [ "type", "cost" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.LimitTypeTiered" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "tiered" ],
            "default" : "tiered",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "tiers" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "type" : "object",
              "required" : [ "from", "to", "cost", "flatFee" ],
              "properties" : {
                "from" : {
                  "type" : "integer",
                  "description" : "The limit start of the tier provided.",
                  "minimum" : 1,
                  "maximum" : 999999999
                },
                "to" : {
                  "type" : "integer",
                  "description" : "The limit end of the tier provided.",
                  "minimum" : 1,
                  "maximum" : 999999999
                },
                "cost" : {
                  "type" : "number",
                  "format" : "double",
                  "description" : "The tier price.",
                  "minimum" : 0,
                  "maximum" : 999999999
                },
                "flatFee" : {
                  "type" : "number",
                  "format" : "double",
                  "description" : "The flat fee for the tier.",
                  "minimum" : 0,
                  "maximum" : 999999999
                }
              },
              "additionalProperties" : false
            }
          }
        },
        "required" : [ "type", "tiers" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.VolumePricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "volume" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "limit" : {
            "description" : "The tiered limits set.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeTiered"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "tiered" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeTiered"
              }
            }
          }
        },
        "required" : [ "type", "limit" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.QuotaSpec.GraduatedPricingType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "graduated" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "limit" : {
            "description" : "The tiered limits to set.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeTiered"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "tiered" : "#/components/schemas/catalog.v1alpha1.QuotaSpec.LimitTypeTiered"
              }
            }
          }
        },
        "required" : [ "type", "limit" ],
        "additionalProperties" : false
      },
      "definitions.v1alpha1.ResourceGroup" : {
        "description" : "Definition of ResourceGroup for version v1alpha1 in group definitions. \n\n Resource representing an API Server resource group.",
        "type" : "object",
        "x-axway-group" : "definitions",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ResourceGroup",
        "x-axway-plural" : "groups",
        "x-axway-scoped" : false,
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the definitions group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "definitions"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ResourceGroup. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ResourceGroup"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ResourceGroup. ResourceGroup name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ResourceGroup."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceGroupSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "definitions.v1alpha1.ResourceGroupSpec" : {
        "type" : "object",
        "additionalProperties" : false
      },
      "definitions.v1alpha1.ResourceDefinition" : {
        "description" : "Definition of ResourceDefinition for version v1alpha1 in group definitions. \n\n Resource representing the definition of an API Server resource in a group.",
        "type" : "object",
        "x-axway-group" : "definitions",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ResourceDefinition",
        "x-axway-plural" : "resources",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "ResourceGroup",
          "plural" : "groups"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "definitions",
            "kind" : "CommandLineInterface",
            "scopeKind" : "ResourceGroup",
            "plural" : "commandlines",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "definitions",
            "kind" : "ResourceDefinitionVersion",
            "scopeKind" : "ResourceGroup",
            "plural" : "resourceversions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the definitions group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "definitions"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ResourceDefinition. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ResourceDefinition"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ResourceDefinition. ResourceDefinition name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ResourceDefinition."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "definitions.v1alpha1.ResourceDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "plural" : {
            "type" : "string",
            "description" : "Value used in the endpoint path for accessing the resource."
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "description" : "Defines the kind of the resource. The server infers this from the endpoint the client submits the request to."
          },
          "scope" : {
            "type" : "object",
            "properties" : {
              "kind" : {
                "type" : "string",
                "maxLength" : 30,
                "description" : "Defines the kind of the scope. The server infers this from the endpoint the client submits the request to."
              }
            },
            "additionalProperties" : false
          },
          "queryParams" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "subResources" : {
            "type" : "object",
            "description" : "Describes the subresources that the current resource might have.",
            "properties" : {
              "names" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "references" : {
            "type" : "object",
            "properties" : {
              "toResources" : {
                "type" : "array",
                "description" : "A list of resources that the current resources has references to.",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "group" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Defines the kind of the resource."
                    },
                    "kind" : {
                      "type" : "string",
                      "maxLength" : 100,
                      "description" : "Defines the kind of the resource."
                    },
                    "scopeKind" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Defines the scope kind of the resource. Omit for unscoped resources."
                    },
                    "types" : {
                      "type" : "array",
                      "description" : "The type of the reference.",
                      "items" : {
                        "type" : "string",
                        "enum" : [ "hard", "soft" ]
                      }
                    },
                    "from" : {
                      "type" : "object",
                      "properties" : {
                        "subResourceName" : {
                          "type" : "string",
                          "maxLength" : 30,
                          "description" : "Defines the subResource which is referring to the resource. Omit for non subResource references."
                        }
                      }
                    }
                  },
                  "additionalProperties" : false
                }
              },
              "fromResources" : {
                "type" : "array",
                "description" : "A list of resources that the current resources is beging referenced from.",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "group" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Defines the kind of the resource."
                    },
                    "kind" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Defines the kind of the resource."
                    },
                    "scopeKind" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Defines the scope kind of the resource. Omit for unscoped resources."
                    },
                    "from" : {
                      "type" : "object",
                      "properties" : {
                        "subResourceName" : {
                          "type" : "string",
                          "maxLength" : 30,
                          "description" : "Defines the subResource referencing this resource. Omit for non subResource references."
                        }
                      }
                    },
                    "types" : {
                      "type" : "array",
                      "description" : "The type of the reference.",
                      "items" : {
                        "type" : "string",
                        "enum" : [ "hard", "soft" ]
                      }
                    }
                  },
                  "additionalProperties" : false
                }
              }
            },
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false,
        "required" : [ "plural", "kind" ]
      },
      "definitions.v1alpha1.ResourceDefinitionVersion" : {
        "description" : "Definition of ResourceDefinitionVersion for version v1alpha1 in group definitions. \n\n Resource representing the structure of a version for the referenced API Server Resource in a group.",
        "type" : "object",
        "x-axway-group" : "definitions",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ResourceDefinitionVersion",
        "x-axway-plural" : "resourceversions",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "ResourceGroup",
          "plural" : "groups"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "definitions",
            "kind" : "ResourceDefinition",
            "scopeKind" : "ResourceGroup",
            "plural" : "resources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the definitions group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "definitions"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ResourceDefinitionVersion. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ResourceDefinitionVersion"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ResourceDefinitionVersion. ResourceDefinitionVersion name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ResourceDefinitionVersion."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/definitions.v1alpha1.ResourceDefinitionVersionSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "definitions.v1alpha1.ResourceDefinitionVersionSpec" : {
        "type" : "object",
        "properties" : {
          "resourceDefinition" : {
            "type" : "string",
            "x-amplify-kind-ref" : "ResourceDefinition",
            "x-amplify-kind-ref-type" : "hard",
            "description" : "A reference to a resource definition."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the version to be used in the resource definition."
          },
          "served" : {
            "type" : "boolean",
            "description" : "Defines if this version is currently served by the server."
          },
          "storage" : {
            "type" : "boolean",
            "description" : "Defines if this version is used when storing the resource instance details."
          },
          "spec" : {
            "type" : "object",
            "description" : "Defines the strucure of the spec for this resource version."
          }
        },
        "additionalProperties" : true,
        "required" : [ "resourceDefinition", "name", "served", "storage" ]
      },
      "definitions.v1alpha1.CommandLineInterface" : {
        "description" : "Definition of CommandLineInterface for version v1alpha1 in group definitions. \n\n Resource representing the command line properties for a resource definition in the group.",
        "type" : "object",
        "x-axway-group" : "definitions",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "CommandLineInterface",
        "x-axway-plural" : "commandlines",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "ResourceGroup",
          "plural" : "groups"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "definitions",
            "kind" : "ResourceDefinition",
            "scopeKind" : "ResourceGroup",
            "plural" : "resources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the definitions group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "definitions"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind CommandLineInterface. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "CommandLineInterface"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the CommandLineInterface. CommandLineInterface name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the CommandLineInterface."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/definitions.v1alpha1.CommandLineInterfaceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "definitions.v1alpha1.CommandLineInterfaceSpec" : {
        "type" : "object",
        "properties" : {
          "resourceDefinition" : {
            "type" : "string",
            "x-amplify-kind-ref" : "ResourceDefinition",
            "x-amplify-kind-ref-type" : "hard",
            "description" : "A reference to a resource definition."
          },
          "names" : {
            "type" : "object",
            "properties" : {
              "plural" : {
                "type" : "string",
                "description" : "Defines the name used to access resources in this group. Also provided as default in the autocomplete for listing commands."
              },
              "singular" : {
                "type" : "string",
                "description" : "Defines the name used to access a resource in this group. Also provided as default in the autocomplete for single resource access commands."
              },
              "shortNames" : {
                "type" : "array",
                "description" : "Defines the short names that the cli can use to fetch a resource in the group.",
                "items" : {
                  "type" : "string"
                }
              },
              "shortNamesAlias" : {
                "type" : "array",
                "description" : "Defines the short names alias that the cli can use to fetch a resource in the group.",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "additionalProperties" : false,
            "required" : [ "plural", "singular", "shortNames" ]
          },
          "columns" : {
            "type" : "array",
            "description" : "Defines an ordered list of the columns and data to be rendered using a table output.",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "The name of the column for the resource."
                },
                "type" : {
                  "type" : "string",
                  "description" : "The type of the column.",
                  "enum" : [ "string", "date", "teamGuid" ]
                },
                "jsonPath" : {
                  "type" : "string",
                  "description" : "The JSONPath used to fetch data for the column starting from the root."
                },
                "description" : {
                  "type" : "string",
                  "description" : "The description of the column data."
                }
              },
              "additionalProperties" : false,
              "required" : [ "name", "type", "jsonPath" ]
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "columns", "resourceDefinition" ]
      },
      "management.v1alpha1.CorsRule" : {
        "description" : "Definition of CorsRule for version v1alpha1 in group management. \n\n Resource representing the CORS rule.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "CorsRule",
        "x-axway-plural" : "corsrules",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind CorsRule. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "CorsRule"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the CorsRule. CorsRule name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the CorsRule."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CorsRuleSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.CorsRuleSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "CORS configuration rule."
          },
          "accessControlAllowOrigin" : {
            "type" : "array",
            "minItems" : 1,
            "maxItems" : 30,
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 266
            }
          },
          "accessControlMaxAge" : {
            "type" : "integer",
            "minimum" : 0
          },
          "accessControlAllowHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "minLength" : 1
            }
          },
          "accessControlAllowMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH", "CONNECT", "TRACE" ]
            }
          },
          "accessControlExposeHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "minLength" : 1
            }
          },
          "accessControlAllowCredentials" : {
            "type" : "boolean"
          }
        },
        "required" : [ "accessControlAllowOrigin" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.AmplifyJWTAuthRule" : {
        "description" : "Definition of AmplifyJWTAuthRule for version v1alpha1 in group management. \n\n JWT authentication rule for the Amplify Gateway.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AmplifyJWTAuthRule",
        "x-axway-plural" : "amplifyjwtauthrules",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AmplifyOAuth2AuthRule",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "amplifyoauth2authrules",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AmplifyJWTAuthRule. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AmplifyJWTAuthRule"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AmplifyJWTAuthRule. AmplifyJWTAuthRule name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AmplifyJWTAuthRule."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyJWTAuthRuleSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AmplifyJWTAuthRuleSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the authentication rule."
          },
          "jwks" : {
            "type" : "object",
            "properties" : {
              "uri" : {
                "type" : "string",
                "description" : "The URI from which to fetch the JSON Web Key Set(JWKS).",
                "minLength" : 1,
                "pattern" : "^(http|https):\\/\\/(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])?(?::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?((\\/|\\?)\\S+)?$"
              },
              "cacheDurationSecs" : {
                "type" : "integer",
                "description" : "Duration after which the cached JWKS will be removed from the cache. Default 300 seconds."
              }
            },
            "additionalProperties" : false,
            "required" : [ "uri" ]
          },
          "issuer" : {
            "type" : "string",
            "description" : "The principal that issues the JWT. If specified, it has to match the iss field in JWT."
          },
          "audiences" : {
            "type" : "array",
            "description" : "The list of allowed JWT audiences. A JWT containing any of these audiences will be accepted.",
            "items" : {
              "type" : "string"
            }
          },
          "clientIdKey" : {
            "type" : "string",
            "description" : "The name of the field in the JWT payload representing the client Id. Default: cid"
          },
          "from" : {
            "type" : "array",
            "description" : "The list of locations from which to read the JWT tokens.",
            "items" : {
              "type" : "object",
              "properties" : {
                "in" : {
                  "type" : "string",
                  "enum" : [ "header", "query" ],
                  "description" : "Where to look for the token."
                },
                "name" : {
                  "type" : "string",
                  "minLength" : 1,
                  "description" : "Name of the JWT key field, defaults to Authorization."
                },
                "prefix" : {
                  "type" : "string",
                  "description" : "The token prefix, e.g. \"Bearer \"."
                }
              },
              "additionalProperties" : false,
              "required" : [ "in", "name" ]
            }
          },
          "clockSkewSeconds" : {
            "type" : "integer",
            "description" : "The maximum clock skew allowed when verify time constraints (default 60secs)."
          }
        },
        "additionalProperties" : false,
        "required" : [ "jwks" ]
      },
      "management.v1alpha1.AmplifyOAuth2AuthRule" : {
        "description" : "Definition of AmplifyOAuth2AuthRule for version v1alpha1 in group management. \n\n OAuth2 authentication rule for the Amplify Gateway.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AmplifyOAuth2AuthRule",
        "x-axway-plural" : "amplifyoauth2authrules",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "AmplifyJWTAuthRule",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "amplifyjwtauthrules",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AmplifyOAuth2AuthRule. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AmplifyOAuth2AuthRule"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AmplifyOAuth2AuthRule. AmplifyOAuth2AuthRule name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AmplifyOAuth2AuthRule."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRuleSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AmplifyOAuth2AuthRuleSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the authentication rule."
          },
          "amplifyjwtauthrule" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AmplifyJWTAuthRule",
            "x-amplify-kind-ref-type" : "hard"
          },
          "flows" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRuleSpec.OAuthFlows"
          }
        },
        "additionalProperties" : false,
        "required" : [ "amplifyjwtauthrule", "flows" ]
      },
      "management.v1alpha1.AmplifyOAuth2AuthRuleSpec.OAuthFlows" : {
        "type" : "object",
        "properties" : {
          "password" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRuleSpec.PasswordOAuthFlow"
          },
          "clientCredentials" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRuleSpec.ClientCredentialsFlow"
          },
          "authorizationCode" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AmplifyOAuth2AuthRuleSpec.AuthorizationCodeOAuthFlow"
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.AmplifyOAuth2AuthRuleSpec.PasswordOAuthFlow" : {
        "type" : "object",
        "required" : [ "tokenUrl" ],
        "properties" : {
          "tokenUrl" : {
            "type" : "string",
            "format" : "uri-reference"
          },
          "refreshUrl" : {
            "type" : "string",
            "format" : "uri-reference"
          },
          "scopes" : {
            "type" : "object",
            "description" : "Available scopes for this OAuth flow. Contains a mapping from scope name to scope description.\n",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.AmplifyOAuth2AuthRuleSpec.ClientCredentialsFlow" : {
        "type" : "object",
        "required" : [ "tokenUrl" ],
        "properties" : {
          "tokenUrl" : {
            "type" : "string",
            "format" : "uri-reference"
          },
          "refreshUrl" : {
            "type" : "string",
            "format" : "uri-reference"
          },
          "scopes" : {
            "type" : "object",
            "description" : "Available scopes for this OAuth flow. Contains a mapping from scope name to scope description.\n",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.AmplifyOAuth2AuthRuleSpec.AuthorizationCodeOAuthFlow" : {
        "type" : "object",
        "required" : [ "authorizationUrl", "tokenUrl" ],
        "properties" : {
          "authorizationUrl" : {
            "type" : "string",
            "format" : "uri-reference"
          },
          "tokenUrl" : {
            "type" : "string",
            "format" : "uri-reference"
          },
          "refreshUrl" : {
            "type" : "string",
            "format" : "uri-reference"
          },
          "scopes" : {
            "type" : "object",
            "description" : "Available scopes for this OAuth flow. Contains a mapping from scope name to scope description.\n",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.APIKeyAuthRule" : {
        "description" : "Definition of APIKeyAuthRule for version v1alpha1 in group management. \n\n API key authentication rule.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "APIKeyAuthRule",
        "x-axway-plural" : "apikeyauthrules",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind APIKeyAuthRule. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "APIKeyAuthRule"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the APIKeyAuthRule. APIKeyAuthRule name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the APIKeyAuthRule."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.APIKeyAuthRuleSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.APIKeyAuthRuleSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the authentication rule."
          },
          "in" : {
            "type" : "string",
            "enum" : [ "header" ],
            "description" : "Where to look for the API key, defaults to header."
          },
          "name" : {
            "type" : "string",
            "minLength" : 1,
            "description" : "The name of the API key, defaults to x-api-key."
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.RateLimitRule" : {
        "description" : "Definition of RateLimitRule for version v1alpha1 in group management. \n\n Rule to apply a rate limit to a service or operation.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "RateLimitRule",
        "x-axway-plural" : "ratelimitrules",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind RateLimitRule. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "RateLimitRule"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the RateLimitRule. RateLimitRule name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the RateLimitRule."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.RateLimitRuleSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.RateLimitRuleSpec" : {
        "$ref" : "#/components/schemas/api.v1.RateLimit"
      },
      "catalog.v1alpha1.AssetMapping" : {
        "description" : "Definition of AssetMapping for version v1alpha1 in group catalog. \n\n An AssetMapping based on the template or manually created.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AssetMapping",
        "x-axway-plural" : "assetmappings",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Asset",
          "plural" : "assets"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Stage",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Stage",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AssetMapping. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AssetMapping"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AssetMapping. AssetMapping name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AssetMapping."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AssetMappingSpec" : {
        "type" : "object",
        "properties" : {
          "assetMappingTemplate" : {
            "type" : "string",
            "description" : "Reference to the executed AssetMappingTemplate.",
            "x-amplify-kind-ref" : "management/Environment/AssetMappingTemplate"
          },
          "inputs" : {
            "type" : "object",
            "description" : "The list of the inputs provided to the template.",
            "properties" : {
              "apiService" : {
                "type" : "string",
                "x-amplify-kind-ref" : "management/Environment/APIService"
              },
              "apiServiceRevision" : {
                "type" : "string",
                "x-amplify-kind-ref" : "management/Environment/APIServiceRevision"
              },
              "apiServiceInstance" : {
                "type" : "string",
                "x-amplify-kind-ref" : "management/Environment/APIServiceInstance"
              },
              "stage" : {
                "type" : "string",
                "description" : "name of the stage",
                "x-amplify-kind-ref" : "catalog/Stage"
              },
              "categories" : {
                "type" : "array",
                "description" : "list of categories for the asset.",
                "items" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "catalog/Category",
                  "x-amplify-kind-ref-type" : "soft"
                }
              },
              "assetResourceTitle" : {
                "type" : "string",
                "description" : "title for generated asset resource.",
                "maxLength" : 350
              }
            },
            "additionalProperties" : false,
            "required" : [ "apiService" ]
          }
        },
        "additionalProperties" : false,
        "required" : [ "inputs" ]
      },
      "catalog.v1alpha1.AssetMappingStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "enum" : [ "info", "error" ]
          },
          "source" : {
            "type" : "object",
            "properties" : {
              "resource" : {
                "type" : "object",
                "description" : "The resource that triggered the Asset Mapping.",
                "properties" : {
                  "apiService" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/APIService",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  },
                  "apiServiceRevision" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/APIServiceRevision",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  },
                  "apiServiceInstance" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/APIServiceInstance",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  },
                  "assetMappingTemplate" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/AssetMappingTemplate",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  }
                }
              }
            }
          },
          "outputs" : {
            "type" : "array",
            "description" : "Generated catalog resources.",
            "items" : {
              "type" : "object",
              "properties" : {
                "resource" : {
                  "type" : "object",
                  "description" : "The resources that were impacted with the trigger of asset mapping.",
                  "properties" : {
                    "assetResource" : {
                      "type" : "object",
                      "properties" : {
                        "ref" : {
                          "type" : "string",
                          "x-amplify-kind-ref" : "catalog/Asset/AssetResource",
                          "x-amplify-kind-ref-type" : "hard"
                        },
                        "operationType" : {
                          "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingStatus.OperationType"
                        }
                      }
                    },
                    "stage" : {
                      "type" : "object",
                      "properties" : {
                        "ref" : {
                          "type" : "string",
                          "x-amplify-kind-ref" : "catalog/Stage",
                          "x-amplify-kind-ref-type" : "soft",
                          "x-amplify-kind-ref-collateral" : [ "../" ]
                        },
                        "operationType" : {
                          "$ref" : "#/components/schemas/catalog.v1alpha1.AssetMappingStatus.OperationType"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "catalog.v1alpha1.AssetMappingStatus.OperationType" : {
        "type" : "string",
        "description" : "The type of the operation executed on the resource that triggered the Asset Mapping.",
        "enum" : [ "created", "updated", "deleted" ]
      },
      "management.v1alpha1.AssetMapping" : {
        "description" : "Definition of AssetMapping for version v1alpha1 in group management. \n\n An AssetMapping based on the template or manually created.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AssetMapping",
        "x-axway-plural" : "assetmappings",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "AssetMappingTemplate",
            "scopeKind" : "Environment",
            "plural" : "assetmappingtemplates",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIService",
            "scopeKind" : "Environment",
            "plural" : "apiservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Stage",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Stage",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Category",
            "plural" : "categories",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AssetMapping. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AssetMapping"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AssetMapping. AssetMapping name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AssetMapping."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AssetMappingSpec" : {
        "type" : "object",
        "properties" : {
          "assetMappingTemplate" : {
            "type" : "string",
            "description" : "Reference to the executed AssetMappingTemplate.",
            "x-amplify-kind-ref" : "management/Environment/AssetMappingTemplate"
          },
          "inputs" : {
            "type" : "object",
            "description" : "The list of the inputs provided to the template.",
            "properties" : {
              "apiService" : {
                "type" : "string",
                "x-amplify-kind-ref" : "management/Environment/APIService"
              },
              "apiServiceRevision" : {
                "type" : "string",
                "x-amplify-kind-ref" : "management/Environment/APIServiceRevision"
              },
              "apiServiceInstance" : {
                "type" : "string",
                "x-amplify-kind-ref" : "management/Environment/APIServiceInstance"
              },
              "stage" : {
                "type" : "string",
                "description" : "name of the stage",
                "x-amplify-kind-ref" : "catalog/Stage"
              },
              "categories" : {
                "type" : "array",
                "description" : "list of categories for the asset.",
                "items" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "catalog/Category",
                  "x-amplify-kind-ref-type" : "soft"
                }
              },
              "assetResourceTitle" : {
                "type" : "string",
                "description" : "title for generated asset resource.",
                "maxLength" : 350
              }
            },
            "additionalProperties" : false,
            "required" : [ "apiService" ]
          }
        },
        "additionalProperties" : false,
        "required" : [ "inputs" ]
      },
      "management.v1alpha1.AssetMappingStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "enum" : [ "info", "error" ]
          },
          "source" : {
            "type" : "object",
            "properties" : {
              "resource" : {
                "type" : "object",
                "description" : "The resource that triggered the Asset Mapping.",
                "properties" : {
                  "apiService" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/APIService",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  },
                  "apiServiceRevision" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/APIServiceRevision",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  },
                  "apiServiceInstance" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/APIServiceInstance",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  },
                  "assetMappingTemplate" : {
                    "type" : "object",
                    "properties" : {
                      "ref" : {
                        "type" : "string",
                        "x-amplify-kind-ref" : "management/Environment/AssetMappingTemplate",
                        "x-amplify-kind-ref-type" : "soft"
                      },
                      "operationType" : {
                        "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingStatus.OperationType"
                      }
                    }
                  }
                }
              }
            }
          },
          "outputs" : {
            "type" : "array",
            "description" : "Generated catalog resources.",
            "items" : {
              "type" : "object",
              "properties" : {
                "resource" : {
                  "type" : "object",
                  "description" : "The resources that were impacted with the trigger of asset mapping.",
                  "properties" : {
                    "assetResource" : {
                      "type" : "object",
                      "properties" : {
                        "ref" : {
                          "type" : "string",
                          "x-amplify-kind-ref" : "catalog/Asset/AssetResource",
                          "x-amplify-kind-ref-type" : "hard"
                        },
                        "operationType" : {
                          "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingStatus.OperationType"
                        }
                      }
                    },
                    "stage" : {
                      "type" : "object",
                      "properties" : {
                        "ref" : {
                          "type" : "string",
                          "x-amplify-kind-ref" : "catalog/Stage",
                          "x-amplify-kind-ref-type" : "soft",
                          "x-amplify-kind-ref-collateral" : [ "../" ]
                        },
                        "operationType" : {
                          "$ref" : "#/components/schemas/management.v1alpha1.AssetMappingStatus.OperationType"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "management.v1alpha1.AssetMappingStatus.OperationType" : {
        "type" : "string",
        "description" : "The type of the operation executed on the resource that triggered the Asset Mapping.",
        "enum" : [ "created", "updated", "deleted" ]
      },
      "catalog.v1alpha1.AssetResource" : {
        "description" : "Definition of AssetResource for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Asset Resource",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AssetResource",
        "x-axway-plural" : "assetresources",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references" ],
        "x-axway-scopes" : [ {
          "kind" : "Asset",
          "plural" : "assets"
        }, {
          "kind" : "AssetRelease",
          "plural" : "assetreleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "subResourceName" : "status",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "APIServiceRevision",
            "scopeKind" : "Environment",
            "plural" : "apiservicerevisions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Stage",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "assetrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "credentialrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AssetResource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AssetResource"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AssetResource. AssetResource name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AssetResource."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResourceSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetResourceReferences"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AssetResourceSpec" : {
        "type" : "object",
        "properties" : {
          "stage" : {
            "type" : "string",
            "description" : "The Stage this Asset Resource is deployed on.",
            "x-amplify-kind-ref" : "Stage",
            "x-amplify-kind-ref-type" : "soft"
          },
          "assetRequestDefinition" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AuthorizationProfile/AssetRequestDefinition",
            "x-amplify-kind-ref-type" : "soft"
          },
          "credentialRequestDefinitions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Supported credentials types for the resource",
              "x-amplify-kind-ref" : "AuthorizationProfile/CredentialRequestDefinition",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "type" : {
            "type" : "string",
            "x-extensible-enum" : [ "sdk", "script", "oas3", "oas2", "wsdl", "protobuf", "graphql", "asyncapi", "unstructured" ]
          },
          "contentType" : {
            "type" : "string",
            "description" : "content-type of the spec.",
            "pattern" : "^[-\\w.]+/[-\\w.]+$"
          },
          "definition" : {
            "type" : "string",
            "description" : "Base64 encoded value of the api specification.",
            "format" : "base64"
          },
          "status" : {
            "type" : "string",
            "description" : "Resource availabiltiy",
            "enum" : [ "active", "inactive" ]
          },
          "accessInfo" : {
            "type" : "array",
            "description" : "information to access the definition.",
            "items" : {
              "type" : "object",
              "properties" : {
                "url" : {
                  "type" : "string",
                  "description" : "url where the definition can be accessed.",
                  "format" : "^[\\w-_\\:\\.\\?\\/]*$"
                },
                "description" : {
                  "type" : "string",
                  "description" : "description of the access information."
                }
              },
              "additionalProperties" : false
            }
          }
        },
        "required" : [ "type", "definition", "status" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetResourceReferences" : {
        "type" : "object",
        "properties" : {
          "apiServiceRevision" : {
            "type" : "string",
            "description" : "Reference to API Service Revision resource",
            "x-amplify-kind-ref" : "management/Environment/APIServiceRevision",
            "x-amplify-kind-ref-type" : "soft"
          },
          "apiServiceInstance" : {
            "type" : "string",
            "description" : "Reference to API Service Instance resource",
            "x-amplify-kind-ref" : "management/Environment/APIServiceInstance",
            "x-amplify-kind-ref-type" : "soft"
          }
        }
      },
      "catalog.v1alpha1.AssetRequestDefinition" : {
        "description" : "Definition of AssetRequestDefinition for version v1alpha1 in group catalog. \n\n Resource representing requirments for accessing an Asset",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AssetRequestDefinition",
        "x-axway-plural" : "assetrequestdefinitions",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "authorization", "references", "webhooks" ],
        "x-axway-scopes" : [ {
          "kind" : "AuthorizationProfile",
          "plural" : "authprofiles"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "AccessRequestDefinition",
            "scopeKind" : "Environment",
            "plural" : "accessrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Webhook",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AssetRequestDefinition. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AssetRequestDefinition"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AssetRequestDefinition. AssetRequestDefinition name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AssetRequestDefinition."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinitionSpec"
          },
          "authorization" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinitionAuthorization"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinitionReferences"
          },
          "webhooks" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestDefinitionWebhooks"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AssetRequestDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "schema" : {
            "type" : "object",
            "description" : "JSON Schema draft \\#7 for defining the AssetRequest properties needed to get access to an APIServiceInstance."
          },
          "provision" : {
            "type" : "object",
            "properties" : {
              "schema" : {
                "type" : "object",
                "description" : "JSON Schema draft \\#7 for describing the data to be sent back after access has been provisioned."
              }
            },
            "required" : [ "schema" ],
            "additionalProperties" : false
          }
        },
        "required" : [ "schema" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetRequestDefinitionAuthorization" : {
        "type" : "object",
        "properties" : {
          "approval" : {
            "type" : "string",
            "enum" : [ "automatic" ]
          }
        },
        "required" : [ "approval" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetRequestDefinitionReferences" : {
        "type" : "array",
        "items" : {
          "type" : "string",
          "description" : "Reference to Access Request Definition resource",
          "x-amplify-kind-ref" : "management/Environment/AccessRequestDefinition",
          "x-amplify-kind-ref-type" : "soft"
        }
      },
      "catalog.v1alpha1.AssetRequestDefinitionWebhooks" : {
        "type" : "array",
        "items" : {
          "type" : "string",
          "description" : "Webhooks to invoke on AssetRequests",
          "x-amplify-kind-ref" : "Webhook",
          "x-amplify-kind-ref-type" : "soft"
        }
      },
      "catalog.v1alpha1.AssetRequest" : {
        "description" : "Definition of AssetRequest for version v1alpha1 in group catalog. \n\n Resource representing an Access Request to an Asset Resource",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AssetRequest",
        "x-axway-plural" : "assetrequests",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "marketplace", "data", "references", "approval", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Application",
          "plural" : "applications"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Subscription",
            "plural" : "subscriptions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Asset",
            "plural" : "assets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Marketplace",
            "plural" : "marketplaces",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "credentialrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AccessRequest",
            "scopeKind" : "Environment",
            "plural" : "accessrequests",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "assetrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRelease",
            "plural" : "assetreleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AssetRequest. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AssetRequest"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AssetRequest. AssetRequest name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AssetRequest."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestSpec"
          },
          "marketplace" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestMarketplace"
          },
          "data" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestData"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestReferences"
          },
          "approval" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestApproval"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AssetRequestStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AssetRequestSpec" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object"
          },
          "assetResource" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AssetRelease/AssetResource",
            "x-amplify-kind-ref-type" : "hard"
          },
          "subscription" : {
            "type" : "string",
            "description" : "reference to the Subscription to be used to access the Asset Resource.",
            "x-amplify-kind-ref" : "Subscription",
            "x-amplify-kind-ref-type" : "hard"
          }
        },
        "required" : [ "data", "assetResource" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetRequestMarketplace" : {
        "type" : "object",
        "description" : "Details about the marketplace Access Request.",
        "required" : [ "name", "resource" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the Marketplace.",
            "x-amplify-kind-ref" : "Marketplace",
            "x-amplify-kind-ref-type" : "hard"
          },
          "resource" : {
            "type" : "object",
            "description" : "The Marketplace Access Request resource details.",
            "required" : [ "metadata" ],
            "properties" : {
              "metadata" : {
                "type" : "object",
                "description" : "Marketplace Access Request metadata.",
                "properties" : {
                  "createUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  },
                  "modifyUserId" : {
                    "type" : "string",
                    "description" : "Id of the user that created the entity.",
                    "minLength" : 1,
                    "maxLength" : 52
                  }
                },
                "additionalProperties" : false
              },
              "owner" : {
                "description" : "Owner of the Access Request.",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "description" : "The type of the owner.",
                    "enum" : [ "team" ]
                  },
                  "id" : {
                    "type" : "string",
                    "description" : "Id of the owner of the resource.",
                    "maxLength" : 36,
                    "x-amplify-index" : { }
                  },
                  "organization" : {
                    "type" : "object",
                    "description" : "Organization details.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "Id of the organization.",
                        "x-amplify-index" : { }
                      }
                    },
                    "required" : [ "id" ],
                    "additionalProperties" : false
                  }
                },
                "required" : [ "organization" ],
                "additionalProperties" : false
              }
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetRequestData" : {
        "type" : "object",
        "description" : "Data matching the provisioning schema from the AssetRequestDefinition"
      },
      "catalog.v1alpha1.AssetRequestReferences" : {
        "type" : "object",
        "properties" : {
          "assetRequestDefinition" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AuthorizationProfile/AssetRequestDefinition",
            "x-amplify-kind-ref-type" : "soft"
          },
          "assetRelease" : {
            "type" : "string",
            "description" : "Reference to Release that got created from this asset request.",
            "x-amplify-kind-ref" : "AssetRelease",
            "x-amplify-kind-ref-type" : "soft"
          },
          "asset" : {
            "type" : "string",
            "description" : "Reference to Release that got created from this asset request.",
            "x-amplify-kind-ref" : "Asset",
            "x-amplify-kind-ref-type" : "soft"
          },
          "credentialRequestDefinitions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Supported credentials types that can be used with this asset request.",
              "x-amplify-kind-ref" : "AuthorizationProfile/CredentialRequestDefinition",
              "x-amplify-kind-ref-type" : "soft"
            }
          },
          "accessRequest" : {
            "type" : "string",
            "description" : "Reference to Access Request resource",
            "x-amplify-kind-ref" : "management/Environment/AccessRequest",
            "x-amplify-kind-ref-type" : "soft"
          }
        }
      },
      "catalog.v1alpha1.AssetRequestApproval" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "x-amplify-index" : { },
                "enum" : [ "pending", "approved", "rejected" ]
              },
              "reason" : {
                "type" : "string",
                "description" : "Additional info on the state."
              }
            },
            "additionalProperties" : false,
            "required" : [ "name" ]
          }
        },
        "required" : [ "state" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AssetRequestStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "Error", "Success", "Pending" ]
                },
                "detail" : {
                  "type" : "string",
                  "description" : "Details of the error."
                },
                "timestamp" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Time when the update occurred."
                },
                "meta" : {
                  "type" : "object",
                  "additionalProperties" : true
                }
              },
              "required" : [ "type", "detail", "timestamp" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.ExternalSecret" : {
        "description" : "Definition of ExternalSecret for version v1alpha1 in group management. \n\n Resource representing an External Secret.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ExternalSecret",
        "x-axway-plural" : "externalsecrets",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        }, {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ExternalSecret. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ExternalSecret"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ExternalSecret. ExternalSecret name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ExternalSecret."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.ExternalSecretSpec" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.Kubernetes"
            } ],
            "discriminator" : {
              "propertyName" : "provider",
              "mapping" : {
                "Kubernetes" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.Kubernetes"
              }
            }
          },
          "data" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.TlsData"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.ApiKeyData"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.BasicAuthData"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.BearerTokenData"
            } ],
            "discriminator" : {
              "propertyName" : "kind",
              "mapping" : {
                "TLS" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.TlsData",
                "APIKey" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.ApiKeyData",
                "BasicAuth" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.BasicAuthData",
                "BearerToken" : "#/components/schemas/management.v1alpha1.ExternalSecretSpec.BearerTokenData"
              }
            }
          }
        },
        "required" : [ "config", "data" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.ExternalSecretSpec.Kubernetes" : {
        "description" : "K8s Secret Information.",
        "type" : "object",
        "properties" : {
          "provider" : {
            "type" : "string",
            "enum" : [ "Kubernetes" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "description" : "Name of K8s Secret.",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
          },
          "namespace" : {
            "description" : "Namespace which contains the K8s Secret. \nIf none is provided, the secret will be sourced from the namespace into which Amplify Gateway is installed.\n",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        },
        "required" : [ "provider", "name" ]
      },
      "management.v1alpha1.ExternalSecretSpec.TlsData" : {
        "description" : "Data for TLS.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "TLS" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "privateKeyAlias" : {
            "description" : "Alias for the private key in the secret.",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[-._a-zA-Z0-9]+$"
          },
          "certificateAlias" : {
            "description" : "Alias for the certificate in the secret.",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[-._a-zA-Z0-9]+$"
          }
        },
        "required" : [ "kind", "privateKeyAlias", "certificateAlias" ]
      },
      "management.v1alpha1.ExternalSecretSpec.ApiKeyData" : {
        "description" : "Data for API Key.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "APIKey" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "alias" : {
            "description" : "Alias for the API Key in the secret.",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[-._a-zA-Z0-9]+$"
          }
        },
        "required" : [ "kind", "alias" ]
      },
      "management.v1alpha1.ExternalSecretSpec.BasicAuthData" : {
        "description" : "Data for Basic Auth.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "BasicAuth" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "usernameAlias" : {
            "description" : "Alias for the Basic Auth username in the secret.",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[-._a-zA-Z0-9]+$"
          },
          "passwordAlias" : {
            "description" : "Alias for the Basic Auth password in the secret.",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[-._a-zA-Z0-9]+$"
          }
        },
        "required" : [ "kind", "usernameAlias", "passwordAlias" ]
      },
      "management.v1alpha1.ExternalSecretSpec.BearerTokenData" : {
        "description" : "Data for Bearer Token Auth.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "BearerToken" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "alias" : {
            "description" : "Alias for the Bearer Token in the secret.",
            "type" : "string",
            "minLength" : 1,
            "pattern" : "^[-._a-zA-Z0-9]+$"
          }
        },
        "required" : [ "kind", "alias" ]
      },
      "management.v1alpha1.VirtualService" : {
        "description" : "Definition of VirtualService for version v1alpha1 in group management. \n\n The virtual service definition.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "VirtualService",
        "x-axway-plural" : "virtualservices",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "OAS3Document",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "oas3documents",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "GraphQLDocument",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "graphqldocuments",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "RateLimitRule",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "ratelimitrules",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "ExternalSecret",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "externalsecrets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "CorsRule",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "corsrules",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "APIKeyAuthRule",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "apikeyauthrules",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AmplifyOAuth2AuthRule",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "amplifyoauth2authrules",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "AmplifyJWTAuthRule",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "amplifyjwtauthrules",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind VirtualService. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "VirtualService"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the VirtualService. VirtualService name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the VirtualService."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.VirtualServiceSpec" : {
        "type" : "object",
        "properties" : {
          "prefix" : {
            "type" : "string",
            "pattern" : "^(?:\\/[^/?&#\\s]+)*\\/?$",
            "description" : "The path prefix to match. Example /api/v1",
            "minLength" : 1
          },
          "cors" : {
            "type" : "string",
            "x-amplify-kind-ref" : "CorsRule",
            "x-amplify-kind-ref-type" : "soft"
          },
          "auth" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Apikeyauthrule"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyjwtauthrule"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyoauth2authrule"
            }, {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Passthroughauthrule"
            } ],
            "discriminator" : {
              "propertyName" : "kind",
              "mapping" : {
                "APIKeyAuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Apikeyauthrule",
                "AmplifyJWTAuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyjwtauthrule",
                "AmplifyOAuth2AuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyoauth2authrule",
                "PassthroughAuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Passthroughauthrule"
              }
            }
          },
          "route" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.ServiceRouting"
              } ]
            }
          }
        },
        "required" : [ "prefix", "route", "auth" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.VirtualServiceSpec.Apikeyauthrule" : {
        "description" : "API key authentication.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "APIKeyAuthRule" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "APIKeyAuthRule",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "forwardAuthCredentials" : {
            "type" : "boolean",
            "description" : "Parameter not required meaning auth credentials are not forwarded to the backend by default. If set to true, auth credentials are forwarded."
          }
        },
        "additionalProperties" : false,
        "required" : [ "kind", "name" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Amplifyjwtauthrule" : {
        "description" : "Amplify Gateway JWT authentication.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "AmplifyJWTAuthRule" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AmplifyJWTAuthRule",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "forwardAuthCredentials" : {
            "type" : "boolean",
            "description" : "Parameter not required meaning auth credentials are not forwarded to the backend by default. If set to true, auth credentials are forwarded."
          }
        },
        "additionalProperties" : false,
        "required" : [ "kind", "name" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Amplifyoauth2authrule" : {
        "description" : "Amplify Gateway OAuth2 authentication.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "AmplifyOAuth2AuthRule" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "AmplifyOAuth2AuthRule",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "forwardAuthCredentials" : {
            "type" : "boolean",
            "description" : "Parameter not required meaning auth credentials are not forwarded to the backend by default. If set to true, auth credentials are forwarded."
          },
          "scopes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "uniqueItems" : true,
            "description" : "If specified, scope list must be a subset of the scopes defined in the referenced OAuth Rule.\n"
          }
        },
        "additionalProperties" : false,
        "required" : [ "kind", "name" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Passthroughauthrule" : {
        "description" : "Passthrough auth rule.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "PassthroughAuthRule" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "kind" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Apikeycredential" : {
        "description" : "The API Key credential.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "APIKeyCredential" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "secretName" : {
            "description" : "The name of the external secret containing the api key.",
            "type" : "string",
            "x-amplify-kind-ref" : "ExternalSecret",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "in" : {
            "type" : "object",
            "description" : "The object containing the api key name and location in the request.",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "The name of the api key header/query parameter.",
                "minLength" : 1
              },
              "location" : {
                "type" : "string",
                "enum" : [ "header", "query" ]
              }
            },
            "required" : [ "name", "location" ]
          }
        },
        "additionalProperties" : false,
        "required" : [ "kind", "secretName", "in" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Basiccredential" : {
        "description" : "The HTTP Basic credential.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "BasicCredential" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "secretName" : {
            "description" : "The name of the external secret containing the http basic credential.",
            "type" : "string",
            "x-amplify-kind-ref" : "ExternalSecret",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "additionalProperties" : false,
        "required" : [ "kind", "secretName" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Clientcertcredential" : {
        "description" : "The Mutual TLS credentials.",
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "MutualTLSCredential" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "secretName" : {
            "description" : "The name of the external secret containing the client certificate and private key presented during the TLS handshake.\n",
            "type" : "string",
            "x-amplify-kind-ref" : "ExternalSecret",
            "x-amplify-kind-ref-type" : "soft"
          }
        },
        "additionalProperties" : false,
        "required" : [ "kind", "secretName" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Servercertvalidation" : {
        "description" : "The server certificate information.",
        "type" : "object",
        "properties" : {
          "trustedCA" : {
            "description" : "The trusted CA certificate.",
            "type" : "string",
            "minLength" : 1
          },
          "allowUntrustedCert" : {
            "description" : "By default, default certificate verification (e.g., against root CA) will be performed. To allow connections where the certificate fails verification, set this flag to true.\n",
            "type" : "boolean"
          },
          "allowExpiredCert" : {
            "description" : "By default, expired certificates will be rejected. To explicitly allow expired certificates, set this flag to true.\n",
            "type" : "boolean"
          }
        }
      },
      "management.v1alpha1.VirtualServiceSpec.Ratelimitrule" : {
        "description" : "The rate limit rule reference.",
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "rateLimit" : {
            "description" : "The rate limit rule name.",
            "type" : "string",
            "x-amplify-kind-ref" : "RateLimitRule",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          }
        },
        "required" : [ "rateLimit" ]
      },
      "management.v1alpha1.VirtualServiceSpec.ServiceRouting" : {
        "description" : "Per backend service routes.",
        "type" : "object",
        "properties" : {
          "service" : {
            "type" : "object",
            "properties" : {
              "prefix" : {
                "type" : "string",
                "pattern" : "^(?:\\/[^/?&#\\s]+)*\\/?$",
                "description" : "The path prefix to match. Example /api/v1",
                "minLength" : 1
              },
              "protocol" : {
                "type" : "string",
                "enum" : [ "http", "https" ]
              },
              "endpoints" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "host" : {
                      "type" : "string",
                      "pattern" : "^(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?=.{2,255}$)(\\*\\.)?([a-zA-Z0-9-]{2,63})\\.?([a-zA-Z0-9-]{2,63}\\.){0,125}?([a-zA-Z]{2,63})?)$"
                    },
                    "port" : {
                      "type" : "integer",
                      "minimum" : 1,
                      "maximum" : 65535
                    }
                  },
                  "required" : [ "host", "port" ],
                  "additionalProperties" : false
                }
              },
              "codec" : {
                "type" : "string",
                "x-extensible-enum" : [ "AUTO", "HTTP1", "HTTP2" ]
              },
              "connectTimeout" : {
                "type" : "integer",
                "description" : "Timeout in seconds.",
                "minimum" : 1
              },
              "rateLimits" : {
                "description" : "The rate limits to be applied.",
                "type" : "array",
                "uniqueItems" : true,
                "minItems" : 1,
                "maxItems" : 3,
                "items" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Ratelimitrule"
                  }, {
                    "$ref" : "#/components/schemas/api.v1.RateLimit"
                  } ]
                }
              },
              "serverCertValidation" : {
                "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Servercertvalidation"
              },
              "credentials" : {
                "description" : "The backend credentials.",
                "type" : "array",
                "uniqueItems" : true,
                "items" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Apikeycredential"
                  }, {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Basiccredential"
                  }, {
                    "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Clientcertcredential"
                  } ],
                  "discriminator" : {
                    "propertyName" : "kind",
                    "mapping" : {
                      "APIKeyCredential" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Apikeycredential",
                      "BasicCredential" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Basiccredential",
                      "MutualTLSCredential" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Clientcertcredential"
                    }
                  }
                }
              }
            },
            "required" : [ "prefix", "protocol", "endpoints", "codec" ],
            "additionalProperties" : false
          },
          "operations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Operation"
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "service", "operations" ]
      },
      "management.v1alpha1.VirtualServiceSpec.Operation" : {
        "description" : "Configuration for operations on a route.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "minLength" : 1
          },
          "method" : {
            "type" : "string",
            "enum" : [ "GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH" ]
          },
          "path" : {
            "type" : "string",
            "minLength" : 1
          },
          "rules" : {
            "type" : "object",
            "properties" : {
              "cors" : {
                "type" : "string",
                "x-amplify-kind-ref" : "CorsRule",
                "x-amplify-kind-ref-type" : "soft"
              },
              "auth" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Apikeyauthrule"
                }, {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyjwtauthrule"
                }, {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyoauth2authrule"
                }, {
                  "$ref" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Passthroughauthrule"
                } ],
                "discriminator" : {
                  "propertyName" : "kind",
                  "mapping" : {
                    "APIKeyAuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Apikeyauthrule",
                    "AmplifyJWTAuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyjwtauthrule",
                    "AmplifyOAuth2AuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Amplifyoauth2authrule",
                    "PassthroughAuthRule" : "#/components/schemas/management.v1alpha1.VirtualServiceSpec.Passthroughauthrule"
                  }
                }
              }
            },
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false,
        "required" : [ "id", "method", "path" ]
      },
      "management.v1alpha1.OAS3Document" : {
        "description" : "Definition of OAS3Document for version v1alpha1 in group management. \n\n Resource representing the OpenAPI definition for the VirtualService.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "OAS3Document",
        "x-axway-plural" : "oas3documents",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind OAS3Document. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "OAS3Document"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the OAS3Document. OAS3Document name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the OAS3Document."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.OAS3DocumentSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.OAS3DocumentSpec" : {
        "type" : "object",
        "properties" : {
          "virtualService" : {
            "type" : "string",
            "x-amplify-kind-ref" : "VirtualService"
          },
          "oas" : {
            "type" : "object"
          }
        },
        "required" : [ "virtualService", "oas" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.GraphQLDocument" : {
        "description" : "Definition of GraphQLDocument for version v1alpha1 in group management. \n\n Resource representing the GraphQL definition for the VirtualService.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "GraphQLDocument",
        "x-axway-plural" : "graphqldocuments",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "VirtualService",
            "scopeKind" : "VirtualAPIRelease",
            "plural" : "virtualservices",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind GraphQLDocument. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "GraphQLDocument"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the GraphQLDocument. GraphQLDocument name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the GraphQLDocument."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.GraphQLDocumentSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.GraphQLDocumentSpec" : {
        "type" : "object",
        "properties" : {
          "virtualService" : {
            "type" : "string",
            "x-amplify-kind-ref" : "VirtualService"
          },
          "graphql" : {
            "type" : "object"
          }
        },
        "required" : [ "virtualService", "graphql" ],
        "additionalProperties" : false
      },
      "catalog.v1.Document" : {
        "description" : "Definition of Document for version v1 in group catalog. \n\n Resource representing Document",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "Document",
        "x-axway-plural" : "documents",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "icon", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Product",
          "plural" : "products"
        }, {
          "kind" : "ProductRelease",
          "plural" : "productreleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "ProductOverview",
            "scopeKind" : "ProductRelease",
            "plural" : "productoverviews",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Resource",
            "scopeKind" : "ProductRelease",
            "plural" : "resources",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Document. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Document"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Document. Document name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Document."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.DocumentSpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1.DocumentIcon"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1.DocumentStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.DocumentSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "Document description."
          },
          "rank" : {
            "type" : "number",
            "format" : "float",
            "description" : "Rank of document.",
            "default" : 0
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "title" : {
                  "type" : "string",
                  "description" : "Title for the section.",
                  "minLength" : 1,
                  "maxLength" : 100
                },
                "description" : {
                  "type" : "string",
                  "description" : "Description for the section.",
                  "maxLength" : 350
                },
                "articles" : {
                  "description" : "Section articles.",
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/catalog.v1.DocumentSpec.ResourceRef"
                    } ],
                    "discriminator" : {
                      "propertyName" : "kind",
                      "mapping" : {
                        "Resource" : "#/components/schemas/catalog.v1.DocumentSpec.ResourceRef"
                      }
                    }
                  }
                }
              },
              "required" : [ "title" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1.DocumentIcon" : {
        "type" : "string",
        "description" : "Image for the Document expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1.DocumentStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1.DocumentStatus.Error"
              }, {
                "$ref" : "#/components/schemas/catalog.v1.DocumentStatus.Success"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/catalog.v1.DocumentStatus.Error",
                  "Success" : "#/components/schemas/catalog.v1.DocumentStatus.Success"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1.DocumentStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object"
          }
        },
        "required" : [ "type", "timestamp", "detail" ]
      },
      "catalog.v1.DocumentStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object"
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1.DocumentSpec.ResourceRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "Resource" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Resource",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "title" : {
            "type" : "string",
            "description" : "Title for the article.",
            "minLength" : 1,
            "maxLength" : 100
          }
        },
        "required" : [ "kind", "title" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.Document" : {
        "description" : "Definition of Document for version v1alpha1 in group catalog. \n\n Resource representing Document",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Document",
        "x-axway-plural" : "documents",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "icon", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Product",
          "plural" : "products"
        }, {
          "kind" : "ProductRelease",
          "plural" : "productreleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "ProductOverview",
            "scopeKind" : "ProductRelease",
            "plural" : "productoverviews",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Resource",
            "scopeKind" : "ProductRelease",
            "plural" : "resources",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Document. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Document"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Document. Document name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Document."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.DocumentSpec"
          },
          "icon" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.DocumentIcon"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.DocumentStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.DocumentSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "Document description."
          },
          "rank" : {
            "type" : "number",
            "format" : "float",
            "description" : "Rank of document.",
            "default" : 0
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "title" : {
                  "type" : "string",
                  "description" : "Title for the section.",
                  "minLength" : 1,
                  "maxLength" : 100
                },
                "description" : {
                  "type" : "string",
                  "description" : "Description for the section.",
                  "maxLength" : 350
                },
                "articles" : {
                  "description" : "Section articles.",
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/catalog.v1alpha1.DocumentSpec.ResourceRef"
                    } ],
                    "discriminator" : {
                      "propertyName" : "kind",
                      "mapping" : {
                        "Resource" : "#/components/schemas/catalog.v1alpha1.DocumentSpec.ResourceRef"
                      }
                    }
                  }
                }
              },
              "required" : [ "title" ],
              "additionalProperties" : false
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.DocumentIcon" : {
        "type" : "string",
        "description" : "Image for the Document expressed as a Data-Uri (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)",
        "pattern" : "^data:((?:\\w+\\/(?:(?!;).)+)?)((?:;[\\w\\W]*?[^;])*),(.+)$"
      },
      "catalog.v1alpha1.DocumentStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1alpha1.DocumentStatus.Error"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.DocumentStatus.Success"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/catalog.v1alpha1.DocumentStatus.Error",
                  "Success" : "#/components/schemas/catalog.v1alpha1.DocumentStatus.Success"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1alpha1.DocumentStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occured."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object"
          }
        },
        "required" : [ "type", "timestamp", "detail" ]
      },
      "catalog.v1alpha1.DocumentStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object"
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "catalog.v1alpha1.DocumentSpec.ResourceRef" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "Resource" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "name" : {
            "type" : "string",
            "x-amplify-kind-ref" : "Resource",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "title" : {
            "type" : "string",
            "description" : "Title for the article.",
            "minLength" : 1,
            "maxLength" : 100
          }
        },
        "required" : [ "kind", "title" ],
        "additionalProperties" : false
      },
      "catalog.v1.Resource" : {
        "description" : "Definition of Resource for version v1 in group catalog. \n\n Resource representing a Product resource",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "Resource",
        "x-axway-plural" : "resources",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Product",
          "plural" : "products"
        }, {
          "kind" : "ProductRelease",
          "plural" : "productreleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Document",
            "scopeKind" : "ProductRelease",
            "plural" : "documents",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Resource"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Resource. Resource name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Resource."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.ResourceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.ResourceSpec" : {
        "type" : "object",
        "properties" : {
          "fileType" : {
            "type" : "string",
            "description" : "The type of the resource, example: pdf",
            "maxLength" : 50,
            "x-amplify-index" : { }
          },
          "contentType" : {
            "type" : "string",
            "description" : "The content type",
            "pattern" : "^[-\\w.]+/[-\\w.]+$",
            "maxLength" : 350,
            "x-amplify-index" : { }
          },
          "data" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1.ResourceSpec.TextData"
            }, {
              "$ref" : "#/components/schemas/catalog.v1.ResourceSpec.BinaryData"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "text" : "#/components/schemas/catalog.v1.ResourceSpec.TextData",
                "binary" : "#/components/schemas/catalog.v1.ResourceSpec.BinaryData"
              }
            }
          }
        },
        "required" : [ "fileType", "contentType", "data" ],
        "additionalProperties" : false
      },
      "catalog.v1.ResourceSpec.BinaryData" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "binary" ]
          },
          "content" : {
            "type" : "string",
            "description" : "Base64 encoded value of the file.",
            "format" : "base64"
          }
        },
        "required" : [ "content", "type" ],
        "additionalProperties" : false
      },
      "catalog.v1.ResourceSpec.TextData" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "text" ]
          },
          "content" : {
            "type" : "string",
            "description" : "Resource content."
          }
        },
        "required" : [ "content", "type" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.Resource" : {
        "description" : "Definition of Resource for version v1alpha1 in group catalog. \n\n Resource representing a Product resource",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Resource",
        "x-axway-plural" : "resources",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Product",
          "plural" : "products"
        }, {
          "kind" : "ProductRelease",
          "plural" : "productreleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Document",
            "scopeKind" : "ProductRelease",
            "plural" : "documents",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Resource"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Resource. Resource name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Resource."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ResourceSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ResourceSpec" : {
        "type" : "object",
        "properties" : {
          "fileType" : {
            "type" : "string",
            "description" : "The type of the resource, example: pdf",
            "maxLength" : 50,
            "x-amplify-index" : { }
          },
          "contentType" : {
            "type" : "string",
            "description" : "The content type",
            "pattern" : "^[-\\w.]+/[-\\w.]+$",
            "maxLength" : 350,
            "x-amplify-index" : { }
          },
          "data" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/catalog.v1alpha1.ResourceSpec.TextData"
            }, {
              "$ref" : "#/components/schemas/catalog.v1alpha1.ResourceSpec.BinaryData"
            } ],
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "text" : "#/components/schemas/catalog.v1alpha1.ResourceSpec.TextData",
                "binary" : "#/components/schemas/catalog.v1alpha1.ResourceSpec.BinaryData"
              }
            }
          }
        },
        "required" : [ "fileType", "contentType", "data" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ResourceSpec.BinaryData" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "binary" ]
          },
          "content" : {
            "type" : "string",
            "description" : "Base64 encoded value of the file.",
            "format" : "base64"
          }
        },
        "required" : [ "content", "type" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ResourceSpec.TextData" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "text" ]
          },
          "content" : {
            "type" : "string",
            "description" : "Resource content."
          }
        },
        "required" : [ "content", "type" ],
        "additionalProperties" : false
      },
      "catalog.v1.ProductOverview" : {
        "description" : "Definition of ProductOverview for version v1 in group catalog. \n\n Resource that defines the properties of the Product overview for Marketplace",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1",
        "x-axway-kind" : "ProductOverview",
        "x-axway-plural" : "productoverviews",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Product",
          "plural" : "products"
        }, {
          "kind" : "ProductRelease",
          "plural" : "productreleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Document",
            "scopeKind" : "ProductRelease",
            "plural" : "documents",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ProductOverview. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ProductOverview"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ProductOverview. ProductOverview name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ProductOverview."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1.ProductOverviewSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1.ProductOverviewSpec" : {
        "type" : "object",
        "properties" : {
          "documents" : {
            "description" : "Defines all the documents and order for marketplace.",
            "type" : "array",
            "minItems" : 1,
            "maxItems" : 10,
            "items" : {
              "type" : "object",
              "required" : [ "name" ],
              "properties" : {
                "name" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "Document",
                  "x-amplify-kind-ref-type" : "soft"
                }
              },
              "additionalProperties" : false
            }
          }
        }
      },
      "catalog.v1alpha1.ProductOverview" : {
        "description" : "Definition of ProductOverview for version v1alpha1 in group catalog. \n\n Resource that defines the properties of the Product overview for Marketplace",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ProductOverview",
        "x-axway-plural" : "productoverviews",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Product",
          "plural" : "products"
        }, {
          "kind" : "ProductRelease",
          "plural" : "productreleases"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Document",
            "scopeKind" : "ProductRelease",
            "plural" : "documents",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ProductOverview. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ProductOverview"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ProductOverview. ProductOverview name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ProductOverview."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ProductOverviewSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ProductOverviewSpec" : {
        "type" : "object",
        "properties" : {
          "documents" : {
            "description" : "Defines all the documents and order for marketplace.",
            "type" : "array",
            "minItems" : 1,
            "maxItems" : 10,
            "items" : {
              "type" : "object",
              "required" : [ "name" ],
              "properties" : {
                "name" : {
                  "type" : "string",
                  "x-amplify-kind-ref" : "Document",
                  "x-amplify-kind-ref-type" : "soft"
                }
              },
              "additionalProperties" : false
            }
          }
        }
      },
      "management.v1alpha1.Webhook" : {
        "description" : "Definition of Webhook for version v1alpha1 in group management. \n\n Resource representing Webhook Configuration",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Webhook",
        "x-axway-plural" : "webhooks",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        }, {
          "kind" : "Integration",
          "plural" : "integrations"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "ResourceHook",
            "scopeKind" : "Integration",
            "plural" : "resourcehooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "Secret",
            "scopeKind" : "Integration",
            "plural" : "secrets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Webhook. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Webhook"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Webhook. Webhook name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Webhook."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.WebhookSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.WebhookSpec" : {
        "type" : "object",
        "properties" : {
          "auth" : {
            "type" : "object",
            "description" : "Defines the authentication used to invoke the webhook. When invoking the webhook, the value from the secret/key will be sent in the Authorization header.\n",
            "properties" : {
              "secret" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "x-amplify-kind-ref" : "Secret",
                    "x-amplify-kind-ref-type" : "soft",
                    "description" : "Secret name to be used as a reference. If the secret is removed, the reference gets removed and the webhook invocation will be done with no Authorization header.\n"
                  },
                  "key" : {
                    "description" : "Key to be used from the referenced secret.",
                    "type" : "string"
                  }
                },
                "additionalProperties" : false
              }
            },
            "additionalProperties" : false
          },
          "enabled" : {
            "type" : "boolean"
          },
          "url" : {
            "type" : "string",
            "pattern" : "^https?://[\\w-_\\:\\.\\?\\/=%&#~\\[\\]\\(\\)@!$&',;]*$"
          },
          "headers" : {
            "type" : "object",
            "description" : "A list of headers that will be sent as par of the http call to the webhook endpoint.",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "url" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.Webhook" : {
        "description" : "Definition of Webhook for version v1alpha1 in group catalog. \n\n Resource representing Webhook Configuration",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Webhook",
        "x-axway-plural" : "webhooks",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "AuthorizationProfile",
          "plural" : "authprofiles"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "AssetRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "assetrequestdefinitions",
            "subResourceName" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "credentialrequestdefinitions",
            "subResourceName" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "Secret",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "secrets",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Webhook. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Webhook"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Webhook. Webhook name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Webhook."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.WebhookSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.WebhookSpec" : {
        "type" : "object",
        "properties" : {
          "auth" : {
            "type" : "object",
            "description" : "Defines the authentication used to invoke the webhook. When invoking the webhook, the value from the secret/key will be sent in the Authorization header.\n",
            "properties" : {
              "secret" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "x-amplify-kind-ref" : "Secret",
                    "x-amplify-kind-ref-type" : "soft",
                    "description" : "Secret name to be used as a reference. If the secret is removed, the reference gets removed and the webhook invocation will be done with no Authorization header.\n"
                  },
                  "key" : {
                    "description" : "Key to be used from the referenced secret.",
                    "type" : "string"
                  }
                },
                "additionalProperties" : false
              }
            },
            "additionalProperties" : false
          },
          "enabled" : {
            "type" : "boolean"
          },
          "url" : {
            "type" : "string",
            "pattern" : "^https?://[\\w-_\\:\\.\\?\\/=%&#~\\[\\]\\(\\)@!$&',;]*$"
          },
          "headers" : {
            "type" : "object",
            "description" : "A list of headers that will be sent as par of the http call to the webhook endpoint.",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "url" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ReleaseTag" : {
        "description" : "Definition of ReleaseTag for version v1alpha1 in group catalog. \n\n Resource representing an Amplify Central Release Tag",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ReleaseTag",
        "x-axway-plural" : "releasetags",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "state", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "Asset",
          "plural" : "assets"
        }, {
          "kind" : "Product",
          "plural" : "products"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "ProductRelease",
            "plural" : "productreleases",
            "versions" : [ "v1", "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ReleaseTag. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ReleaseTag"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ReleaseTag. ReleaseTag name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ReleaseTag."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTagSpec"
          },
          "state" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTagState"
          },
          "status" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.ReleaseTagSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the Release Tag.",
            "maxLength" : 350
          },
          "releaseType" : {
            "type" : "string",
            "enum" : [ "major", "minor", "patch" ]
          },
          "previousReleases" : {
            "type" : "object",
            "properties" : {
              "updateState" : {
                "type" : "string",
                "description" : "Updates all prior non-archived releases to the deprecated state.",
                "enum" : [ "deprecated" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "releaseType" ],
        "additionalProperties" : false
      },
      "catalog.v1alpha1.ReleaseTagState" : {
        "type" : "string",
        "x-amplify-index" : { },
        "x-extensible-enum" : [ "active", "deprecated", "archived" ]
      },
      "catalog.v1alpha1.ReleaseTagStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus.Error"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus.Success"
              }, {
                "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus.Error",
                  "Success" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus.Success",
                  "Pending" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "catalog.v1alpha1.ReleaseTagStatus.Reference" : {
        "type" : "object",
        "description" : "The resource reference that was created/updated.",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "message of the status of the reference"
          },
          "kind" : {
            "type" : "string"
          },
          "name" : {
            "description" : "The name of the resource that got created.",
            "type" : "string"
          },
          "scopeKind" : {
            "type" : "string"
          },
          "scopeName" : {
            "type" : "string"
          }
        }
      },
      "catalog.v1alpha1.ReleaseTagStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occurred."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the pending status"
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "catalog.v1alpha1.ReleaseTagStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occurred."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "reference" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/catalog.v1alpha1.ReleaseTagStatus.Reference"
                }
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "timestamp", "detail" ]
      },
      "catalog.v1alpha1.ReleaseTagStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "management.v1alpha1.ReleaseTag" : {
        "description" : "Definition of ReleaseTag for version v1alpha1 in group management. \n\n Resource representing an Amplify Central Release Tag",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "ReleaseTag",
        "x-axway-plural" : "releasetags",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "state", "status" ],
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "VirtualAPIRelease",
            "plural" : "virtualapireleases",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind ReleaseTag. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "ReleaseTag"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the ReleaseTag. ReleaseTag name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the ReleaseTag."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTagSpec"
          },
          "state" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTagState"
          },
          "status" : {
            "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.ReleaseTagSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the Release Tag.",
            "maxLength" : 350
          },
          "releaseType" : {
            "type" : "string",
            "enum" : [ "major", "minor", "patch" ]
          },
          "previousReleases" : {
            "type" : "object",
            "properties" : {
              "updateState" : {
                "type" : "string",
                "description" : "Updates all prior non-archived releases to the deprecated state.",
                "enum" : [ "deprecated" ]
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "releaseType" ],
        "additionalProperties" : false
      },
      "management.v1alpha1.ReleaseTagState" : {
        "type" : "string",
        "x-amplify-index" : { },
        "x-extensible-enum" : [ "active", "deprecated", "archived" ]
      },
      "management.v1alpha1.ReleaseTagStatus" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "description" : "The current status level, indicating progress towards consistency.",
            "type" : "string",
            "x-amplify-index" : { },
            "enum" : [ "Success", "Pending", "Error" ]
          },
          "reasons" : {
            "description" : "Reasons for the generated status.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus.Error"
              }, {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus.Success"
              }, {
                "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus.Pending"
              } ],
              "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                  "Error" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus.Error",
                  "Success" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus.Success",
                  "Pending" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus.Pending"
                }
              }
            }
          }
        },
        "additionalProperties" : false,
        "required" : [ "level" ]
      },
      "management.v1alpha1.ReleaseTagStatus.Reference" : {
        "type" : "object",
        "description" : "The resource reference that was created/updated.",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "message of the status of the reference"
          },
          "kind" : {
            "type" : "string"
          },
          "name" : {
            "description" : "The name of the resource that got created.",
            "type" : "string"
          },
          "scopeKind" : {
            "type" : "string"
          },
          "scopeName" : {
            "type" : "string"
          }
        }
      },
      "management.v1alpha1.ReleaseTagStatus.Pending" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Pending" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occurred."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the pending status"
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ]
      },
      "management.v1alpha1.ReleaseTagStatus.Success" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Success" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the change occurred."
          },
          "detail" : {
            "type" : "string",
            "description" : "message of the result"
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "reference" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/management.v1alpha1.ReleaseTagStatus.Reference"
                }
              }
            },
            "additionalProperties" : false
          }
        },
        "required" : [ "type", "timestamp", "detail" ]
      },
      "management.v1alpha1.ReleaseTagStatus.Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            },
            "enum" : [ "Error" ]
          },
          "detail" : {
            "type" : "string",
            "description" : "Details of the error."
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the update occurred."
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "required" : [ "type", "detail", "timestamp" ],
        "additionalProperties" : true
      },
      "management.v1alpha1.CredentialRequestDefinition" : {
        "description" : "Definition of CredentialRequestDefinition for version v1alpha1 in group management. \n\n Defines the supported credentials.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "CredentialRequestDefinition",
        "x-axway-plural" : "credentialrequestdefinitions",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references", "webhooks" ],
        "x-axway-scopes" : [ {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "APIServiceInstance",
            "scopeKind" : "Environment",
            "plural" : "apiserviceinstances",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "Environment",
            "plural" : "credentialrequestdefinitions",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "credentialrequestdefinitions",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Credential",
            "scopeKind" : "Environment",
            "plural" : "credentials",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "Environment",
            "plural" : "credentialrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "management",
            "kind" : "Webhook",
            "scopeKind" : "Environment",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind CredentialRequestDefinition. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "CredentialRequestDefinition"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the CredentialRequestDefinition. CredentialRequestDefinition name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the CredentialRequestDefinition."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinitionSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinitionReferences"
          },
          "webhooks" : {
            "$ref" : "#/components/schemas/management.v1alpha1.CredentialRequestDefinitionWebhooks"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.CredentialRequestDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "schema" : {
            "type" : "object",
            "description" : "JSON Schema draft \\#7 for describing the fields needed to provision Credentials of that type."
          },
          "provision" : {
            "type" : "object",
            "properties" : {
              "schema" : {
                "type" : "object",
                "description" : "JSON Schema draft \\#7 for describing the generated credentials format."
              },
              "policies" : {
                "description" : "Defines the policies applied on the Credentials generated using this definition.",
                "type" : "object",
                "properties" : {
                  "renewable" : {
                    "type" : "boolean",
                    "description" : "Defines on if Credentials using this definitions can be renewed."
                  },
                  "suspendable" : {
                    "type" : "boolean",
                    "description" : "Defines on if Credentials can be suspended."
                  },
                  "expiry" : {
                    "type" : "object",
                    "description" : "Expiry properties for Credentials linked to this definition.",
                    "properties" : {
                      "period" : {
                        "type" : "integer",
                        "format" : "int32",
                        "minimum" : 1,
                        "description" : "The number of days after the Credentials are considered to be expired."
                      },
                      "actions" : {
                        "type" : "array",
                        "description" : "The actions taken when the Credentials expire.",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "type" : {
                              "type" : "string",
                              "description" : "The type of the action taken when the Credential using this definition expires.",
                              "enum" : [ "suspend" ]
                            }
                          }
                        }
                      }
                    },
                    "required" : [ "period" ],
                    "additionalProperties" : false
                  }
                }
              }
            },
            "required" : [ "schema" ],
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false,
        "required" : [ "schema", "provision" ]
      },
      "management.v1alpha1.CredentialRequestDefinitionReferences" : {
        "type" : "object",
        "properties" : {
          "credentialReqDef" : {
            "type" : "string",
            "description" : "The name of the CredentialRequestDefinition from an Environment.",
            "x-amplify-kind-ref" : "management/Environment/CredentialRequestDefinition"
          }
        }
      },
      "management.v1alpha1.CredentialRequestDefinitionWebhooks" : {
        "type" : "array",
        "items" : {
          "type" : "string",
          "description" : "Webhooks to invoke on Credential resource updates.",
          "x-amplify-kind-ref" : "Webhook",
          "x-amplify-kind-ref-type" : "soft"
        }
      },
      "catalog.v1alpha1.CredentialRequestDefinition" : {
        "description" : "Definition of CredentialRequestDefinition for version v1alpha1 in group catalog. \n\n Defines the supported credentials.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "CredentialRequestDefinition",
        "x-axway-plural" : "credentialrequestdefinitions",
        "x-axway-scoped" : true,
        "x-axway-subresources" : [ "references", "webhooks" ],
        "x-axway-scopes" : [ {
          "kind" : "AuthorizationProfile",
          "plural" : "authprofiles"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "AssetRelease",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "Credential",
            "scopeKind" : "Application",
            "plural" : "credentials",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetRequest",
            "scopeKind" : "Application",
            "plural" : "assetrequests",
            "subResourceName" : "references",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "catalog",
            "kind" : "AssetResource",
            "scopeKind" : "Asset",
            "plural" : "assetresources",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "CredentialRequestDefinition",
            "scopeKind" : "Environment",
            "plural" : "credentialrequestdefinitions",
            "versions" : [ "v1alpha1" ],
            "types" : [ "HARD" ]
          }, {
            "group" : "catalog",
            "kind" : "Webhook",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind CredentialRequestDefinition. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "CredentialRequestDefinition"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the CredentialRequestDefinition. CredentialRequestDefinition name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the CredentialRequestDefinition."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinitionSpec"
          },
          "references" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinitionReferences"
          },
          "webhooks" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.CredentialRequestDefinitionWebhooks"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.CredentialRequestDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "schema" : {
            "type" : "object",
            "description" : "JSON Schema draft \\#7 for describing the fields needed to provision Credentials of that type."
          },
          "provision" : {
            "type" : "object",
            "properties" : {
              "schema" : {
                "type" : "object",
                "description" : "JSON Schema draft \\#7 for describing the generated credentials format."
              },
              "policies" : {
                "description" : "Defines the policies applied on the Credentials generated using this definition.",
                "type" : "object",
                "properties" : {
                  "renewable" : {
                    "type" : "boolean",
                    "description" : "Defines on if Credentials using this definitions can be renewed."
                  },
                  "suspendable" : {
                    "type" : "boolean",
                    "description" : "Defines on if Credentials can be suspended."
                  },
                  "expiry" : {
                    "type" : "object",
                    "description" : "Expiry properties for Credentials linked to this definition.",
                    "properties" : {
                      "period" : {
                        "type" : "integer",
                        "format" : "int32",
                        "minimum" : 1,
                        "description" : "The number of days after the Credentials are considered to be expired."
                      },
                      "actions" : {
                        "type" : "array",
                        "description" : "The actions taken when the Credentials expire.",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "type" : {
                              "type" : "string",
                              "description" : "The type of the action taken when the Credential using this definition expires.",
                              "enum" : [ "suspend" ]
                            }
                          }
                        }
                      }
                    },
                    "required" : [ "period" ],
                    "additionalProperties" : false
                  }
                }
              }
            },
            "required" : [ "schema" ],
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false,
        "required" : [ "schema", "provision" ]
      },
      "catalog.v1alpha1.CredentialRequestDefinitionReferences" : {
        "type" : "object",
        "properties" : {
          "credentialReqDef" : {
            "type" : "string",
            "description" : "The name of the CredentialRequestDefinition from an Environment.",
            "x-amplify-kind-ref" : "management/Environment/CredentialRequestDefinition"
          }
        }
      },
      "catalog.v1alpha1.CredentialRequestDefinitionWebhooks" : {
        "type" : "array",
        "items" : {
          "type" : "string",
          "description" : "Webhooks to invoke on Credential resource updates.",
          "x-amplify-kind-ref" : "Webhook",
          "x-amplify-kind-ref-type" : "soft"
        }
      },
      "catalog.v1alpha1.Secret" : {
        "description" : "Definition of Secret for version v1alpha1 in group catalog. \n\n Secrets definitions.",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Secret",
        "x-axway-plural" : "secrets",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "AuthorizationProfile",
          "plural" : "authprofiles"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "catalog",
            "kind" : "Webhook",
            "scopeKind" : "AuthorizationProfile",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Secret. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Secret"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Secret. Secret name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Secret."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.SecretSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.SecretSpec" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "description" : "Key value pairs. The value will be stored encrypted.",
            "x-amplify-encrypted" : true,
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "management.v1alpha1.Secret" : {
        "description" : "Definition of Secret for version v1alpha1 in group management. \n\n Secrets definitions.",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "Secret",
        "x-axway-plural" : "secrets",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Integration",
          "plural" : "integrations"
        }, {
          "kind" : "Environment",
          "plural" : "environments"
        } ],
        "x-axway-references" : {
          "fromResources" : [ {
            "group" : "management",
            "kind" : "Webhook",
            "scopeKind" : "Environment",
            "plural" : "webhooks",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          }, {
            "group" : "management",
            "kind" : "VirtualHost",
            "scopeKind" : "Environment",
            "plural" : "virtualhosts",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ],
          "toResources" : [ ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind Secret. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "Secret"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the Secret. Secret name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the Secret."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.SecretSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.SecretSpec" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "description" : "Key value pairs. The value will be stored encrypted.",
            "x-amplify-encrypted" : true,
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "catalog.v1alpha1.AccessControlList" : {
        "description" : "Definition of AccessControlList for version v1alpha1 in group catalog. \n\n Resource that grants access to resource(s) to the specified subject(s)",
        "type" : "object",
        "x-axway-group" : "catalog",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AccessControlList",
        "x-axway-plural" : "accesscontrollists",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "Asset",
          "plural" : "assets"
        }, {
          "kind" : "SupportContact",
          "plural" : "supportcontacts"
        }, {
          "kind" : "AssetRelease",
          "plural" : "assetreleases"
        }, {
          "kind" : "Application",
          "plural" : "applications"
        }, {
          "kind" : "ProductPlanUnit",
          "plural" : "productplanunits"
        }, {
          "kind" : "AuthorizationProfile",
          "plural" : "authprofiles"
        }, {
          "kind" : "Marketplace",
          "plural" : "marketplaces"
        }, {
          "kind" : "Stage",
          "plural" : "stages"
        }, {
          "kind" : "Subscription",
          "plural" : "subscriptions"
        }, {
          "kind" : "ProductRelease",
          "plural" : "productreleases"
        }, {
          "kind" : "ProductPlan",
          "plural" : "productplans"
        }, {
          "kind" : "Product",
          "plural" : "products"
        }, {
          "kind" : "Category",
          "plural" : "categories"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "catalog",
            "kind" : "../kind",
            "plural" : "stages",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the catalog group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "catalog"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AccessControlList. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AccessControlList"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AccessControlList. AccessControlList name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AccessControlList."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlListSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "catalog.v1alpha1.AccessControlListSpec" : {
        "type" : "object",
        "properties" : {
          "rules" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "access" : {
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlListSpec.AccessLevelScope"
                    }, {
                      "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlListSpec.AccessLevelScopedKind"
                    }, {
                      "$ref" : "#/components/schemas/catalog.v1alpha1.AccessControlListSpec.AccessLevelScopedResource"
                    } ],
                    "discriminator" : {
                      "propertyName" : "level",
                      "mapping" : {
                        "scope" : "#/components/schemas/catalog.v1alpha1.AccessControlListSpec.AccessLevelScope",
                        "scopedKind" : "#/components/schemas/catalog.v1alpha1.AccessControlListSpec.AccessLevelScopedKind",
                        "scopedResource" : "#/components/schemas/catalog.v1alpha1.AccessControlListSpec.AccessLevelScopedResource"
                      }
                    }
                  }
                }
              }
            }
          },
          "subjects" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "Type of the subject",
                  "enum" : [ "team" ]
                },
                "id" : {
                  "type" : "string",
                  "description" : "ID of the subject"
                }
              }
            }
          }
        }
      },
      "catalog.v1alpha1.AccessControlListSpec.AccessLevelScope" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scope" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "allowCreateScoped" : {
            "description" : "Set true to allow users to create scoped resources.",
            "type" : "boolean"
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete the unscoped resource.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update the unscoped resource.",
            "type" : "boolean"
          }
        }
      },
      "catalog.v1alpha1.AccessControlListSpec.AccessLevelScopedKind" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scopedKind" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "The kind of scoped resources to provide access to or \"*\" for all kinds."
          },
          "allowCreate" : {
            "description" : "Set true to allow users to create scoped resources of the specified kind.",
            "type" : "boolean"
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete scoped resources of the specified kind.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update scoped resources of the specified kind.",
            "type" : "boolean"
          }
        },
        "required" : [ "kind" ]
      },
      "catalog.v1alpha1.AccessControlListSpec.AccessLevelScopedResource" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scopedResource" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "The kind of scoped resources to provide access."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the scoped resource to provide access to.",
            "x-amplify-kind-ref" : "../kind",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete the referenced scoped resource.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update the referenced scoped resource.",
            "type" : "boolean"
          }
        },
        "required" : [ "kind", "name" ]
      },
      "management.v1alpha1.AccessControlList" : {
        "description" : "Definition of AccessControlList for version v1alpha1 in group management. \n\n Resource that grants access to resource(s) to the specified subject(s)",
        "type" : "object",
        "x-axway-group" : "management",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AccessControlList",
        "x-axway-plural" : "accesscontrollists",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "VirtualAPIRelease",
          "plural" : "virtualapireleases"
        }, {
          "kind" : "Environment",
          "plural" : "environments"
        }, {
          "kind" : "Mesh",
          "plural" : "meshes"
        }, {
          "kind" : "VirtualAPI",
          "plural" : "virtualapis"
        }, {
          "kind" : "WatchTopic",
          "plural" : "watchtopics"
        }, {
          "kind" : "Integration",
          "plural" : "integrations"
        }, {
          "kind" : "K8SCluster",
          "plural" : "k8sclusters"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "management",
            "kind" : "../kind",
            "plural" : "watchtopics",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the management group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "management"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AccessControlList. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AccessControlList"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AccessControlList. AccessControlList name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AccessControlList."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/management.v1alpha1.AccessControlListSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "management.v1alpha1.AccessControlListSpec" : {
        "type" : "object",
        "properties" : {
          "rules" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "access" : {
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/management.v1alpha1.AccessControlListSpec.AccessLevelScope"
                    }, {
                      "$ref" : "#/components/schemas/management.v1alpha1.AccessControlListSpec.AccessLevelScopedKind"
                    }, {
                      "$ref" : "#/components/schemas/management.v1alpha1.AccessControlListSpec.AccessLevelScopedResource"
                    } ],
                    "discriminator" : {
                      "propertyName" : "level",
                      "mapping" : {
                        "scope" : "#/components/schemas/management.v1alpha1.AccessControlListSpec.AccessLevelScope",
                        "scopedKind" : "#/components/schemas/management.v1alpha1.AccessControlListSpec.AccessLevelScopedKind",
                        "scopedResource" : "#/components/schemas/management.v1alpha1.AccessControlListSpec.AccessLevelScopedResource"
                      }
                    }
                  }
                }
              }
            }
          },
          "subjects" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "Type of the subject",
                  "enum" : [ "team" ]
                },
                "id" : {
                  "type" : "string",
                  "description" : "ID of the subject"
                }
              }
            }
          }
        }
      },
      "management.v1alpha1.AccessControlListSpec.AccessLevelScope" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scope" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "allowCreateScoped" : {
            "description" : "Set true to allow users to create scoped resources.",
            "type" : "boolean"
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete the unscoped resource.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update the unscoped resource.",
            "type" : "boolean"
          }
        }
      },
      "management.v1alpha1.AccessControlListSpec.AccessLevelScopedKind" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scopedKind" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "The kind of scoped resources to provide access to or \"*\" for all kinds."
          },
          "allowCreate" : {
            "description" : "Set true to allow users to create scoped resources of the specified kind.",
            "type" : "boolean"
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete scoped resources of the specified kind.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update scoped resources of the specified kind.",
            "type" : "boolean"
          }
        },
        "required" : [ "kind" ]
      },
      "management.v1alpha1.AccessControlListSpec.AccessLevelScopedResource" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scopedResource" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "The kind of scoped resources to provide access."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the scoped resource to provide access to.",
            "x-amplify-kind-ref" : "../kind",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete the referenced scoped resource.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update the referenced scoped resource.",
            "type" : "boolean"
          }
        },
        "required" : [ "kind", "name" ]
      },
      "definitions.v1alpha1.AccessControlList" : {
        "description" : "Definition of AccessControlList for version v1alpha1 in group definitions. \n\n Resource that grants access to resource(s) to the specified subject(s)",
        "type" : "object",
        "x-axway-group" : "definitions",
        "x-axway-version" : "v1alpha1",
        "x-axway-kind" : "AccessControlList",
        "x-axway-plural" : "accesscontrollists",
        "x-axway-scoped" : true,
        "x-axway-scopes" : [ {
          "kind" : "ResourceGroup",
          "plural" : "groups"
        } ],
        "x-axway-references" : {
          "fromResources" : [ ],
          "toResources" : [ {
            "group" : "definitions",
            "kind" : "../kind",
            "plural" : "groups",
            "versions" : [ "v1alpha1" ],
            "types" : [ "SOFT" ]
          } ]
        },
        "properties" : {
          "group" : {
            "type" : "string",
            "maxLength" : 80,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "readOnly" : true,
            "description" : "Resource belongs to the definitions group. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "definitions"
          },
          "apiVersion" : {
            "type" : "string",
            "maxLength" : 20,
            "readOnly" : true,
            "description" : "Resource version is v1alpha1. The version defines the structure of the resource. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "v1alpha1"
          },
          "kind" : {
            "type" : "string",
            "maxLength" : 30,
            "readOnly" : true,
            "description" : "Resource of kind AccessControlList. Cannot be updated. The server infers this from the endpoint the client submits the request to.",
            "default" : "AccessControlList"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*",
            "description" : "Name of the AccessControlList. AccessControlList name is unique and cannot be updated. The characters allowed in names are: digits (0-9), lower case letters (a-z), -, and ."
          },
          "title" : {
            "type" : "string",
            "maxLength" : 350,
            "description" : "The friendly name of the AccessControlList."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/api.v1.Metadata"
          },
          "owner" : {
            "$ref" : "#/components/schemas/api.v1.Owner"
          },
          "finalizers" : {
            "type" : "array",
            "description" : "List of finalizers",
            "items" : {
              "$ref" : "#/components/schemas/api.v1.Finalizer"
            }
          },
          "attributes" : {
            "$ref" : "#/components/schemas/api.v1.Attributes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags.",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 80
            }
          },
          "spec" : {
            "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlListSpec"
          }
        },
        "required" : [ "spec" ]
      },
      "definitions.v1alpha1.AccessControlListSpec" : {
        "type" : "object",
        "properties" : {
          "rules" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "access" : {
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlListSpec.AccessLevelScope"
                    }, {
                      "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlListSpec.AccessLevelScopedKind"
                    }, {
                      "$ref" : "#/components/schemas/definitions.v1alpha1.AccessControlListSpec.AccessLevelScopedResource"
                    } ],
                    "discriminator" : {
                      "propertyName" : "level",
                      "mapping" : {
                        "scope" : "#/components/schemas/definitions.v1alpha1.AccessControlListSpec.AccessLevelScope",
                        "scopedKind" : "#/components/schemas/definitions.v1alpha1.AccessControlListSpec.AccessLevelScopedKind",
                        "scopedResource" : "#/components/schemas/definitions.v1alpha1.AccessControlListSpec.AccessLevelScopedResource"
                      }
                    }
                  }
                }
              }
            }
          },
          "subjects" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "Type of the subject",
                  "enum" : [ "team" ]
                },
                "id" : {
                  "type" : "string",
                  "description" : "ID of the subject"
                }
              }
            }
          }
        }
      },
      "definitions.v1alpha1.AccessControlListSpec.AccessLevelScope" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scope" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "allowCreateScoped" : {
            "description" : "Set true to allow users to create scoped resources.",
            "type" : "boolean"
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete the unscoped resource.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update the unscoped resource.",
            "type" : "boolean"
          }
        }
      },
      "definitions.v1alpha1.AccessControlListSpec.AccessLevelScopedKind" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scopedKind" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "The kind of scoped resources to provide access to or \"*\" for all kinds."
          },
          "allowCreate" : {
            "description" : "Set true to allow users to create scoped resources of the specified kind.",
            "type" : "boolean"
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete scoped resources of the specified kind.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update scoped resources of the specified kind.",
            "type" : "boolean"
          }
        },
        "required" : [ "kind" ]
      },
      "definitions.v1alpha1.AccessControlListSpec.AccessLevelScopedResource" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "string",
            "description" : "Resource level at which access is being granted.",
            "enum" : [ "scopedResource" ],
            "x-axway-code-gen-java" : {
              "fieldType" : "String"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "The kind of scoped resources to provide access."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the scoped resource to provide access to.",
            "x-amplify-kind-ref" : "../kind",
            "x-amplify-kind-ref-type" : "soft",
            "x-amplify-kind-ref-collateral" : [ "../" ]
          },
          "allowDelete" : {
            "description" : "Set true to allow users to delete the referenced scoped resource.",
            "type" : "boolean"
          },
          "allowWrite" : {
            "description" : "Set true to allow users to update the referenced scoped resource.",
            "type" : "boolean"
          }
        },
        "required" : [ "kind", "name" ]
      }
    }
  }
}
